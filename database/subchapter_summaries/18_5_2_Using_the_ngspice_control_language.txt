**Summary (Ngspice Monte Carlo Simulations and Control Language)**:

### Example 1: LC Band-Pass Filter with Monte Carlo Simulation
- **Purpose**: Perform 100 Monte Carlo runs with varying L and C values and conduct AC analysis for each run.
- **Netlist Code**:
  ```
  V1 N001 0 AC 1 DC 0
  R1 N002 N001 141
  C1 OUT 0 1e-09
  L1 OUT 0 10e-06
  C2 N002 0 1e-09
  L2 N002 0 10e-06
  L3 N003 N002 40e-06
  C3 OUT N003 250e-12
  R2 0 OUT 141
  ```
- **Control Script**:
  ```
  .control
    let mc_runs = 100
    let run = 1
    define unif(nom, var) (nom + nom*var * sunif(0))
    define aunif(nom, avar) (nom + avar * sunif(0))
    define gauss(nom, var, sig) (nom + nom*var/sig * sgauss(0))
    define agauss(nom, avar, sig) (nom + avar/sig * sgauss(0))
    dowhile run <= mc_runs
      alter c1 = gauss(1e-09, 0.1, 3)
      alter l1 = agauss(10e-06, 2e-06, 3)
      alter c2 = agauss(1e-09, 100e-12, 3)
      alter l2 = gauss(10e-06, 0.2, 3)
      alter l3 = agauss(40e-06, 8e-06, 3)
      alter c3 = gauss(250e-12, 0.15, 3)
      ac oct 100 250K 10Meg
      let vout{$run}={$curplot}.v(out)
      let run = run + 1
    end
    plot db({$scratch}.all)
  .endc
  ```

- **Key Functions**:
  - `sunif(0)` and `sgauss(0)`: Return uniform or Gaussian random numbers.
  - `define` functions (e.g., `unif`, `gauss`) generate random values with specified mean and deviation.
  - `alter`: Adjusts parameter values dynamically.
  - `ac oct 100 250K 10Meg`: Performs AC analysis over specified frequency range.
  - `plot db`: Plots output voltage in dB.

---

### Example 2: Ring Oscillator with Monte Carlo Simulation
- **Circuit**: 25-stage ring oscillator (CMOS inverters, using BSIM3 model).
- **Simulation Type**:
  - Transient simulation.
  - Statistical variation of parameters (`vth`, `u0`, `tox`, `L`, `W`) across runs.
  - Oscillation frequency measured via FFT and stored.
- **Key Features**:
  - Use `unif`, `aunif`, `gauss`, `agauss` to vary model parameters.
  - Use `altermod` to modify model parameters during simulation.
  - `meas` command: Measures the peak of the FFT signal (frequency of oscillation).
  - Stores frequency data in a vector and plots histogram of results.

---

### Example 3: Monte Carlo with Seeded RNG for CMOS Ring Oscillator
- **File Setup**:
  - `MC_2_control.sp`: Ngspice control script implementing a loop.
  - `MC_2_circ.sp`: Circuit netlist file.
- **Process**:
  - Random Number Generator (RNG) seeded with loop counter.
  - Circuit file sourced, simulation run, raw data stored, FFT performed, frequency saved, outputs cleared, and loop restarted.
- **Advanced MOSFET Models**:
  - MOS model parameters (e.g., threshold voltage, mobility, gate oxide thickness) are varied using `AGAUSS` functions.
  - Reflects practices in commercial foundry libraries.
- **Execution**:
  - `ngspice -o MC_2_control.log MC_2_control.sp`

---

**Theoretical Notes**:
- `sunif(0)` and `sgauss(0)` provide uniformly or Gaussian-distributed randomness for statistical simulations.
- Variables like `n1vth0` can store model parameters for reuse in functions.
- Parameters adjusted with `altermod` and FFT results processed with `meas`.

---

### Relevant Observations:
- **Monte Carlo Simulations**: These examples demonstrate parameter variation (uniform or Gaussian) and statistical circuit analysis, useful for analyzing performance under variability.
- **Applications**: Suitable for designs like filters, oscillators, and ICs where randomness or statistical metrics (like distributions) are critical in debugging and optimization.
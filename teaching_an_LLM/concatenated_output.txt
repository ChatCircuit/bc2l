**Ngspice General Options Summary (Section 11.1.1)**  

- **SPARSE:** Selects the Sparse 1.3 matrix solver.  
  - Default and standard if no option is specified.  
  - Preferable for behavioral device model simulation.  
  - Required for noise or CIDER simulations.  

- **KLU:** Selects the KLU matrix solver.  
  - Preferable for faster simulation of circuits with MOS devices.  
  - Does not support noise or CIDER simulations.  

- **ACCT / NOACCT:**  
  - `ACCT`: Prints accounting and runtime statistics.  
  - `NOACCT`: Suppresses runtime statistics and the "Initial Transient Solution."  

- **NOINIT:** Suppresses only the "Initial Transient Solution." Can be combined with `ACCT`.  
- **LIST:** Outputs a summary listing of input data.  
- **NOMOD:** Suppresses model parameter output.  
- **NOPAGE:** Suppresses page ejects in output.  
- **NODE:** Prints the node table.  
- **NOREFVALUE:** Suppresses printing of reference values (available with `--enable-ndev` configuration).  
- **OPTS:** Prints the values of options selected.  

- **SEED=val|random:**
  - Sets the seed for the random number generator.  
  - `val`: Any positive integer.  
  - `random`: Sets seed to the current Unix epoch time.  
- **SEEDINFO:** Prints the set seed value when assigned a new integer.  

- **TEMP=x:** Operating temperature of the circuit (default: 27°C or 300K).  
  - Device-specific temperature overrides device temperatures.  
  - Overridden generally by `.TEMP` card.  

- **TNOM=x:** Nominal temperature at which device parameters are measured (default: 27°C or 300K).  
  - Can be overridden for specific devices.  

- **WARN=1|0:** Enables (`1`) or disables (`0`, default) SOA voltage warnings.  
- **MAXWARNS=x:** Maximum number of SOA warnings per model (default: 5).  

- **SAVECURRENTS:** Saves currents through all terminals of devices (`M, J, Q, D, R, C, L, B, F, G, W, S, I`).  
  - Recommended only for small circuits due to high memory and performance costs.  
  - Supported only for `op`, `dc`, and `tran` simulations (not `ac`).  
  - For `M` devices, MOS level 1 is fully supported; other MOS levels not fully reported.  
  - Outputs may include empty zero-length vectors, which impede commands like `wrdata`.  
  - Use command `remzerovec` before executing `wrdata` to remove zero-length vectors.
**Summary of DC and OP (Operating Point) Solution Options**  

**Options for .DC and .OP Solution Settings**
- **ABSTOL=x:** Sets the absolute current error tolerance. Default = 1 pA.
- **GMIN=x:** Sets the minimum conductance. Default = 1.0e-12.
- **GMINSTEPS=x [*]:** Defines the number of Gmin stepping attempts. Default behavior: Gmin stepping is performed before source stepping unless `GMINSTEPS=0`.
- **ITL1=x:** Sets the DC iteration limit. Default = 100.
- **ITL2=x:** Sets the DC transfer curve iteration limit. Default = 50.
- **KEEPOPINFO:** Preserves the operating point (OP) information when running AC, Distortion, or Pole-Zero analysis. Avoids redundant `.OP` runs in large circuits.
- **NOOPITER:** Skips the first iteration and directly applies Gmin stepping.
- **PIVREL=x:** Sets the relative pivot threshold for numerical pivoting in the matrix. Default = 1.0e-3.
- **PIVTOL=x:** Sets the absolute minimum matrix entry for pivot acceptance. Default = 1.0e-13.
- **RELTOL=x:** Sets the relative error tolerance. Default = 0.001 (0.1%).
- **RSHUNT=x:** Activates resistors from each analog node to ground (XSPICE must be enabled). Resistor values should be high (e.g., 1.0e12 Ω) to avoid interfering with the circuit operation.
- **VNTOL=x:** Sets the absolute voltage error tolerance. Default = 1 μV.

---

**Matrix Conditioning in Circuit Simulation**
- Nodes without a DC path to ground (e.g., two capacitors in series or cascaded code models) can lead to simulation failures due to matrix singularity.
- To address this, use `RSHUNT`:
  ```
  .option rshunt = 1.0e12
  ```
  - Typical value = 1 TΩ. In severe cases, reduce to 10 GΩ or 1 GΩ.
- For inductors in parallel with voltage sources (causing AC analysis failures), add a small series resistor:
  ```
  .option rseries = 1.0e-4
  ```
  - Be cautious when using behavioral inductors, as results may become unpredictable.
- To stabilize matrices, add a small capacitor to each voltage node in the circuit:
  ```
  .option cshunt = 1.3e-13
  ```

---

This summary outlines the essential options, default values, and best practices for addressing convergence or matrix issues in `.OP`, `.DC`, and related simulations.
**Summary of Section 11.1.3 AC Solution Options:**

- **NOOPAC**:  
  - Skips the operating point (OP) analysis prior to AC analysis.  
  - Applicable only to linear circuits comprising R, L, C devices, independent voltage/current sources, and linear dependent sources (E, G, H, F) without "poly" or non-behavioral definitions.  
  - If any non-linear device is detected, OP analysis executes automatically.  
  - Useful for circuits like nested LC networks without series resistance in inductors (L).  
  - Beneficial for very large linear networks (e.g., 10,000+ nodes), potentially increasing simulation speed by up to 10×.  
  - Avoids matrix ill-formation issues encountered during OP analysis.  

**Summary of Ngspice Manual (Section 11.1.4 Transient Analysis Options)**

- **AUTOSTOP**: Stops transient analysis after finishing `.meas` commands in batch/control mode. Not available with `meas` command in control mode.

- **CHGTOL=x**: Sets charge tolerance. Default value: `1.0e-14`.

- **CONVSTEP=x & CONVABSSTEP=x**: Relative and absolute step limits for code models, respectively.

- **INTERP**: Interpolates output data onto fixed `TSTEP` grid using linear interpolation. Does not affect simulation but reduces memory usage (control mode) and file size (batch mode). Example: `Ngspice/examples/xspice/delta-sigma/delta-sigma-1.cir`.

- **ITL3=x**: Lower transient analysis iteration limit. Default: `4`. *(Note: not in Spice3)*.

- **ITL4=x**: Time-point transient iteration limit. Default: `10`.

- **ITL5=x**: Total transient analysis iteration limit. Default: `5000`. Set `ITL5=0` to disable this test. *(Note: not in Spice3)*.

- **ITL6=x [*]**: Synonym for `SRCSTEPS`.

- **MAXEVTITER=x & MAXOPALTER=x**: Maximum event iterations per analysis point and maximum analog/event alternations for solving hybrid circuits, respectively.

- **MAXORD=x [*]**: Maximum order for numerical integration:
  - Gear method (`2-6`); Default: `2`.
  - Trapezoidal method (`1`: backward Euler).

- **METHOD=name**: Sets numerical integration method:
  - Options: `Gear`, `trapezoidal` (`trap`).
  - Default: `trapezoidal`.

- **NOOPALTER=TRUE|FALSE**: If `FALSE`, enables analog-event alternations for XSPICE models during initial DC operating analysis.

- **RAMPTIME=x**: Rate of change for independent sources during source stepping; affects inductors/capacitors with initial conditions.

- **SRCSTEPS=x [*]**: Activates source-stepping method for DC operating point solution. Specifies the number of steps.

- **TRTOL=x**: Sets transient error tolerance. Default: `7`. Value internalized to `1` for higher precision in XSPICE configurations with `'A'` devices (slows transient analysis). 

- **XMU=x**: Damping factor for trapezoidal integration. Default: `0.5`. Lower values (e.g., `0.495`) may suppress trap ringing but must be carefully adjusted to avoid excessive damping.


**Summary of the given text:**  

**Element-specific options:**  
1. **BADMOS3**: Enables the older MOS3 model featuring the `kappa` discontinuity.  
2. **DEFAD=x**: Resets the MOS drain diffusion area; default = 0.  
3. **DEFAS=x**: Resets the MOS source diffusion area; default = 0.  
4. **DEFL=x**: Resets the MOS channel length; default = 100 μm.  
5. **DEFW=x**: Resets the MOS channel width; default = 100 μm.  
6. **SCALE=x**: Sets scaling factors for geometric parameters (default unit: meters). Example:  
   - `scale=1u`, `W=10` results in a width of 10 μm.  
   - `AD=20` results in an area of 20e-12 m².  
  
**Instance parameters affected by scaling:**  
- **Resistors/Capacitors**: W, L  
- **Diodes**: W, L, Area  
- **JFET/MESFET**: W, L, Area  
- **MOSFET**: W, L, AS, AD, PS, PD, SA, SB, SC, SD
Transmission Lines Specific Options:  
**TRYTOCOMPACT**: Used exclusively with the **LTRA model** (refer 6.2.1). When activated, the simulator attempts to condense the transmission line's historical input voltage and current data.
**Summary:**

- **Precedence of Options in Ngspice:**
  - If no options are set, Ngspice uses **internal default values** for simulator variables.
  - Options can be specified at various levels:
    1. **Init files** (`spinit` or `.spiceinit`) using the `option` command (see section 13.5.55). These override default values.
    2. **Input file** via the `.options` command. These override both default values and init file values.
    3. **Control block** (`.control ... .endc`) in the input file. These override all prior settings, including `.options` and init file values.
**Summary of Ngspice Manual Extract:**

- **Simulator Variables (`.options`)**:
  - The `.options` line in a netlist allows control of simulation parameters, impacting accuracy, speed, or default values for specific devices.  
  - Syntax:
    ```
    .options opt1 opt2 ... (or opt=optval ...)
    ```
  - Example usage:
    ```
    .options reltol=.005 trtol=8
    ```
  - Description:
    - Options specified directly through the `.options` line or using the `option` command (referenced in section 13.5.55) are interchangeable.
    - Any number of options can be included in the `.options` statement in any order.
  
- **Details**:
  - `x` in the syntax refers to some positive number.
  - Parameters are flexible and can be adjusted for specific simulation goals (e.g., tuning relative tolerance (`reltol`) or transient analysis tolerance (`trtol`)).

This summary focuses solely on netlist code generation/modification/debugging and excludes general or non-critical details.
**Summary of Extracted Information:**

**Command Overview:**
- **`.nodeset`**: Specifies initial voltage guesses for nodes to aid in convergence during DC or initial transient solution simulations.

**General Syntax:**
- `.nodeset v(nodnum)=val v(nodnum)=val ...`
- `.nodeset all=val`

**Default/Application Notes:**
- Useful for bistable or astable circuits to assist convergence.
- Typically not necessary in general cases.
- `.nodeset all=val` sets a uniform starting voltage for all nodes (except ground).

**Examples & Important Unique Cases:**
- `.nodeset v(12)=4.5 v(4)=2.23` — Sets specific initial voltages for node 12 and node 4.
- `.nodeset all=1.5` — Sets all node starting voltages to 1.5 Volts.


### Summary of .IC Command in Ngspice for Netlist Usage
**Purpose**: The `.ic` command sets initial conditions for transient simulation. It is distinct from `.nodeset`, which aids DC convergence but doesn't affect the final bias solution.

#### General Form
`.ic v(node)=value v(node)=value ...`

#### Examples:
`.ic v(11)=5 v(4)=-5 v(2)=2.2`

---

### Interpretation of `.IC` Based on `.tran`'s `uic` Parameter:
1. **With `uic` Specified in `.tran`**:
   - Node voltages defined in `.ic` are used to calculate initial conditions for capacitors, diodes, BJTs, JFETs, and MOSFETs.
   - Equivalent to using the `ic=` parameter in individual device lines, but `.ic` is more convenient.
   - Device-specific `ic=` values **override** corresponding `.ic` values.
   - No DC bias (initial transient) is computed before the transient analysis.
   - Ensure all DC source voltages contributing to device initial conditions are specified in `.ic`.

2. **Without `uic` Specified in `.tran`**:
   - A DC bias solution is computed before transient analysis.
   - `.ic` enforces specific initial values for node voltages during the bias solution phase only.
   - During transient analysis, constraints on node voltages are lifted.
   - Preferred method as it provides consistent DC solutions.

---

### Helpful Command
- **`wrnodev` Command (Section 13.5.108)**:
  - Saves node voltages in `.ic` format for reuse with `.include`.

---

By understanding these detailed `.ic` settings, transient simulations can be more effectively configured, and netlist debugging becomes more intuitive, especially when combined with `.tran` settings.
### Summary: Ngspice Manual (Section 11.2 Initial Conditions)

#### Initial Condition Specification:
- **Purpose**: Used to set the initial voltages on capacitors and currents through inductors in the circuit. Essential for determining circuit behavior at the start of simulations, especially transient analysis. 

#### Command Syntax:
- Defined in netlists using **`.IC`** in the following format:
  ```
  .IC V(node1)=value1 V(node2)=value2 ...
  ```
  Example:
  ```
  .IC V(1)=2.5 V(2)=0.5
  ```
  - Sets the initial voltage at node 1 to 2.5V and node 2 to 0.5V.

#### Impact and Behavior:
- **Transient Analysis (default)**: 
  - Overrides default initial guesses for circuit variables.
  - Typically influences the initial solution of differential equations.
- **DC Operating Point**: 
  - Does NOT modify the DC operating point directly unless `.NODESET` or another related directive is used.

#### Related Notes:
- The `.IC` directive is used during transient analysis and enhances the solver's performance by providing a good starting point.

**11.3.10 .TRAN: Transient Analysis**  
General form:  
`.tran tstep tstop <tstart <tmax>> <uic>`  

Examples:  
1. `.tran 1ns 100ns`  
2. `.tran 1ns 1000ns 500ns`  
3. `.tran 10ns 1us`  

### Component Details:  
**Parameters**  
- **tstep**:  
  - Increment for printing or plotting.  
  - Suggested computing increment for post-processor.  

- **tstop**:  
  - Final simulation time for transient analysis.  

- **tstart** (optional):  
  - Initial simulation time. Defaults to zero if omitted.  
  - Analysis starts from time zero, with the circuit analyzed but outputs not stored in [zero, tstart).  

- **tmax** (optional):  
  - Maximum step size used by Ngspice.  
  - Default value: `min(tstep, (tstop - tstart) / 50.0)`.  
  - Ensures a computing interval smaller than the printing increment (`tstep`).  

- **uic** (optional):  
  - Specifies "use initial conditions".  
  - Prevents Ngspice from solving for a quiescent operating point before analysis.  
  - Initial conditions are derived from values set with `IC=...` on elements.  
  - If `.ic` control line exists (see Section 11.2.2), node voltages on `.ic` are used for device initialization.  
  - Priority hierarchy: `IC=...` → `.ic` control line → zero assumed if neither is defined.  

### Theoretical Characteristics:  
- **Initial Transient Operating Point (time zero)**:  
  - Independent voltages and currents applied at their time zero values.  
  - Capacitances treated as open.  
  - Inductances treated as shorted.  
  - Nonlinear device equations solved iteratively.


**Transient Noise Analysis Summary (Ngspice Manual, Section 11.3.11):**

1. **Definition and Integration**:
   - Transient noise analysis adds noise currents or voltages over time as random signals on top of fixed DC voltages.
   - Not implemented as `.noise` command; instead, integrated with the independent voltage source (`vsrc`) and combined with `.tran` transient analysis.
   - Noise sequence has random amplitude and equidistant time intervals defined by the user (parameter `NT`).

2. **Noise Types**:
   - **White Noise**:
     - Generated via Box-Muller transform using a random number generator.
     - Created dynamically at breakpoints.
   - **1/f Noise (Pink Noise)**:
     - Generated using Kasdin's algorithm.
     - Noise sequence is pre-generated at startup and retrieved during simulation.
   - **Random Telegraph Signal (RTS) Noise**:
     - Simulates burst/popcorn noise, requiring specific user-defined parameters:
       - Noise amplitude, mean capture time, and mean emission time.
       - Each parameter follows a Poisson distribution.

3. **Key Parameters**:
   - **`NT`**: Time interval selection for noise sequence. Recommended value is 10× smaller than the frequency limit of the circuit.
   - **Reproducibility**: Use `setseed nn` (positive integer) in `spinit` or `.spiceinit` to generate repeatable random noise sequences.

4. **Advantages and Limitations**:
   - Suitable for circuits with switches where small-signal `.noise` analysis is unsuitable.
   - Increased simulation time and required time steps.

5. **Noise Sources in Components**:
   - Independent voltage and current sources allow white noise, 1/f noise, and RTS noise, combinable within a single command line.

6. **Example Codes:**
   - **Shot Noise Simulation using Diode and B Source**:
     ```
     Vdev out 0 DC 0 PULSE(0.4 0.45 10u)
     D1 mess 0 DMOD
     .model DMOD D IS=1e-14 N=1
     X1 0 mess out ishot
     .subckt ishot 1 2 3
     VNG 0 11 DC 0 TRNOISE(1 1n 0 0)
     V1 2 3 DC 0
     BI 1 3 I=sqrt(2*abs(i(v1))*1.6e-19*1e7)*v(11)
     .ends ishot
     .tran 1n 20u
     ```

   - **RTS Noise Example**:
     ```
     VRTS2 13 12 DC 0 trnoise(0 0 0 0 5m 18u 30u)
     VALL 12 11 DC 0 trnoise(1m 1u 1.0 0.1m 15m 22u 50u)
     IALL 10 0 DC 0 trnoise(1m 1u 1.0 0.1m 15m 22u 50u)
     .tran 1u 500u
     ```

7. **Usage Guidance**:
   - **Frequency Bandwidth**: Ensure realistic noise bandwidth by limiting the frequency range of interest.
   - Calibration and theoretical considerations (e.g., spectral density, transistor noise modeling) remain open issues.

8. **Theoretical Considerations**:
   - Discussions pending for calibration, time step (`NT`) selection, and practical benefits/limitations of transient noise analysis.

**Note**: The transient noise feature is experimental.
**Summary of Ngspice .PSS (Periodic Steady State) Analysis Section:**

- **General Syntax:**  
  `.pss gfreq tstab oscnob psspoints harms sciter steadycoeff <uic>`

- **Key Parameters Explained:**  
  - **gfreq:** User-suggested guessed fundamental frequency. If inaccurate within ±10% of inferred frequency (rgfreq), it will be discarded.  
  - **tstab:** Stabilization time before shooting analysis begins. Proper tstab is crucial; recommended to ensure circuit readiness by performing a TRAN analysis prior to PSS analysis.  
  - **oscnob:** Node/branch for oscillation dynamics. Harmonic content reported here.  
  - **psspoints:** Steps for evaluating predicted period after convergence. Should exceed at least twice the requested `harms`. Adjusted automatically if set improperly.  
  - **harms:** Number of harmonics requested for calculation.  
  - **sciter:** Allowed shooting cycle iterations. Default = **50**.  
  - **steady_coeff:** Weighting coefficient for Global Convergence Error (reference for determining convergence). Lower values increase accuracy but prolong analysis time. Default = **1e-3**.  
  - **uic (Optional):** Indicates no quiescent operating point solution before transient analysis. If provided, initial conditions specified using IC=... will be used, or node voltages from the `.ic` line (if provided).  

- **Example Codes:** Unique/important lines preserved:  
  - `.pss 150 200e-3 2 1024 11 50 5e-3 uic`  
  - `.pss 624e6 500n bout 1024 10 100 5e-3 uic`

This periodic steady-state analysis (experimental code) focuses on harmonic prediction at oscillatory nodes or branches using fine-tuned parameters like stabilizing time (`tstab`), guessed frequencies, shooting iterations, and calculation accuracy (via `steady_coeff`).
**Summary - `.AC: Small-Signal AC Analysis`**

**General Form:**
1. `.ac dec nd fstart fstop`  
   - `dec`: Decade sweep (log scale).
   - `nd`: Number of points per decade.
2. `.ac oct no fstart fstop`  
   - `oct`: Octave sweep (log scale).
   - `no`: Number of points per octave.
3. `.ac lin np fstart fstop`  
   - `lin`: Linear frequency variation.
   - `np`: Number of points.

**Parameters:**
- `fstart`: Starting frequency of analysis.
- `fstop`: Final frequency of analysis.

**Important Notes:**
- At least one independent source must have an `ac` value to perform AC analysis. Typically, only one AC source is recommended.
- All non-linear devices are linearized at their DC operating point. Capacitance (C) and Inductance (L) values are frequency-dependent during the analysis.
- Output data (e.g., node voltages, branch currents) are complex and analyzed relative to the AC input source.

**Usage and Options:**
- Use `.plot` to graph results. Example: `vdb(node)` calculates magnitude in dB.
- For large **linear circuits** (e.g., R, L, C, I, V, E, G, F, H — simplified versions only), the `noopac` option skips DC operating point calculation for faster simulation.
- AC analysis does not support output parameters like `@m1[cgs]` or `@r1[i]`.

**Example: Basic RC Circuit**
```plaintext
r 1 2 1.0
c 2 0 1.0
vin 1 0 dc 0 ac 1  $ <--- the AC source
.options noacct
.ac dec 10 .01 10
.plot ac vdb(2) xlog
.end
```

- The `.ac` statement performs a sweep from `fstart=0.01 Hz` to `fstop=10 Hz` with 10 points per decade.
- `vdb(2)` plots the magnitude in decibels at node 2.

**Key Theoretical Notes:**
- AC analysis uses the superposition principle if multiple AC sources are included, making interpretation complex.
- Use linear models only; polynomial or behavioral components are incompatible with `noopac`.

**Efficient Simulation:**
- Use `noopac` for time savings with exclusively linear circuits (e.g., R, C, L, simple E, G, F, H).


.dc command in Ngspice is used to define a **DC transfer curve** sweep of sources, resistors, or circuit temperature under DC conditions (capacitors open, inductors shorted).

### General Syntax:
```
.dc srcnam vstart vstop vincr [src2 vstart2 vstop2 vincr2]
```

### Parameters:
- **srcnam**: Name of a voltage/current source, resistor, or temperature being swept.
- **vstart, vstop, vincr**: Start value, stop value, and increment step for the sweep.
- **src2, vstart2, vstop2, vincr2**: (Optional) A second independent variable for a nested sweep.

### Functionality:
- Sweeps the primary source (`srcnam`) over the specified range.
- If a second sweep source (`src2`) is provided, the second variable sweeps over its range and, for each of its values, the primary source is fully swept.

#### Use Case:
- Provides characteristics such as device output curves or circuit performance under varying parameters.

### Examples:
1. **Single Sweep**:
   ```
   .dc VIN 0.25 5.0 0.25
   ```
   Sweeps voltage source `VIN` from 0.25 V to 5.0 V in steps of 0.25 V.

2. **Nested Sweep**:
   ```
   .dc VDS 0 10 .5 VGS 0 5 1
   ```
   Sweeps `VDS` from 0 to 10 V in steps of 0.5 V, with `VGS` nested: sweeping from 0 to 5 V in steps of 1 V.

3. **Resistor Sweep**:
   ```
   .dc RLoad 1k 2k 100
   ```
   Sweeps resistor `RLoad` from 1 kΩ to 2 kΩ in steps of 100 Ω.

4. **Temperature Sweep**:
   ```
   .dc TEMP -15 75 5
   ```
   Sweeps circuit temperature from -15 °C to 75 °C in steps of 5 °C.

### Characteristics:
- **Independent source control** allows precise testing across a range of configurations.
- **Nested sweeps** facilitate device characterization (e.g., transistor output curves).

### Summary of `.DISTO` Command in Ngspice for Netlist Code Use and Debugging

#### General Form and Modes:
```
.disto dec nd fstart fstop <f2overf1>
.disto oct no fstart fstop <f2overf1>
.disto lin np fstart fstop <f2overf1>
```
- **Modes:**
  - `dec`: Sweep frequency logarithmically per decade.
  - `oct`: Sweep frequency logarithmically per octave.
  - `lin`: Sweep frequency linearly.
- **Parameters:**
  - `nd`, `no`, `np`: Number of frequencies per step type (decade, octave, or linear).
  - `fstart`: Starting frequency.
  - `fstop`: Stopping frequency.
  - `<f2overf1>`: Optional ratio of second frequency to the first, used in spectral distortion analysis.

#### Examples:
```
.disto dec 10 1kHz 100MEG
.disto dec 10 1kHz 100MEG 0.9
```

#### Analysis Types:
1. **Harmonic Analysis (Default):**
   - Only first input frequency (`F1`) is used.
   - Distortion components (e.g., AC voltages/currents at `2F1` and `3F1`) are analyzed.
   - Results focus on magnitudes of harmonic distortion.

2. **Spectral Analysis (When `<f2overf1>` is specified):**
   - Two sinusoidal inputs (`F1` swept and `F2 = f2overf1 × fstart` fixed).
   - Analyzes intermodulation frequencies: `F1 + F2`, `F1 - F2`, and `(2F1) - F2`.

#### Important Parameters and Defaults:
- **Magnitude and Phase:**
  - `distof1`: Magnitude and phase of frequency `F1`. Default: 1.0 (magnitude) and 0.0° (phase).
  - `distof2`: Magnitude and phase of frequency `F2`. Default: 1.0 (magnitude) and 0.0° (phase).
- **Phase Specification:** Degrees.
- **Default Behavior:** Assumes no input at a frequency unless specified with `distof1` or `distof2`.

#### Special Notes on `<f2overf1>`:
- Must be a real number in `(0, 1)`.
- Ideally an **irrational number** for better accuracy.
- Efforts should focus on maximizing the denominator of its fractional representation (e.g., `49/100` preferred over `1/2`).

#### Results Interpretation:
- Output values represent actual AC voltages and currents at harmonic/intermodulation mix frequencies.
- For HD2/HD3 and IM parameters, normalization with `.ac` values is required.

#### Supported Nonlinear Device Models:
- **Diodes:** DIO.
- **BJTs:** Bipolar Junction Transistors.
- **JFET (level 1):** Junction Field-Effect Transistors.
- **MOSFETs:** Levels 1, 2, 3, 9, BSIM1.
- **MESFET (level 1):** Metal-Semiconductor Field-Effect Transistors.

#### Key Advantages and Disadvantages:
- **Advantage (Volterra series):** Accurate computation of distortion at closely spaced frequencies, expressed symbolically.
- **Disadvantage:** Coinciding frequencies are not merged, requiring manual postprocessing.


**Summary of `.NOISE` Command for Noise Analysis**

**General Form**:  
```
.noise v(output <,ref>) src (dec | lin | oct) pts fstart fstop <pts_per_summary>
```

**Key Parameters**:  
- `v(output <,ref>)`: Specifies the output node for total output noise. Optional `ref` sets a reference node; default is ground if not specified.
- `src`: The name of the independent source to which input noise is referred.
- `(dec | lin | oct)`: Specifies the type of frequency sweep.
- `pts`: Number of frequency points for the sweep.
- `fstart` and `fstop`: Start and stop frequencies for the sweep.
- `<pts_per_summary>` (optional): Outputs noise contributions of each generator every specified frequency points.

**Purpose**: Noise analysis calculates:
1. Noise Spectral Density at output or equivalent input.
2. Total Integrated Noise over the frequency range.

**Example Syntax**:  
```
.noise v(5) VIN dec 10 1kHz 100MEG
.noise v(5,3) V1 oct 8 1.0 1.0e6 1
```

**Outputs and Plot Selection** (via `setplot` command):
1. **Voltage/Current Noise Spectral Density (V/Hz or A/Hz)**  
   - `onoise_spectrum`: Output noise spectrum (voltage/current per √Hz).  
   - `inoise_spectrum`: Equivalent input noise (output noise divided by gain).

2. **Total Integrated Noise (V or A)**  
   - `onoise_total`: Total output noise over the frequency range.  
   - `inoise_total`: Equivalent input noise over frequency range (output noise divided by gain).

**Control Variable**:  
- `set sqrnoise`: Outputs results in squared form (V²/Hz or A²/Hz) for power spectral density.
- By default (`unset sqrnoise`): Outputs practical Voltage or Current Noise Spectral Density.

**Important Notes**:  
- KLU matrix solver is **not compatible** with noise simulation.
### Summary for `.OP` and Transient OP Commands in Ngspice

#### **.OP Command: Operating Point Analysis**
- **Purpose**: Calculates the DC operating point with inductors shorted and capacitors opened. Useful for initializing transient analysis and linearization for AC, noise, and pole-zero analysis.
- **Convergence Aids**: Helps when a DC solution is difficult due to issues like floating nodes or non-conducting active devices.
  - **.option noopiter**: Disables initial DC iteration.
  - **GMIN Stepping (gminsteps)**:
    - Inserts small conductances across active devices.
      - `gminsteps = 0`: No gmin.
      - `gminsteps = 1` *(Default)*: Two gmin stepping processes.
      - `gminsteps = 2`: Original SPICE 3 gmin.
    - Dynamic gmin stepping is enabled by default (`1e-3` initial conductance), but exclusive use can be forced via `dyngmin`.
  - **Source Stepping (srcsteps)**:
    - Dynamically ramps supply voltages/currents from 0 to 100%.
      - `srcsteps = 0`: No source stepping.
      - `srcsteps = 1` *(Default)*: Gillespie source stepping.
      - `srcsteps = 2`: Original SPICE 3 source stepping.

#### **Transient Operating Point Analysis (optran)**
- **Purpose**: Uses transient simulation results to establish operating points for other analyses like TRAN, AC, Noise, etc.
- **Command Format**:  
  `optran !noopiter gminsteps srcsteps tstep tstop supramp`
  - `noopiter`: Disable initial guess iteration.
  - `gminsteps`: Control gmin stepping.
  - `srcsteps`: Control source stepping.
  - `tstep`: Transient step time (default: `10n`).
  - `tstop`: Total transient simulation time (default: `10u`).
  - `supramp`: Currently unused.

- **Defaults**:
  - Initial iteration, gmin, and source stepping are enabled.
  - Example:  
    `optran 0 0 0 100n 10u 0` - Turn off iterations and stepping, uses specified step and stop times.

- **Notes**:
  - Automatically performed before transient analysis (unless `uic` is used), and prior to AC, Noise, or PZ analyses.
  - Results are not stored, except when `KEEPOPINFO` (Sec. 11.1.2) is enabled to produce OP plots alongside TRAN, AC, Noise, or PZ plots.

#### **Example Commands**:
1. `optran 0 0 0 100n 10u 0`  
   - Disables initial iteration, gmin, and source stepping; directly performs transient op with specified step/stop times (`100n`, `10u`).
2. `optran 1 1 1 100n 10u 0`  
   - Restores initial conditions with all stepping and iterations enabled.

#### **Default Behavior Summary**
- Gmin stepping starts at `1e-3`, then switches dynamically.
- Source stepping starts from `0` and ramps up to `100%`.
- Transient OP uses internal defaults (`tstep = 10n`, `tstop = 10u`) unless overwritten.
### Summary of .PZ: Pole-Zero Analysis (Ngspice Manual)

**General Syntax:**
```
.pz node1 node2 node3 node4 cur pol
.pz node1 node2 node3 node4 cur zer
.pz node1 node2 node3 node4 cur pz
.pz node1 node2 node3 node4 vol pol
.pz node1 node2 node3 node4 vol zer
.pz node1 node2 node3 node4 vol pz
```

**Key Information:**
- **Transfer Function Types:**
  - **cur:** (output voltage) / (input current)
  - **vol:** (output voltage) / (input voltage)
- **Analysis Types:**
  - **pol:** Pole analysis only
  - **zer:** Zero analysis only
  - **pz:** Full pole-zero analysis (both poles and zeros are determined)
    - If one (poles or zeros) fails to converge, the other can still be computed.
- **Nodes Description:**
  - `node1` and `node2`: Input nodes.
  - `node3` and `node4`: Output nodes.
  - The configuration provides flexibility for defining input and output ports.

**Interactive Mode:**
- Replace `.pz` with `pz` in the syntax.
- Use `print all` to display results.

**Examples:**
1. **`.pz 1 0 3 0 cur pol`**: Computes pole analysis for a (voltage)/(current) transfer function with input nodes `1` and `0`, output nodes `3` and `0`.
2. **`.pz 2 3 5 0 vol zer`**: Computes zero analysis for a (voltage)/(voltage) transfer function with input nodes `2` and `3`, output nodes `5` and `0`.
3. **`.pz 4 1 4 1 cur pz`**: Computes both poles and zeros (pole-zero analysis) for a (voltage)/(current) transfer function with input and output nodes both specified as `4` and `1`.


### Summary:

#### Command:
```
.SENS OUTVAR [< filter ...>] [DC]  
.SENS OUTVAR [< filter ...>] AC DEC ND FSTART FSTOP  
.SENS OUTVAR [< filter ...>] AC OCT NO FSTART FSTOP  
.SENS OUTVAR [< filter ...>] AC LIN NP FSTART FSTOP  
```

#### Description:
- **Purpose**: The .SENS analysis calculates the sensitivity of a specified circuit variable `OUTVAR` (node voltage or voltage-source branch current) to device and model parameters. Sensitivity is measured as the change in output per unit change in input.

- **Forms**:
  1. **DC Sensitivity**: Calculates sensitivity of the DC operating-point value of `OUTVAR`.
  2. **AC Sensitivity**:
     - Frequency sweep parameters (`DEC`, `OCT`, `LIN`) match those in `.AC` analysis.
     - Outputs frequency-dependent sensitivity of `OUTVAR`.

- **Output**:
  - Dimensions: Change in output per unit change of input.
  - Default: All modifiable, real-valued parameters are varied.  
    - **Device parameters**: Vector name is the device name (e.g., resistance, inductance).  
    - **Model parameters**: Named in the format `model:parameter`.

- **Filters**:
  - Filters can restrict sensitivity calculations to specific parameters using wildcard matches:
    - `*`: Matches any substring.
    - `?`: Matches any single character.

#### Examples:
```
.SENS V(1,OUT)  
.SENS V(OUT) AC DEC 10 100 100k  
.SENS I(VTEST) rbias m*_* q*:*  
```
- **Example 1**: Sensitivity of node V(1,OUT) (DC by default).  
- **Example 2**: AC sensitivity of V(OUT) using a DEC sweep spanning 10 points per decade from 100 Hz to 100 kHz.  
- **Example 3**: Sensitivity analysis includes specific resistor `rbias`, all MOSFET parameters (`m*_*`), and all BJT model parameters (`q*:*`).

#### Key Details:
- Sensitivity results can be visualized for specific devices or models by supplying a filter string.
- Filters include `*` for broad matches or `?` for finer matching.
- AC sweep settings mirror `.AC` sweep parameters (`DEC`, `OCT`, `LIN`).
**11.3.8 .SP S-Parameter Analysis**

**General Form & Syntax:**
- `.sp dec nd fstart fstop <donoise>`
- `.sp oct no fstart fstop <donoise>`
- `.sp lin np fstart fstop <donoise>`

**Purpose:**
- Simulates linear S-Matrix to calculate Scattering (S), Admittance (Y), and Impedance (Z) matrices for RF circuits.  
- Outputs matrix dimensions are `nport x nport` (where `nport` = RF port count).  

**Key Optional Parameter:**  
- `donoise` (0 | 1)  
   - `donoise = 0`: SP simulation ends after S|Y|Z outputs are provided.  
   - `donoise = 1`: SP simulation includes noise analysis with additional outputs.  

**Outputs & Descriptions:**
1. **S-Matrix (Scattering Parameters):** `S_i_j` (i, j = port integer IDs based on `portnum` in VSRC).  
2. **Y-Matrix (Admittance Parameters):** `Y_i_j`  
3. **Z-Matrix (Impedance Parameters):** `Z_i_j`  

**Noise Analysis Outputs (`donoise = 1`):**
- Noise Current Correlation Matrix: `Cy_i_j = <in(i), in*(j)>` (correlation between noise at ports i and j; `*` = conjugate).  
- For 2-port networks (provides additional characteristics):  
  - `Rn`: Input noise resistance (unnormalized).  
  - `NF (dB)`: Noise figure of the 2-port network.  
  - `NFmin (dB)`: Minimum achievable noise figure.  
  - `SOpt`: Optimum input reflection coefficient for noise.  

**Frequency Sweep Types (Similar to `.AC` Analysis):**
1. **Decade Sweep:** `.sp dec nd fstart fstop`
2. **Octave Sweep:** `.sp oct no fstart fstop`
3. **Linear Sweep:** `.sp lin np fstart fstop`

**Examples:**
1. `.sp dec 10 1 10K`  
2. `.sp dec 10 1K 100MEG 1`  
3. `.sp lin 100 1 100HZ`  

**Notes:**
- Ensure proper setup of independent voltage source `VSRC` (see 4.1.11).  
- `.SP` syntax is identical to `.AC` with the addition of the `donoise` parameter.  
- Touchstone file export (as of now) remains yet to be implemented.  
.tf: Transfer Function Analysis

General Syntax: `.tf outvar insrc`

Definitions:
- `outvar`: Small-signal output variable.
- `insrc`: Small-signal input source.

Functionality:
- Computes:
  1. DC small-signal transfer function (output/input ratio).
  2. Input resistance at `insrc`.
  3. Output resistance at `outvar`.

Examples:
1. `.tf v(5, 3) VIN`  
   - Computes: Ratio of V(5, 3) to VIN, input resistance at VIN, and output resistance between nodes 5 and 3.
2. `.tf i(VLOAD) VIN`
   - Computes: Ratio of i(VLOAD) to VIN, input resistance at VIN, and output resistance at VLOAD.
**Summary of Section 11.3: Analyses (Ngspice Manual)**

Section 11.3 in the Ngspice manual covers analytical commands for simulating and analyzing circuits:

1. **.OP (Operating Point Analysis)**  
   - Captures circuit's DC operating point (node voltages, branch currents).
   - Syntax: `.op`
   - No user-specified parameters required.

2. **.DC (DC Sweep Analysis)**  
   - Sweeps a component's independent source over a specified range.
   - Syntax: `.dc SRC_NAME START STOP STEP`
   - Supports nested sweeps.

3. **.AC (AC Small Signal Analysis)**  
   - Analyzes frequency responses (e.g., gain, phase).
   - Syntax: `.ac TYPE POINTS FSTART FSTOP`  
     - `TYPE`: Decade, Octave, or Linear.  
     - `POINTS`: Steps per frequency type.  
     - `FSTART` and `FSTOP`: Frequency range.

4. **.TRAN (Transient Analysis)**  
   - Time-domain simulation for capturing dynamic behavior.  
   - Syntax: `.tran TSTEP TSTOP [TSTART] [UIC]`  
     - `TSTEP`: Time step.  
     - `TSTOP`: Simulation end time.  
     - `[TSTART]`: Optional, simulation start time.  
     - `[UIC]`: Use Initial Condition flag (optional).

5. **.FOUR (Fourier Analysis)**  
   - Calculates Fourier coefficients for periodic waveforms.
   - Syntax: `.four FREQ OUTVAR1 [OUTVAR2 ...]`  
     - `FREQ`: Signal frequency.  
     - `OUTVAR`: Circuit variables to process.

6. **.NOISE (Noise Analysis)**  
   - Computes noise-contribution of circuit components.
   - Syntax: `.noise OUTVAR SRC_NAME POINTS FSTART FSTOP`  

7. **.SENS (Sensitivity Analysis)**  
   - Evaluates parameter sensitivities for circuit performance.
   - Syntax: `.sens OUTVAR`

8. **.DISTO (Distortion Analysis)**  
   - Computes harmonic distortion at a specified frequency. 
   - Syntax: `.disto HARMONIC_TYPE NUM_HARMONICS`  

9. **.TEMP (Temperature Sweep)**  
   - Sweeps circuit over a temperature range.
   - Syntax: `.temp TEMP1 [TEMP2 ...]`  

10. **Default Values or Characteristics:**  
    - `.tran`: Default `TSTART = 0` if omitted.  
    - `.ac`: Default scaling is logarithmic `Decade`.  
    - `.temp`: Default ambient temperature used if no values specified.

11. **Example Code Snippets Extracted:**  
    - `.tran 0.01 10 UIC`  
    - `.dc V1 0 5 0.1`  
    - `.ac dec 10 1 1Meg`  
    - `.four 1k V(5)`  

**Summary for Netlist Code Generation/Modification/Debugging and Component/Command Queries**

**.MEASURE Command with `par('expression')`:**
- **Purpose:** Allows use of algebraic expressions in `.measure` statements.
- **Syntax:**
  - `.MEASURE {DC|TRAN|AC|SP} result`
    - `+ FIND par('expression') AT=val`
  - Example:
    - `.measure tran vtest find par('(v(2)*v(1))') AT=2.3m`
      - Returns the product of two voltage values (`v(2)` and `v(1)`) at **time point 2.3ms (TRAN analysis)**.
- **Rules:** The `par('expression')` syntax behaves as a vector evaluated using the rules of the `B-source`. For AC analysis mode, expressions operate on **complex values**.

**Key Limitations:**
- **Not usable in `.control` section with the `.meas` command.**
- **Alternatives in `.control`:** Use `let` (e.g., `.let result = expression`) for similar functionality.

**Note:**
- Ensure proper distinction between `param` and `par` in usage contexts.
.MEASURE DERIV command allows calculating the derivative (first-order rate of change) of a specified output variable (`out_variable`) at a specific condition in simulation results.

General Syntax:
1. **Basic form**:
   `.MEASURE {DC|AC|TRAN|SP} result DERIV<ATIVE> out_variable + AT=val`
   - Computes the derivative of `out_variable` at a specific point in time (or other independent variable) given by `AT=val`.

2. **Condition-based forms**:
   a. `.MEASURE {DC|AC|TRAN|SP} result DERIV<ATIVE> out_variable + WHEN out_variable2=val <TD=td> + <CROSS=# | CROSS=LAST> <RISE=#|RISE=LAST> <FALL=#|FALL=LAST>`
   - Calculates the derivative of `out_variable` when `out_variable2` equals `val`.
   - Optional parameters:
     - `TD=td`: Time delay offset.
     - `CROSS=#`: Specify which crossing event to measure (e.g., `CROSS=2` for second crossing).
     - `CROSS=LAST`: Considers the last crossing event.
     - `RISE=#` or `FALL=#`: Measures on a specific rising or falling edge.

   b. `.MEASURE {DC|AC|TRAN|SP} result DERIV<ATIVE> out_variable + WHEN out_variable2=out_variable3 + <TD=td> <CROSS=# | CROSS=LAST> + <RISE=#|RISE=LAST> <FALL=#|FALL=LAST>`
   - Computes derivative of `out_variable` when `out_variable2` equals `out_variable3`.
   - Same optional parameters (`TD`, `CROSS`, `RISE`, and `FALL`) apply.


The section contains advanced examples of `.meas` commands in Ngspice netlists, demonstrating various measurement techniques. Below is a structured and precise summary that focuses on new and significant details, particularly constructs and templates for code generation, modification, debugging, and analysis:

### **Measurement Commands (`.meas`) Examples and Templates**

#### **Transient Analysis (`.meas tran`)**
- **Delay Measurements with Conditions**:
  ``` 
  .meas tran inv_delay2 trig v(in) val='vp/2' td=1n fall=1 targ v(out) val='vp/2' rise=1
  ```
  Measures delay with trigger and target voltage conditions and timing.

- **Trigger and Target Timing with Specific Cycle (`rise`, `fall`)**:
  ``` 
  .meas tran test_data1 trig AT=1n targ v(out) val='vp/2' rise=3
  ```
  Measures the time difference based on conditions at specific waveform cycles.

- **Output Slew Rate Measurement**:
  ``` 
  .meas tran out_slew trig v(out) val='0.2*vp' rise=2 targ v(out) val='0.8*vp' rise=2
  ```
  Computes the time for a signal to transition between low and high threshold levels.

- **Parameter-Based Measurement Validation**:
  ```
  .meas tran delay_chk param='(inv_delay < 100ps) ? 1 : 0'
  ```
  Boolean output depending on a delay parameter condition.

- **Skew Calculation**:
  - **Simple Case**:
    ```
    .meas tran skew when v(out)=0.6
    ```
  - **Using Previously Measured Value**:
    ```
    .meas tran skew2 when v(out)=skew_meas
    ```
  - **Specific Waveform Transition Cycles**:
    ```
    .meas tran skew3 when v(out)=skew_meas fall=2
    ```
    ```
    .meas tran skew4 when v(out)=skew_meas fall=LAST
    ```

- **Value at a Specific Time**:
  ```
  .meas tran skew5 FIND v(out) AT=2n
  ```

- **Statistical Measures on Waveforms**:
  - Minimum:
    ```
    .meas tran v0_min min i(v0) from='dfall' to='dfall+period'
    ```
  - Average:
    ```
    .meas tran v0_avg avg i(v0) from='dfall' to='dfall+period' 
    ```
  - Integration:
    ```
    .meas tran v0_integ integ i(v0) from='dfall' to='dfall+period'
    ```
  - RMS:
    ```
    .meas tran v0_rms rms i(v0) from='dfall' to='dfall+period'
    ```

#### **DC Analysis (`.meas dc`)**
- **Value at a Specific Point**:
  ```
  .meas dc is_at FIND i(vs) AT=1
  ```
- **Maximum/Minimum in a Range**:
  ```
  .meas dc is_max max i(vs) from=0 to=3.5
  ```
- **Voltage When Current Match Occurs**:
  ```
  .meas dc vds_at when i(vs)=0.01
  ```

#### **AC Analysis (`.meas ac`)**
- **Value at a Specific Frequency**:
  ```
  .meas ac vout_at FIND v(out) AT=1MEG
  ```
  ```
  .meas ac vout_atd FIND vdb(out) AT=1MEG
  ```
- **Maximum Value Across a Frequency Range**:
  ```
  .meas ac vout_max max v(out) from=1k to=10MEG
  ```
- **Frequency at a Specific Voltage**:
  ```
  .meas ac freq_at when v(out)=0.1
  ```
- **Time Difference Between Voltage Crossings**:
  ```
  .meas ac vout_diff trig v(out) val=0.1 rise=1 targ v(out) val=0.1 fall=1
  ```
- **Trigger-Based Timing**:
  ```
  .meas ac fixed_diff trig AT=10k targ v(out) val=0.1 rise=1
  ```

- **Statistical Measures for AC Signals**:
  - Average:
    ```
    .meas ac vout_avg avg v(out) from=10k to=1MEG
    ```
  - Integration:
    ```
    .meas ac vout_integ integ v(out) from=20k to=500k
    ```
  - Frequency When Voltage Condition is Met (`LAST`):
    ```
    .meas ac freq_at2 when v(out)=0.1 fall=LAST
    ```
  - RMS:
    ```
    .meas ac vout_rms rms v(out) from=10 to=1G
    ```

- **Parameter Check on Bandwidth/Behavior**:
  ```
  .meas ac bw_chk param='(vout_diff < 100k) ? 1 : 0'
  ```

### **Key Notes**
1. These commands highlight advanced usage of `.meas` for debugging, validation, and waveform analysis in netlists.
2. Default or implicit details (e.g., time unit assumed as seconds, unless specified otherwise) must still be carefully managed.
3. Utilize these templates for precise queries and measurement criteria in simulations.


.meas (.measure) statement/command is used to analyze output data from tran, ac, or dc simulations. It is executed immediately after the simulation concludes (also refer to Chapter 13.5.50 for the equivalent command).
- **Batch Mode and Interactive Mode Differences**:
  - `.meas` commands *cannot be used in batch mode* (`-b` flag) if an output (.raw) file is also specified with the `-r` flag, as the simulation output is written directly to the output file and isn't kept in memory for further analysis.
  - To execute `.meas` during batch-like operations, include a `.control ... .endc` section in the input file and run ngspice in *interactive mode* (e.g., `ngspice inputfile`).

- **Interactive Mode Setup Example**:
  ```
  *input file
  ...
  .tran 1ns 1000ns
  ...
  *********************************
  .control
  run
  write outputfile data
  .endc
  *********************************
  .end
  ```

- **Capabilities of `.meas`**:
  - Outputs user-defined analysis data directly to the standard output.
  - Includes calculations of delay, rise time, fall time, peak-to-peak voltage, min/max voltage, integral/derivative over a specific period, and other user-defined values.


**Summary of Ngspice Manual (11.4.3 General Remarks):**

- **Measurement Types:**  
  `{DC|AC|TRAN|SP}` specifies the analysis type:
  - **DC:** Used for DC analysis (voltage/current-based).  
  - **AC:** Used for AC analysis (frequency-based).  
  - **TRAN:** Used for transient simulation (time-based).  
  - **SP:** For spectrum analysis via `spec` or `fft` commands (available in `.meas` commands only, see section 13.5.50).

- **Key Variables:**  
  - `result`: A vector containing the measurement result.  
  - `trig_variable`, `targ_variable`, `out_variable`: Vectors derived from simulation output (e.g., voltage vector `v(out)`).

- **Value Parameters:**
  - **`VAL = val`:** Expects a real number (`val`) or a parameter (enclosed by `' '` or `{}`), which expands to a real number.  
  - **`TD = td`:** Time value; used only in transient (`tran`) type. Ignored for `AC`, `SP`, and `DC`.  
  - **`AT = time/frequency/voltage`:** 
    - For `TRAN`: Expects a time value.  
    - For `AC` and `SP`: Expects a frequency value.  
    - For `DC`: Expects a voltage (or current), while `TD` is ignored.

- **Event Counters:**  
  - **`CROSS = #`:** Specifies the number of crossings; `#` must be an integer.  
  - **`CROSS = LAST`:** Counts the last crossing. Compatible with `RISE` and `FALL`.

- **Range of Values:**  
  - Frequency and time values start at 0 and extend to positive real numbers.  
  - Voltage/current values in DC analysis can start/end at arbitrary real numbers.

- **Implementation Note:** Not all `.measure` commands are implemented.

This section provides syntax templates, default requirements, and theoretical details essential for netlist code generation, debugging, and simulation analysis development.
**Summary from Ngspice Manual - Section 11.4.4 Input:**

1. **Key Commands and Syntax**:  
   - `.measure` statement explained with syntax and examples.  
   - `.measure tran ...` used for transient simulation results analysis.  

2. **Netlist Creation with Two Sines**:  
   **Input File Example `simple-meas-tran.sp`:**
   ```spice
   * Simple .measure examples
   * transient simulation of two sine signals with different frequencies
   vac1 1 0 DC 0 sin(0 1 1k 0 0)  ; Sine signal with 1kHz freq., 1V amplitude
   vac2 2 0 DC 0 sin(0 1.2 0.9k 0 0)  ; Sine signal with 0.9kHz freq., 1.2V amplitude
   .tran 10u 5m  ; Transient simulation with step size of 10µs and total duration 5ms
   *
   .measure tran ...  ; Placeholder for measurement examples
   *
   .control
   run  ; Executes the simulation
   plot v(1) v(2)  ; Plots voltage at nodes 1 and 2
   .endc
   .end
   ```

3. **Description of Characteristics and Features**:  
   - `.tran` command: Handles transient analysis; specifies step size (`10u`) and simulation duration (`5m`).  
   - `sin` specification: Syntax for defining sinusoidal voltage sources (`vac`). Key parameters include amplitude, frequency, and phase.  

4. **Utilization for Debugging/Modification**:  
   - Key measurement commands (`.measure tran`) can be used to analyze transient simulation outputs.  
   - Example serves as a template for generating netlist files involving sinusoidal voltage sources and transient analysis.  

5. **Components' Theoretical Characteristics**:
   - Voltage source definitions include both DC offsets and sinusoidal properties.  

**Not explicitly stated features in the known database**:
   - Example integration of `.measure tran ...` with transient simulation outputs for specific netlist debugging/modifications.  
   - Unique input parameters of sinusoidal voltage definitions such as `sin(0 1.2 0.9k 0 0)`.  
   - The provided example demonstrates plotting multiple node voltages; useful for debugging/visual analysis.
### Summary of Section 11.4.5 from Ngspice Manual:
#### .MEASURE Command
- **Purpose:** Measures differences in DC voltage, frequency, or time between two points selected from one or two output vectors. It is applicable to transient (`TRAN`), AC (`AC`), spectrum (`SP`), or DC analyses.

#### General Syntax:
```
.MEASURE {DC|AC|TRAN|SP} result TRIG trig_variable VAL=val
+ <TD=td> <CROSS=# | CROSS=LAST> <RISE=# | RISE=LAST>
+ <FALL=# | FALL=LAST> <TRIG AT=time> TARG targ_variable
+ VAL=val <TD=td> <CROSS=# | CROSS=LAST> <RISE=# | RISE=LAST>
+ <FALL=# | FALL=LAST> <TARG AT=time>
```
- **Parameters:**
  - `result`: Name assigned to the measurement result.
  - `TRIG`: Specifies the trigger condition (variable, value, rise, fall, cross, or fixed time point).
  - `TARG`: Specifies the target condition (similar options as `TRIG`).
  - `<TD=td>`: Optional delay time for analysis start.
  - `<RISE=#>`: Specifies the rising slope occurrence.
  - `<FALL=#>`: Specifies the falling slope occurrence.
  - `<CROSS=#>`: Specifies the crossing occurrence on any slope.
  - `<TRIG AT=time>`: Fixed trigger time point.
  - `<TARG AT=time>`: Fixed target time point.

#### Example Codes:
1. **Measure Signal Period:**
   ```
   .measure tran tdiff TRIG v(1) VAL=0.5 RISE=1 TARG v(1) VAL=0.5 RISE=2
   ```
   - Measures time between the first rising slope and the second rising slope of `v(1)` crossing `0.5 V`.

   **Output:** 
   ```
   tdiff = 1.000000e-003 targ= 1.083343e-003 trig= 8.334295e-005
   ```

2. **Measure Two Periods:**
   ```
   .measure tran tdiff TRIG v(1) VAL=0.5 RISE=1 TARG v(1) VAL=0.5 RISE=3
   ```
   - Measures time between the first rising slope and the third rising slope of `v(1)` crossing `0.5 V`.

3. **Measure Rising to Falling Slope:**
   ```
   .measure tran tdiff TRIG v(1) VAL=0.5 RISE=1 TARG v(1) VAL=0.5 FALL=1
   ```
   - Measures time between the first rising slope and the first falling slope of `v(1)` crossing `0.5 V`.

4. **Measure Trigger vs Target on Different Nodes:**
   ```
   .measure tran tdiff TRIG v(1) VAL=0 FALL=3 TARG v(2) VAL=0 FALL=3
   ```
   - Time difference between the third falling slope of `v(1)` reaching `0 V` and the third falling slope of `v(2)` reaching `0 V`.

5. **Crossing Slopes:**
   ```
   .measure tran tdiff TRIG v(1) VAL=-0.6 CROSS=1 TARG v(2) VAL=-0.8 CROSS=1
   ```
   - Time difference between the first crossing of `v(1)` at `-0.6 V` and `v(2)` at `-0.8 V` (any slope).

6. **Trigger at Fixed Time Point:**
   ```
   .measure tran tdiff TRIG AT=1m TARG v(2) VAL=-0.8 CROSS=3
   ```
   - Time difference between `1 ms` and the third crossing of `v(2)` at `-0.8 V` (any slope).

#### Notes:
- **Default Values:** Not explicitly stated; behavior depends on the syntax (e.g., first occurrence for `RISE`, `FALL`, or `CROSS` if unspecified).
- **Use Cases:** Debugging netlists, analyzing transient behavior, and extracting signal timing characteristics in simulations.

**Ngspice `.MEASURE` command summary for debugging and netlist modifications:**

The `.MEASURE` command is used to calculate specific results from simulations (DC, AC, TRAN, or SP) based on conditions like signal crossings, value equivalences, time delays, and slopes.

---

**General Forms and Key Templates:**
1. **Measure a condition at a crossing or matching value:**
   ```
   .MEASURE {DC|AC|TRAN|SP} result WHEN out_variable=val
   + <TD=td> <FROM=val> <TO=val> <CROSS=# | CROSS=LAST>
   + <RISE=# | RISE=LAST> <FALL=# | FALL=LAST>
   ```
   - Example:
     ```
     .measure tran teval WHEN v(2)=0.7 CROSS=LAST
     ```
     Measures the time when `v(2)` crosses 0.7V for the last time.

2. **Measure when two signals are equal:**
   ```
   .MEASURE {DC|AC|TRAN|SP} result WHEN out_variable=out_variable2
   + <TD=td> <FROM=val> <TO=val> <CROSS=# | CROSS=LAST>
   + <RISE=# | RISE=LAST> <FALL=# | FALL=LAST>
   ```
   - Example:
     ```
     .measure tran teval WHEN v(2)=v(1) RISE=LAST
     ```
     Measures the time when `v(2)` equals `v(1)` while `v(2)` rises for the last time.

3. **Measure a dependent variable when another meets a condition:**
   ```
   .MEASURE {DC|AC|TRAN|SP} result FIND out_variable
   + WHEN out_variable2=val <TD=td> <FROM=val> <TO=val>
   + <CROSS=# | CROSS=LAST> <RISE=# | RISE=LAST>
   + <FALL=# | FALL=LAST>
   ```
   - Example:
     ```
     .measure tran yeval FIND v(2) WHEN v(1)=-0.4 FALL=LAST
     ```
     Returns the value of `v(2)` when `v(1)` equals `-0.4`, with `v(1)` falling for the last time.

4. **Measure a dependent variable when two signals equate:**
   ```
   .MEASURE {DC|AC|TRAN|SP} result FIND out_variable
   + WHEN out_variable2=out_variable3
   + <TD=td> <CROSS=# | CROSS=LAST>
   + <RISE=# | RISE=LAST> <FALL=# | FALL=LAST>
   ```
   - Example:
     ```
     .measure tran yeval FIND v(2) WHEN v(1)=v(3) FALL=2
     ```
     Returns the value of `v(2)` when `v(1)` equals `v(3)`, with `v(1)` falling for the second time.

5. **Measure a variable at a specific time point:**
   ```
   .MEASURE {DC|AC|TRAN|SP} result FIND out_variable AT=val
   ```
   - Example:
     ```
     .measure tran yeval FIND v(2) AT=2m
     ```
     Returns the value of `v(2)` at 2ms (`AT=time`).

---

**Key Options:**
- `<TD=td>`: Start measuring after a time delay `td`.
- `<FROM=val>` and `<TO=val>`: Restrict measurements to the range from `val` to `val`.
- `<CROSS=# | CROSS=LAST>`: Specify the crossing point (nth crossing or last crossing).
- `<RISE=# | RISE=LAST>` or `<FALL=# | FALL=LAST>`: Specify the nth or last rising/falling point of a signal.

**Default Characteristics:**
- If no `CROSS` or `RISE/FALL` keyword is specified, the first event is considered.
- Measurements automatically consider all slopes unless restricted to rising or falling transitions.


11.4.7 AVG|MIN|MAX|PP|RMS|MIN_AT|MAX_AT  
Measure statements are used to analyze simulation results based on specified criteria. The syntax and functionality provided enable computation of various metrics over time intervals.  

**General form:**  
`.MEASURE {DC|AC|TRAN|SP} <result_name>`  
`+ {AVG|MIN|MAX|PP|RMS|MIN_AT|MAX_AT}`  
`+ <out_variable> <TD=td> <FROM=val> <TO=val>`  

**Key functions and their descriptions:**  
1. **AVG** returns the average value over the specified time interval.  
2. **MIN** returns the minimum value.  
3. **MAX** returns the maximum value.  
4. **PP** calculates the peak-to-peak value (difference between max and min).  
5. **RMS** computes the root mean square value.  
6. **MIN_AT** returns the time point of the minimum value.  
7. **MAX_AT** returns the time point of the maximum value.  

**Syntax examples with practical explanation:**  
- `.measure tran ymax MAX v(2) from=2m to=3m`  
  Finds the **maximum value** of `v(2)` from 2 ms to 3 ms.  
- `.measure tran tymax MAX_AT v(2) from=2m to=3m`  
  Determines the **time point** of the maximum value of `v(2)` within 2 ms to 3 ms.  
- `.measure tran ypp PP v(1) from=2m to=4m`  
  Calculates the **peak-to-peak value** of `v(1)` from 2 ms to 4 ms.  
- `.measure tran yrms RMS v(1) from=2m to=4m`  
  Computes the **root mean square (RMS)** value of `v(1)` between 2 ms and 4 ms.  
- `.measure tran yavg AVG v(1) from=2m to=4m`  
  Retrieves the **average value** of `v(1)` in the interval of 2 ms to 4 ms.  

Note: In these examples, `from` specifies the lower limit of the time interval and `to` sets the upper limit.
.MEASURE command for integration:

General syntax:  
.MEASURE {DC|AC|TRAN|SP} result INTEG out_variable <TD=td> <FROM=val> <TO=val>

Purpose: Calculates the integral (area under the curve) of `out_variable` over a specified interval.

Example:
.measure tran yint INTEG v(2) from=2m to=3m  
Calculates the integral of `v(2)` (voltage at node 2) between 2 ms and 3 ms in a transient analysis.
**Summary for Netlist Code Generation/Modification/Debugging**

1. **Command Syntax**:
   - General Form:  
     `.MEASURE {DC|AC|TRAN|SP} result param='expression'`

2. **Description**:
   - The `param` expression evaluates parameters during Ngspice startup.  
   - The evaluated expressions can include `.param` definitions or results from previous `.meas` commands.  

3. **Default Characteristics**:
   - It cannot handle direct simulation vectors like `v(10)` within expressions but can use `.meas` commands for simulating such vectors indirectly.

4. **Code Templates and Examples**:
   - **Defining a Parameter**:  
     `.param fval=5`

   - **Measurement Using a Parameter**:  
     `.measure tran yadd param='fval + 7'`  
     *Evaluates `fval + 7`, output `12`.*

   - **Ternary Function Example**:  
     `.param vout_diff=50u`  
     `.measure tran tdiff TRIG AT=1m TARG v(2) VAL=-0.8 CROSS=3`  
     `.meas tran bw_chk param='(tdiff < vout_diff) ? 1 : 0'`  
     *Output `1` if `tdiff` < `vout_diff`.*

5. **Theoretical Limitations**:
   - Expression `param` must not involve direct vectors like `v(10)`. Use `.meas` substitutes for such operations.  

This structured information provides guidance for `.param` and `.meas` usage in netlist development.
**Summary: Measurements After AC, DC, and Transient Analysis (Ngspice Manual)**

1. **Purpose**: Ngspice allows users to perform measurements after AC, DC, or transient analysis to evaluate specific circuit characteristics.

2. **Measurement Command Syntax**:  
   `.measure <analysis> <result name> <type> <expression>`  
   - `<analysis>`: Specifies the analysis type (`ac`, `dc`, `tran`).  
   - `<result name>`: User-defined name for the measured result.  
   - `<type>`: Type of measurement (e.g., `param` for evaluating expressions, `find`, `when`, `deriv`, etc.).  
   - `<expression>`: Refers to the expression or condition to measure.  

3. **Default Behavior**: Executes measurements for the last run analysis.  

4. **Measurement Types**:  
   - `param`: Evaluates a user-defined mathematical expression.  
   - `find`: Finds the first occurrence of a specified condition (e.g., max or min).  
   - `when`: Measures a quantity at a specific input condition.  
   - `deriv`: Determines derivatives based on a waveform.  

5. **Examples of Measurement Commands**:  
   - `.measure tran rise_time when v(out) = 2.5 rtol=0.01`  
   - `.measure ac gain_peak find vdb(out) at freq()`  


Resistor and Capacitor SOA Model Parameter:  
**Bv_max**: Generates an SOA (Safe Operating Area) warning if |Vr| or |Vc| exceeds the specified Bv_max value.
**Summary: Diode SOA (Safe Operating Area) Model Parameters in Ngspice**

1. **SOA Parameters and Warnings:**
   - `Bv_max`: Issues an SOA warning if |Vj| exceeds this value.
   - `Fv_max`: Issues an SOA warning if |Vf| exceeds this value.
   - `Id_max`: Issues an SOA warning if |Id| exceeds this value.
   - `Pd_max`: Issues an SOA warning if power dissipation exceeds this value.
   - `Te_max`: Issues an SOA warning if temperature exceeds this value.

2. **Thermal Parameters:**
   - `rth0`: Thermal resistance between junction and ambient.
   - `tnom`: Nominal temperature at which all parameters are measured.

3. **SOA Modes and Power Derating:**
   - **Self-heating ON:** 
     - Requires `Te_max`, `tnom`, and `rth0` for operation.
     - Power dissipation is adjusted based on current temperature (`temp_curr`):
       ```
       Pd_max = Pd_max_mod - (temp_curr - tnom) / rth0
       ```
   - **Self-heating OFF:** 
     - Requires `rth0` and `tnom` for operation.
     - A static power derating is calculated using:
       ```
       Pd_max = Pd_max_mod - (temp - tnom) / rth0
       ```
       - `temp` is the device temperature, default 27°C, or provided by `.temp` global parameter or instance-specific parameter `temp`.
   - **Fallback:** 
     - If either `rth0` or `tnom` is not defined, no derating is calculated, and power dissipation is capped at `Pd_max`.


### Summary for Ngspice BJT SOA Model Parameters

**11.5.3.1 Gummel-Poon (Levels 1 and 2)**  
Supported parameters for SOA checks:
- **Vbe_max**: Issues warning if |Vbe| > Vbe_max.  
- **Vbc_max**: Issues warning if |Vbc| > Vbc_max.  
- **Vce_max**: Issues warning if |Vce| > Vce_max.  
- **Vcs_max**: Issues warning if |Vcs| > Vcs_max.  
- **Ic_max**: Issues warning if |Ic| > Ic_max.  
- **Ib_max**: Issues warning if |Ib| > Ib_max.  
- **Pd_max**: Issues warning if power > Pd_max.  
- **Te_max**: Issues warning if temperature > Te_max (not yet functional).  

Parameters for Thermal Effects:
- **rth0**: Thermal resistance (junction to ambient).  
- **tnom**: Nominal temperature for parameter measurement.  
- Temperature-dependent power derating formula (if `rth0` and `tnom` are defined):  
  `pdmax = pdmax_mod - (temp - tnom) / rth0`.  

Other Notes:  
- Default temperature: `27°C` (or defined by global `.temp` or device-specific `temp` parameter).  
- Without `rth0` or `tnom`, power dissipation is checked only against `Pd_max`.  

**11.5.3.2 HICUM (Level 8)**  
Supported SOA parameters:  
- Identical to Gummel-Poon parameters: `Vbe_max`, `Vbc_max`, `Vce_max`, `Vcs_max`.  

**11.5.3.3 VBIC (Levels 4 and 9)**  
Supported SOA parameters:  
- **Vbe_max, Vbc_max, Vce_max, Vcs_max**: Same as Gummel-Poon.  
- Alternate parameters: **bvbe, bvbc, bvce, bvsub** (can replace the above).  
- Optional forward bias thresholds (default = `0.2V`):  
  - **vbefwd**: B-E forward voltage.  
  - **vbcfwd**: B-C forward voltage.  

Device operation states (set `.option warn=2`):  
| **Operation** | **Conditions**                               |  
|---------------|---------------------------------------------|  
| `off`         | `Vbe <= vbefwd` AND `Vbc <= vbcfwd`         |  
| `saturation`  | `Vbe > vbefwd` AND `Vbc > vbcfwd`           |  
| `forward`     | `Vbe > vbefwd` AND `Vbc <= vbcfwd`          |  
| `reverse`     | `Vbe <= vbefwd` AND `Vbc > vbcfwd`          |  

Substrate leakage detection:  
- **vsubfwd**: Substrate junction forward voltage.
MOS SOA model parameters:

- **Vgs_max**: Issues SOA warning if |Vgs| exceeds Vgs_max.
- **Vgd_max**: Issues SOA warning if |Vgd| exceeds Vgd_max.
- **Vgb_max**: Issues SOA warning if |Vgb| exceeds Vgb_max.
- **Vds_max**: Issues SOA warning if |Vds| exceeds Vds_max.
- **Vbs_max**: Issues SOA warning if |Vbs| exceeds Vbs_max.
- **Vbd_max**: Issues SOA warning if |Vbd| exceeds Vbd_max.
VDMOS SOA Model Parameters:

- **Vgs_max**: Triggers SOA warning if |Vgs| exceeds this value.
- **Vgd_max**: Triggers SOA warning if |Vgd| exceeds this value.
- **Vds_max**: Triggers SOA warning if |Vds| exceeds this value.
- **Vgsr_max**: Triggers SOA warning if |Vgsr| exceeds this value.
- **Vgdr_max**: Triggers SOA warning if |Vgdr| exceeds this value.
**Summary:**

1. **Safe Operating Area (SOA) Warning Mechanism**:  
   - To enable SOA warnings, set `.option warn=1`. Warnings will be issued during `.op`, `.dc`, and `.tran` analyses if branch voltages, currents, dissipated power, or resulting temperatures of devices (Resistors, Capacitors, Diodes, BJTs, MOSFETs) exceed parameter limits specified in the device models.  
   - Default parameter values are positive and set to infinity unless changed in the netlist.

2. **Advanced SOA Warning Option**:  
   - Set `.option warn=2` for additional operating point information (specific to the bipolar VBIC model).

3. **Execution in Transient Analysis**:  
   - The SOA check is executed at each time step after Newton-Raphson iterations in transient analysis.

4. **Warning Message Limitation**:  
   - Use `.option maxwarns=<number>` (default: 5) to limit the count of SOA warning messages.

5. **Output Control**:  
   - Warning messages go to `stdout` by default or to a file specified by the command line option `--soa-log=filename`.

6. **Setting SOA Limits**:  
   - To enable SOA checking, appropriate limit values must be added to `.model` parameters for the respective device.

**Example Directives:**  
- `.option warn=1`  
- `.option warn=2` (for VBIC model)  
- `.option maxwarns=5`  
- Command-line option: `--soa-log=filename`  

Ensure `.model` parameters include relevant limit values for SOA warnings to function properly.
**.SAVE Command in Ngspice (Summary):**

**Purpose:**  
The `.SAVE` command specifies the vectors to be saved in the raw file for post-simulation use.

**General Form:**  
```
.save vector vector vector ...
```

**Examples:**  
- `.save i(vin) node1 v(node2)`
- `.save @m1[id] vsource#branch`
- `.save all @m2[vdsat]`

**Key Details:**
1. **Vector Types:**  
   - Save **node voltages** using `nodename` or `v(nodename)`.  
   - Save **currents** through an independent voltage source using `i(sourcename)` or `sourcename#branch`.  
   - Save **internal device parameters** using `@dev[param]`.

2. **Behavior:**  
   - **Default behavior:** If no `.SAVE` command is provided, Ngspice saves **node voltages** and **voltage source branch currents** by default.  
   - **Custom selection:** If `.SAVE` commands are provided, only the specified vectors are saved, replacing the default set.  
   - To include **default vectors** along with others, add `all` as one of the specified vectors (e.g., `.save all @dev[param]`).

3. **Magnitude Requests:**  
   If `.save vm(out)` is given, only the original data `v(out)` is stored in the raw file. Magnitude (or other derived data) can be computed later during evaluation.

**Usage Notes:**
- Use `.SAVE` to restrict saved data to only what is needed, thereby limiting file size and improving focus during debugging or analysis.
- Refer to Chapter 27.1 (Appendix) for details on internal device parameters (e.g., `@m1[id]`).
- Use Chapter 13.5 for interactive commands and rawfile usage.

This command is critical when generating targeted raw data for verification, debugging, or performance evaluation.
**Summary: .PRINT Command in Ngspice**

The `.PRINT` command in Ngspice specifies the output variables for tabular listings during analysis. It supports up to eight output variables and works for various analysis types: `DC`, `AC`, `TRAN`, `NOISE`, and `DISTO`. Key details and syntax:

1. **General Form:**
   ```
   .print prtype ov1 <ov2 ... ov8>
   ```
   - `prtype`: Type of analysis (`DC`, `AC`, `TRAN`, etc.).
   - `ov1, ov2, ...`: Output variables (up to eight).

2. **Examples:**
   ```
   .print tran v(4) i(vin)
   .print dc v(2) i(vsrc) v(23, 17)
   .print ac vm(4, 2) vr(7) vp(8, 3)
   ```

3. **Supported Output Variables:**
   - **Voltage:**
     - `V(N1, N2)`: Voltage difference between nodes `N1` and `N2`. Omitting `N2` assumes ground (`0`).
     - AC-specific replacements:
       - `VR`: Real part.
       - `VI`: Imaginary part.
       - `VM`: Magnitude.
       - `VP`: Phase.
       - `VDB`: 20log10(magnitude).

   - **Current:**
     - `I(VXXXXXXX)`: Current through an independent voltage source `VXXXXXXX`. Positive current flows from positive to negative terminals.

4. **Additional Features:**
   - Noise and distortion analyses use different formats for output variables.
   - Algebraic expressions can be used with the `par(expression)` option (see `11.6.6`).
   - The `.width` option (see `11.6.7`) sets the maximum number of characters per line.
   - Multiple `.PRINT` lines can be used for each analysis type.

This command is essential when generating or debugging netlists to define usable outputs for simulation results.
**Summary for `.PLOT` Lines in Ngspice**

1. **Purpose**:
   `.plot` generates printer plot outputs for up to eight variables in a chosen analysis mode.

2. **Syntax**:
   `.plot pltype ov1 <(plo1, phi1)> <ov2 <(plo2, phi2)> ... ov8>`
   
   - **pltype**: Specifies the type of analysis (`DC`, `AC`, `TRAN`, `NOISE`, or `DISTO`).
   - **ov i**: Output variables to plot (identical syntax to `.print` and interactive `plot` commands).

3. **Key Characteristics**:
   - Outputs can overlap; overlaps are denoted by the letter "X".
   - The first variable is both printed and plotted if multiple variables are listed.
   - To print all variables, include a companion `.print` line.
   - Supports algebraic expressions via `par(expression)`.

4. **Examples**:
   - `.plot dc v(4) v(5) v(1)`
   - `.plot tran v(17, 5) (2, 5) i(vin) v(17) (1, 9)`
   - `.plot ac vm(5) vm(31, 24) vdb(5) vp(5)`
   - `.plot disto hd2 hd3(R) sim2`
   - `.plot tran v(5, 3) v(4) (0, 5) v(7) (0, 10)`

5. **Additional Notes**:
   - Unlimited `.plot` lines can be specified per analysis type. 
   - Utilize `.print` for detailed printouts of all variables.

**Summary:**

**.FOUR: Fourier Analysis of Transient Analysis Output**

- **General Form:** `.four freq ov1 <ov2 ov3 ...>`
- **Example:** `.four 100K v(5)`

1. **Purpose:**  
   - Performs a Fourier analysis as part of transient analysis in **batch mode**.
   - Determines the DC component and the first nine harmonics of a specified vector.

2. **Key Parameters:**
   - **freq:** Fundamental frequency.
   - **ov1, ov2, ...:** Output vectors (signals) to analyze.
   - Analysis interval: `<TSTOP - period, TSTOP>`, where:
     - `TSTOP`: Final time of transient analysis.
     - `period = 1/freq`: Period of the fundamental frequency.

3. **Accuracy Note:**  
   - `TMAX` (from `.tran` command) should be set to `period/100.0` for accurate results, especially for high-Q circuits.

4. **Expression Support:**  
   - `.four` supports algebraic expressions using `par('expression')`.

5. **Usage Restrictions:**  
   - Available only in **batch mode** without a rawfile selection (see Section 12.4.1).  
   - Alternatives for **interactive mode (.control)**:
     - **spec** command (Section 13.5.87)
     - **fft** command (Section 13.5.33)  


**11.6.5 .PROBE: Overview**  
The `.probe` command in Ngspice is used to measure device node currents, power dissipation, or differential voltages in circuits.  

---

**1. Current Measurement (.probe alli / .probe I):**  
- **Mechanism:** It uses a zero-volt voltage source (VSRC) to measure currents at device nodes, saved as `xx#branch` format (e.g., `R1#branch`).  
- **Scope:** Only top-level devices are accessible (not subcircuits). Named nodes in subcircuits can be measured if subcircuit definitions provide names.  
- **Impact:** May add new nodes to the instance matrix, slightly increasing simulation time.  

**General Syntax:**  
- `.probe alli` → Measure current at every device node.  
- `.probe I(device)` → Measure current at all terminals of a device.  
- `.probe I(device,node)` → Measure current at a single terminal of a device.  

**Examples:**  
- `.probe alli` → All nodes in the circuit.  
- `.probe I(R1)` → Node 1 of two-terminal device `R1`.  
- `.probe I(XU1)` → All nodes in subcircuit `XU1`.  
- `.probe I(MQ4,3)` → Node 3 of multi-terminal device `MQ4`.  

**Resulting Vectors:**  
- Example entries: `r1#branch`, `xu1:gnd#branch`, `xu1:out#branch`, etc.  

---

**2. Differential Voltage Measurement (.probe vd):**  
- **Mechanism:** Uses a Voltage Controlled Voltage Source (VCVS) with gain = 1 to measure voltages between nodes. Output vector names use a `vd_` prefix.  
- **Types of Measurements:** Across nodes of devices (single device) or between nodes of different devices.  

**General Syntax:**  
- `.probe v(node1)` → Voltage at `node1`.  
- `.probe vd(device:node1:node2)` → Voltage across nodes of a device.  
- `.probe vd(device1:node1, device2:node2)` → Voltage between nodes of two devices.  

**Examples:**  
- `.probe v(nR1)` → Voltage at node `nR1`.  
- `.probe vd(R1)` → Voltage across `R1`.  
- `.probe vd(m4:1:3)` → Between nodes `1` and `3` of `m4`.  
- `.probe vd(m4:d, m5:s)` → MOS device, `d` terminal of `m4` and `s` terminal of `m5`.  

**Resulting Vectors:**  
- Example entries: `vd_R1`, `vd_m4:d:0`, `vd_m4:d:s`.  

---

**3. Power Dissipation Measurement (.probe p):**  
- **Mechanism:** Node currents (`i1, i2...`) and voltages (`v1, v2...`) are measured. A virtual reference voltage `vref` is calculated as the mean of all node voltages. Power is calculated as:  
  `P = i1*(v1-vref) + i2*(v2-vref) + ... + in*(vn-vref)`  

**General Syntax:**  
- `.probe p(device)` → Power dissipation in a device.  

**Examples:**  
- `.probe p(XU1)` → Subcircuit `XU1`.  
- `.probe p(MQ1)` → MOS transistor `MQ1`.  

**Resulting Vectors:**  
- Example entries: `xu1:power`, `mq1:power`.  

---

**Remarks:**  
- Unlike `.options savecurrents`, `.probe` vectors are available for all simulation types (e.g., AC simulation).  
- If `.save` is absent, only the `.probe` vectors are saved.
### Summary of Ngspice Section 11.6.6: `par('expression')` for Algebraic Expressions in Output

#### General Description:
- **`par('expression')`** allows incorporating algebraic expressions into output lines like `.four`, `.plot`, `.print`, `.save`, and `.measure`. These expressions can include vectors, predefined functions, numerical values, constants, simulator outputs (`v(n1)`, `i(vdb)`), parameters (`.param`), and predefined variables (`hertz`, `temper`, `time`).  
- Operates on **complex values** in AC analysis mode.

#### Internals:
- Internally, each `par('expression')` generates a voltage node named `pa_00` to `pa_99`. These nodes are produced by a B-source. An error will occur if these reserved node names are manually used in the input file.
- Limited to **99 `par('...')` instances** per input file.

#### Syntax Rules:
- Strict syntax for **`par('expression')`**:
  - No spaces between `par` and `('`.
  - `('` and `')` are mandatory.
  - Input errors may result in unexpected behavior with little error-handling mechanisms.

#### Alternate Syntax (for `.four`, `.plot`, `.print`, `.save` but not `.measure`):
- **`output=par('expression')`** is also possible.
  - `output` becomes the name of the new node replacing the expression.
  - `output` must be **unique** and a valid node name.
  - Syntax for this is strict (follows the same rules as above).

#### Theoretical Characteristics:
- Values of type **complex** processed by B-source in AC mode.
- Expressions are valid if applicable to B-source characteristics (see Chapter 5.1 for details).

#### Examples:
- **Netlist Examples**:
  1. `.four 1001 sq1=par('v(1)*v(1)')`
  2. `.measure tran vtest find par('(v(2)*v(1))') AT=2.3m`
  3. `.print tran output=par('v(1)/v(2)') v(1) v(2)`
  4. `.plot dc v(1) diff=par('(v(4)-v(2))/0.01') out222`

#### Notes and Limitations:
- `.measure` does not support `output=par('expression')`.
- Minimal error checking: typos can lead to unpredictable behaviors.
**Ngspice Command: .width**

- **Purpose**: Specifies the maximum number of characters per row for printing or plotting when using columns or ASCII plots.

- **Syntax**:  
  `.width out = <value>`  

- **Parameter**:  
  `out`: Defines the maximum number of characters per row.  

- **Example**:  
  `.width out = 256` (sets the row width to 256 characters).
**Summary for Netlist Code Assistance:**

1. **Batch Mode Commands**: 
   - Commands `.print`, `.plot`, and `.four` are **specific to batch mode** usage in ngspice.
   - Commands `.save` and `.probe` are valid in **all operating modes**.

2. **Batch Mode Execution**:
   - Start ngspice in batch mode using the `-b` option.
     Example: `ngspice -b input.cir`
   - Outputs for `.print`, `.plot`, and `.four` will be sent to the **console output** by default.
   - To redirect outputs to a file: 
     Syntax: `ngspice -b -o output.log input.cir`

3. **Rawfile Generation Conflict**:
   - Adding the `-r` option to create a rawfile **disables** `.print` and `.plot`.
     Syntax: `ngspice -b -r rawdata.raw input.cir`

4. **Graphical Output Alternative**:
   - For graphical plotting, use **control mode output** instead of batch mode (`-b`).

**Important Notes**:
   - Output redirection (`-o`) is **not supported** by MS Windows GUI.

The `.probe` command in Ngspice is used to measure device currents (for discrete devices or subcircuits). Voltage sources are introduced in series with the device nodes specified by the user to facilitate current measurements. Reference additional details in section 11.6.5.
**Summary:**

1. **Purpose of Adding a Voltage Source in Series:**
   - The ngspice matrix solver calculates node voltages and currents through independent voltage sources.
   - A voltage source with `dc voltage 0` can be added in series to measure the current through a resistor.

2. **Current Measurement Technique Using Voltage Source in Series:**
   ```ngspice
   * Original Circuit
   V1 1 0 1
   R1 1 0 5
   R2 1 0 10

   * Modified Circuit with Current Measurement
   V1 1 0 1
   R1 1 11 5
   Vmeas 11 0 dc 0
   R2 1 0 10
   ```
   - `Vmeas 11 0 dc 0` is added in series with `R1`.
   - Current is accessible as `vmeas#branch` after simulation.

3. **Key Notes for Current Measurement:**
   - Voltage source added in series should have `dc voltage 0` to avoid altering the circuit behavior.
   - Access current calculation through `vmeas#branch`.


11.7.3 Using Option `savecurrents` (Ngspice Manual Summary for Netlist Code Generation)

**Purpose**  
- The `.options savecurrents` command enables measurement of device terminal currents by adding `.save` commands internally during circuit parsing. This adds new vectors for the currents, avoiding extra nodes.

**Key Information**
- Syntax: `.options savecurrents`
- Automatically adds `.save` lines like:
  ```
  .save @r1[i]
  .save @r2[i]
  ```
  These vectors store device terminal currents.
- Supported Devices: M, J, Q, D, R, C, L, B, F, G, W, S, I (detailed in Chapter 2.3). Devices in subcircuits are also supported.
- **Not Supported in AC Simulations**: Complex data cannot be processed. Resultant vectors will be empty.
- Memory Impact: Each device adds 1–4 output vectors, which may cause high memory usage in large circuits. Data is delayed by one time step for transient simulations.

**Special MOSFET Options** (for MOS1, BSIM3, BSIM4 models):
- `.options savecurrents_mos1`
- `.options savecurrents_bsim3`
- `.options savecurrents_bsim4`  
  These enable saving all currents for respective transistor models.

**Limitations and Observations**
- Does not impact AC analysis.
- Existing internal nodes are used, no additional nodes are created.
- Memory usage can increase significantly in large circuits.
  
**Example**  
```spice
* Measure currents through R1 and R2
V1 1 0 1
R1 1 0 5
R2 1 0 10
.options savecurrents
```

- Auto-generated equivalent `.save` lines:
  ```
  .save @r1[i]
  .save @r2[i]
  ```

**Usage Caution**
- Validate memory constraints for large circuits.
- For AC simulations, alternative methods like `.probe` or series voltage sources should be used.
**Summary: Measuring Current Through Device Terminals (Section 11.7 - Ngspice Manual)**

- **Measuring Current**: To measure current through component terminals in a netlist, Ngspice requires the use of branch currents or probes.

- **Keyword Syntax**:  
  `I(Xdevice)` measures current through the device `Xdevice`.  
  `I(Vname)` measures current through a voltage source defined by `Vname`.

- **Theory**: For passive devices (resistors, capacitors, inductors), currents follow Kirchhoff's laws. For active devices (transistors, diodes), currents across terminals depend on the models and parameters provided.


### Summary: Analysis and Output Control (Batch Mode) in Ngspice

1. **Batch Mode Execution**:
   - Command to invoke batch mode:
     ```
     ngspice -b -r rawfile.raw circuitfile.cir
     ```
     or use file redirection:
     ```
     ngspice < circuitfile.cir
     ```
   - In batch mode:
     - `.ac`, `.tran`, or other analysis specified in the input file are executed automatically.
     - If `-r rawfile.raw` is used, simulation data is written to a rawfile, which can later be loaded in interactive mode:
       ```
       load
       ```
     - Internal device variables can be saved using `.save` (see Chapter 11.6, Appendix 27 for details).

2. **Output Control**:
   - If no rawfile is specified:
     - Results can be printed in "line-printer" format or tables using:
       - `.print`
       - `.plot`
       - `.four` (Fourier analysis)
   
3. **Interactive Mode Behavior**:
   - Command to start in interactive mode:
     ```
     ngspice circuitfile.cir
     ```
   - If no `.control ... .endc` section is provided, the dot commands inside the circuit file will not execute automatically. They require the `run` command to be issued manually.


**Summary:**

**Purpose of `.param Line**`: Assign numerical or string values to identifiers in netlists for use in expressions.

**Syntax**:
`.param <ident> = <expr> <ident> = <expr> ...`

**Key Rules**:
1. Identifiers must start with an alphabetic character; subsequent characters can include letters, digits, or special characters (`!`, `#`, `$`, `%`, `[`, `]`, `_`).
2. Invalid identifier names: `time`, `temper`, and `hertz`. 
3. Expressions defining a parameter should be enclosed in `{}` or single quotes `'`.
4. Assignments are executed sequentially through the expanded circuit.
5. Parameters inside subcircuits are copied per call as regular lines.
6. Self-referential assignments are not allowed (e.g., `.param pip = 'pip+3'` will fail).

**General Characteristics**:
- Numerical assignments: `pippo=5`, `po=6 pp=7.8`, `pap={AGAUSS(pippo, 1, 1.67)}`.
- String assignments: Limited operations (only concatenation at top-level).
  Example: `.param str1="first" str2="second" both={str1}" and "{str2}`.

**Special Notes**:
- Braces `{}` or single quotes `'` are recommended for all expressions, especially when spaces are involved.
- String values can only be used for concatenation and not within deeper expressions.

**Examples**:
- `.param pippo=5`: Simple numerical assignment.
- `.param pap={AGAUSS(pippo, 1, 1.67)}`: Functional assignment with Gaussian distribution.
- `.param p={pp}`: Parameter inheritance.
- `.param pop='pp+p'`: Expression evaluation within quotes.
- `.param c = a+123`: Works if braces or quotes are used correctly (e.g., `.param c = 'a + 123'`).

**Default String Behavior**:
- Concatenation (top-level only): `.param str1="first" str2="second" both={str1}" and "{str2`.


2.10.2 Brace Expressions in Circuit Elements:

- General Form: `{ <expr> }`
- Usage: Allowed in `.model` lines and device lines.
- Limitations: 
  1. Brace expressions cannot parameterize node names or parts of names.
  2. All identifiers inside `<expr>` must have known values during evaluation; otherwise, an error occurs.
- SPICE Numbers: Float with optional scaling suffix (details in Chapter 2.10.5).
**Summary:**

**Subcircuit Definition and Parameters:**  
- **General Form:**  
  `.subckt <identn> node node ... <ident>=<value> <ident>=<value> ...`  
  - `<identn>`: Subcircuit name defined by the user.  
  - `node node ...`: External nodes, represented as integers or identifiers.  
  - `<ident>=<value>`: Formal parameters with optional default values (SPICE number or brace expression).  
  - Default values of parameters can be used like identifiers defined on a `.param` line within the `.subckt ... .ends` context.  

**Subcircuit Invocation:**  
- **General Form:**  
  `X<name> node node ... <identn> <ident>=<value> <ident>=<value> ...`  
  - `<name>`: Symbolic instance name of the subcircuit.  
  - `<identn>`: Previously defined subcircuit name.  
  - `node node ...`: Actual nodes for the subcircuit connection.  
  - `<ident>=<value>`: Parameters for the subcircuit instance, where `<value>` can be a SPICE number or a brace expression `{<expr>}`.  

**Subcircuit Example with Parameters:**  
```plaintext
* Param-example
.param amplitude= 1V

.subckt myfilter in out rval=100k cval=100nF
Ra in p1   {2*rval}
Rb p1 out  {2*rval}
C1 p1 0    {2*cval}
Ca in p2   {cval}
Cb p2 out  {cval}
R1 p2 0    {rval}
.ends myfilter

X1 input output myfilter rval=1k cval=1n
V1 input 0 AC {amplitude}
.end
```  

Key Notes from Example:  
- **Default parameters in subcircuit definition (`.subckt`):**  
  Example: `rval=100k`, `cval=100nF`.
- **Usage of parameter expressions within subcircuits:**  
  Example: `{2*rval}`, `{cval}`.
- **Invocation of subcircuit (`X1`) with overridden values for formal parameters (`rval`, `cval`).**  
  Example: `X1 input output myfilter rval=1k cval=1n`.
- **Definition of global parameters using `.param`:**  
  Example: `.param amplitude=1V`.

**Useful Insights:**  
- Subcircuits allow repetitive and parameterized circuit block definitions.  
- Parameters defined within subcircuits can be mathematical expressions using default or overridden values.  
- Subcircuit connections require mapped node identifiers during invocation.  
- Parameters in subcircuits can override defaults during instantiation.
**Summary of Section 2.10.4 Symbol Scope (Ngspice Manual):**

- **Global and Unique Naming:**
  - All **subcircuit names** and **model names** are global and must be unique.
  
- **Global vs. Local Parameters:**
  - Parameters defined with `.param` **outside** a `.subckt ... .ends` block are **global**.
  - Parameters defined with `.param` **inside** a `.subckt ... .ends` block are **local** and **mask global parameters of the same name** until the `.ends` line is encountered.
  - **Local reassignment of global parameters:** Global parameters cannot be reassigned within a `.subckt`. Instead, a local copy of the parameter is created.

- **Scope Nesting:**
  - Symbol scope can nest up to 10 levels.
  - Example:  
    - Main circuit calls subcircuit `A` with param `xx`.
    - Subcircuit `A` calls subcircuit `B` with param `xx`.
    - Subcircuit `B` calls subcircuit `C` with param `xx`.
    - At any given point, only the **most local version** of `xx` (in this case, belonging to `C`) is visible.
**Summary of Ngspice Manual on Expression Syntax**  

1. **Expression Syntax**:  
Expressions can include:
- **Atom**: A spice number or identifier.  
- **Unary Operator** & Atom.  
- **Function Name** and its arguments.  
- **Binary Operator** applied to Atom and Expression.  
- Parentheses for grouping expressions.  

Evaluation follows precedence rules (see below) and functions only operate on real values.  

---

2. **Operator Precedence and Descriptions**:  
| Operator | Alias | Precedence | Description          |  
|----------|-------|------------|----------------------|  
| -        |       | 1          | Unary minus          |  
| !        |       | 1          | Unary NOT            |  
| **, ^    |       | 2          | Power (e.g., `pwr`)  |  
| *, /, %, \ |     | 3          | Multiply, divide, modulo, integer divide |  
| +, -     |       | 4          | Add, subtract        |  
| ==, !=, <=, >=, <, > | | 5     | Equality & inequality operators |  
| &&       |       | 6          | Boolean AND          |  
| ||       |       | 7          | Boolean OR           |  
| c?x:y    |       | 8          | Ternary operator     |  

- Boolean FALSE = `0`, Boolean TRUE = any non-zero value.  
- Logical results: `1` (TRUE) or `0` (FALSE).  

---

3. **Compatibility Modes for Power Functions (“**” or "^")**:  
- **compatmode hs**:  
  - `x > 0`: `pow(x, y)`  
  - `x < 0`: `pow(x, round(y))`  
  - `x = 0`: `0`  
- **compatmode lt**:   
  - `x > 0`: `pow(x, y)`  
  - `x < 0`: `pow(x, y)` (if `y` is close to an integer), else `0`.  

---

4. **Built-in Functions**:  
| Function           | Description                                  |  
|--------------------|----------------------------------------------|  
| `sqrt(x)`          | Square root of x                            |  
| `sin(x), cos(x), tan(x)` | Trigonometric functions.               |  
| `asin(x), acos(x), atan(x)` | Inverse trig functions.            |  
| `exp(x)`           | Exponential function `e^x`.                 |  
| `log(x), ln(x)`    | Logarithmic functions.                      |  
| `abs(x)`           | Absolute value.                             |  
| `nint(x)`          | Nearest integer (half-integers toward even).|  
| `int(x)`           | Round toward zero.                          |  
| `floor(x)`         | Nearest integer <= x.                       |  
| `ceil(x)`          | Nearest integer >= x.                       |  
| `pow(x, y)`        | x^y from C runtime library.                 |  
| `min(x, y)`        | Minimum of x and y.                         |  
| `max(x, y)`        | Maximum of x and y.                         |  
| `sgn(x)`           | 1 for x > 0, 0 for x = 0, -1 for x < 0.     |  
| `gauss(nom, rvar, sigma)` | Gaussian variation (relative).       |  
| `agauss(nom, avar, sigma)` | Gaussian variation (absolute).       |  
| `unif(nom, rvar)`  | Uniform variation (relative).               |  
| `aunif(nom, avar)` | Uniform variation (absolute).               |  

---

5. **Scaling Suffixes**: These suffixes can modify numerical values.
| Suffix | Value    |  
|--------|----------|  
| g      | `1e+09`  |  
| meg    | `1e+06`  |  
| k      | `1000`   |  
| m      | `0.001`  |  
| u      | `1e-06`  |  
| n      | `1e-09`  |  
| p      | `1e-12`  |  
| f      | `1e-15`  |  

---

6. **Example for Logical Operators**:
``` 
* Logical operators
v1or   1 0  {1 || 0}    * Boolean OR
v1and  2 0  {1 && 0}    * Boolean AND
v1not  3 0  {! 1}       * Boolean NOT
v1mod  4 0  {5 % 3}     * Modulo
v1div  5 0  {5 \ 3}     * Integer Division
v0not  6 0  {! 0}       * NOT applied to 0 (False)
.control
op
print allv
.endc
.end
```

**Note**: Redundant variations like `x^y`, `x**y`, and `pwr(x, y)` yield nearly identical results.
Reserved words in Ngspice (cannot be used as parameter names):  
or, defined, sqr, sqrt, sin, cos, exp, ln, log, log10, arctan, abs, pwr, time, temper, hertz.  
- **Deprecated Notation**: The historical parameter notation using `&` as the first character of a line (equivalent to `.param`) is deprecated and will be removed in a future release.

- **Expression Parsers and Evaluation**:
  - **Front-End Evaluation**: `.param` lines and brace `{}` expressions are evaluated in the front-end during netlist expansion, making all number attributes known constants before internal data setup.
  - **Run-Time Evaluation**: Arithmetic expressions (without `{}`) specific to certain components (B-sources, E-sources, G-sources, and R-, L-, or C-devices) are evaluated during the circuit analysis stage.
  
- **Syntactic Difference**:
  - Compile-time expressions use braces `{...}`.
  - Run-time expressions do **not** use braces `{}`.

- **Ngspice Scripting Language**: Separately, the ngspice scripting language accepts arithmetic/logic expressions that operate only on its scalar or vector data sets.

- **Implementation Limitation**: Uniform expression syntax, operator/function sets, and precedence rules are not consistently achieved across `.param`, run-time expressions, and back-end scripting.


Ngspice supports the definition of parametric attributes in netlists using the `.PARAM` statement. This feature enhances the circuit description language by integrating arithmetic functionality.
**Summary on `.FUNC` (Ngspice Manual Section 2.11):**

- `.FUNC` keyword is used to define functions in Ngspice netlists.
- **Syntax Forms**:
  - `.func <ident> {<expr>}`
  - `.func <ident> = {<expr>}`
  
- **Examples**:
  - `.func icos(x) {cos(x) - 1}`: Defines a function `icos(x)` to replace occurrences of `icos(x)` with `cos(x) - 1`.
  - `.func f(x,y) {x*y}`: Replaces occurrences of `f(x, y)` with `x * y`.
  - `.func foo(a,b) = {a + b}`: Defines a function `foo(a,b)` that replaces occurrences of itself with `a + b`.

- **Operational Details**:
  - Replacement occurs after input files are read and before parameter evaluation.
  - `.FUNC` supports nested function definitions, though the depth limit is unspecified (t.b.d.).

This is relevant for defining reusable expressions or debugging netlist code through parameter replacement operations.
### Summary for `.CSPARAM` (Ngspice Manual - Section 2.12)

#### Purpose:
The `.CSPARAM` command helps create constant vectors from parameters in the `plot const`. These vectors:
- Are of length one.
- Have real values.
- Are generated during circuit parsing and cannot be modified later.

#### General Syntax:
`.csparam <ident> = <expr>`

#### Key Notes:
- `.csparam` vectors can be used in Ngspice scripts and `.control` sections.
- Functionality of `.csparam` is experimental and requires testing.
- Vectors defined via `.csparam` are added to the list of constants available in `plot const`.

#### Examples:
1. **Parameter Creation:**
   ```
   .param pippo = 5
   .param pp = 6
   .csparam pippp = {pippo + pp}   ; Creates vector pippp with value 11
   ```

2. **String Expression:**
   ```
   .csparam pap = 'pp + p'         ; Expression as a string
   ```

3. **Usage in Scripts:**
   ```
   * test csparam
   .param TEMPS = 27
   .csparam newt = {3 * TEMPS}     ; Creates vector newt with value 81
   .csparam mytemp = '2 + TEMPS'   ; Evaluates as a string
   .control
   echo $&newt $&mytemp            ; Outputs constant values during simulation
   .endc
   .end
   ```

This syntax allows flexible vector creation based on parameters and supports its use in control sections, but due to its experimental nature, users must validate its results carefully.
.temp is used to set the circuit temperature in degrees Celsius. It overrides the circuit temperature defined in the `.option` line.

**General Syntax:**  
.temp value  

**Example:**  
.temp 27
**Summary: .IF Condition-Controlled Netlist (.IF-.ELSE-.ENDIF)**

**Purpose:** Enables conditional execution of parts of the netlist based on boolean expressions.

**General Structure:**
```
.if (boolean expression)
...
.elseif (boolean expression)
...
.else
...
.endif
```

**Key Details:**
1. **Boolean Expression:** Defined using Chapter 2.10.5 syntax, evaluates to `1` (true) or `0` (false).
2. **Usage:** Encloses netlist blocks (device instances or `.model` cards) to conditionally include them based on evaluation.
3. **Nesting:** Supported with multiple `.elseif` and a single `.else` per block.
4. **Restrictions:** Blocks do not support `.SUBCKT`, `.INC`, `.LIB`, and `.PARAM`.

**Example 1 (Device Instances in `.IF-.ELSE`):**
```
.param ok=0 ok2=1
v1 1 0 1
R1 1 0 2
.if (ok && ok2)
R11 1 0 2
.else
R11 1 0 0.5   $ <-- selected
.endif
```

**Example 2 (.MODEL Selection in `.IF-.ELSE`):**
```
.param m0=0 m1=1
M1 1 2 3 4 N1 W=1 L=0.5
.if(m0==1)
.model N1 NMOS level=49 Version=3.1
.elseif(m1==1)
.model N1 NMOS level=49 Version=3.2.4  $ <-- selected
.else
.model N1 NMOS level=49 Version=3.3.0
.endif
```

**Additional Notes:**
- Selection occurs based on the first satisfied condition.
- The specific version, level, or parameters chosen can change based on the logic inputs.
- Test cases available in `ngspice/tests/regression/misc/if-elseif.cir`.
Parameters and functions in Ngspice (`.param` and `.func`) are evaluated before any simulation begins—during the setup of the circuit. As a result:

- **Simulation data (voltage/current vectors)** cannot be used within `.param` or `.func` because they are not yet available during evaluation.
- **Replacement and Evaluation:** During circuit setup, parameters and functions are computed, and resulting numerical values are substituted in the netlist.
- **Immutability:** Once parameters are evaluated, they cannot be modified based on feedback during or after the simulation process.

For detailed syntax, refer to Chapter 2.10.5.
Ngspice Nonlinear Sources (Section 2.15.2):

1. Nonlinear sources allow expressions to define non-linear behaviors in simulations. These sources include B sources (Ch. 5), E and G sources, as well as R, C, and L devices, with continuous value updates during simulations.

2. Expressions for these sources can include:
   - Parameters (evaluated upon ngspice start-up).
   - Numerical data.
   - Predefined functions.
   - Node voltages and branch currents from the simulation.

3. Nonlinear sources can simulate new devices by customizing their behavior.

4. **Limitations:** The expression syntax and predefined functions for these nonlinear sources may differ from those specified for parameters in Section 2.10.1.


**Summary for Netlist Code Generation/Modification/Debugging and Components/Model/Command Queries:**

1. **Control Command Scripts Structure:**
   - Command scripts are enclosed within `.control` and `.endc` lines.
   - They can work with simulation output vectors (such as node voltages, branch currents), as well as user-defined vectors and variables.
   - Scripts allow post-simulation manipulation using expressions (syntax details in Chapt. 13.2).

2. **Parameter Usage in Scripts:**
   - Parameters defined in `.param` statements (Chapt. 2.10.1) **cannot** be used directly in expressions within `.control` scripts.
   - Use `.csparam` (Chapt. 2.12) for parameter definitions within control scripts.
   - Alternative: Define a voltage source with the parameter value. After running a transient simulation, use its output as a vector.

3. **Restrictions & Notes:**
   - Feedback from control script-extracted values back into `.param` parameters is **not possible**.
   - Non-linear sources from previous simulations cannot be accessed within a control script.
   - You **can** run an initial simulation within the control script, evaluate its output, and adjust element or model parameters using `alter` and `altermod` commands (Chapt. 13.5.3) before starting a new simulation.

4. **Scripting Commands for Parameter Adjustment:**
   - `alter`: Used to modify element parameters.
   - `altermod`: Used to modify model parameters.

5. **Expression Syntax:**
   - Expressions within `.control` scripts follow a different syntax than parameters (`.param`) or B sources (`2.10.1` and Chapt. 5.1). Reference Chapt. 13.2 for exact syntax.

6. **Examples (Chapt. 17):**
   - For further examples of expressions and command script usage, see Chapt. 17 (examples will be regularly updated).

This condensed summary ensures critical syntax, theoretical characteristics, and functionality insights for debugging, modifying, or generating netlist codes.
**Ngspice Manual - Parameters, Functions, and Expressions (Section 2.15)**

Ngspice provides multiple methods to describe functional dependencies using three independent function parsers, which operate at different stages of simulation: before, during, and after the simulation. Each parser plays distinct roles in handling functional relationships and processing expressions. Detailed interdependence between these parsers is important for effective usage during netlist generation or analysis. Full specifics can be explored for targeted applications. 


1. **Input File Structure for Ngspice**:
   - **Essential Lines**:
     - The first line must be the *title*. No special character is needed in the first place.
     - The last line must be `.end`, followed by a newline delimiter.

   - **Order and Structure**:
     - The order of other lines is almost arbitrary, with exceptions:
       - Continuation lines (must immediately follow the line being continued).
       - `.subckt ... .ends` for subcircuit definitions.
       - `.if ... .endif` for conditional statements.
       - `.control ... .endc` for control block enclosures.
     - Leading whitespaces are ignored.
     - Empty lines are ignored.

   - **Core Lines**:
     - The lines from Sections 2.1 to 2.12 are generally placed outside the `.control` section unless stated otherwise.
     - The `.include includefile` line can be placed anywhere in the input file, and the content of `includefile` is inserted in place of the `.include` line. 


2.1.2 Syntax Check  
- Preliminary syntax checks are implemented in the input parser.

2.1.2.1 Valid UTF-8 Characters  
- The input file is scanned for valid UTF-8 characters. If invalid characters are present, input reading stops.

2.1.2.2 Special Characters Leading a Line  
- If the first character in a netlist or `.control` line is one of `=[]?()&%$§\"!:`, it is replaced by `*`, and a warning is issued.  
- The command `set strict_errorhandling` will force ngspice to exit when such special characters are detected.

2.1.2.3 Dot Command Couple Completion  
- Ensures the proper pairing of the following constructs:  
  - `.control ... .endc`  
  - `.subckt ... .ends`  
  - `.if ... .endif`
### Extracted Summary from Ngspice Manual (Section 2.1.3)

#### **General Naming Conventions**
- **Line Continuation**: Lines are continued using a `+` in column 1 of the next line or backslashes (`\`) as the last two characters for Unix shell style.
- **Device Naming**: Device names *must* start with a letter (A-Z) and cannot contain delimiters. 

#### **Number Representations**
- **Scale Factors Table**:
  - `T`: Tera, \( 10^{12} \)
  - `G`: Giga, \( 10^{9} \)
  - `Meg`: Mega, \( 10^{6} \)
  - `K`: Kilo, \( 10^{3} \)
  - `mil`: Mil, \( 25.4 \times 10^{-6} \)
  - `m`: milli, \( 10^{-3} \)
  - `u`: micro, \( 10^{-6} \)
  - `n`: nano, \( 10^{-9} \)
  - `p`: pico, \( 10^{-12} \)
  - `f`: femto, \( 10^{-15} \)
  - `a`: atto, \( 10^{-18} \)

#### **Letters Following Numbers**
- Letters immediately after a number or its scale factor are ignored (e.g., `10`, `10Hz`, `10Volts` all equal 10).
- Notations such as `M` or `m` represent milli (\(10^{-3}\)); use `Meg` for Mega (\(10^6\)).
- **RKM Notation**: Enabled in LT compatibility mode; allows formats like `2K7` or `100R`.

#### **Node Names**
- **Acceptable Node Names**: Arbitrary strings for node names, case insensitive in batch mode, but restricted in interactive/control mode (cannot start with numbers).
- **Special Character Restrictions**: Characters `= % ( ) , [ ] < > ~` are disallowed in node names, especially alongside XSPICE models.

#### **Ground Node**
- Must always be named `0` (zero). 
- `gnd` is accepted as an alias for `0`, but internally treated as global and converted to `0`. 
  - Conversion can be disabled via `set no_auto_gnd` inside `spinit` or `.spiceinit`.
- Every circuit *must* have a ground node.
- **Nodes Handling**: Nodes are treated as character strings, making `0` distinct from `00`. This behavior differs from older SPICE2 standards.

---

This extracted summary includes key points relevant for netlist creation or debugging, focusing on syntax, conventions, and practical usages.
Topological constraints in Ngspice:  
- **Loop Restrictions:** Circuits cannot include a loop of voltage sources and/or inductors.  
- **Cut-Set Restrictions:** Circuits cannot have a cut-set of current sources and/or capacitors.  
- **Node Requirements:**  
  - Each node must have a DC path to ground.  
  - Every node requires at least two connections, except:  
    - **Transmission line nodes:** Allow unterminated transmission lines.  
    - **MOSFET substrate nodes:** Internally have two connections.
The section **2.1 General Structure and Conventions** covers the syntax and conventions used in Ngspice. Here's the summary:

- **General Structure of Netlist**:
  1. Each line represents a statement.
  2. Case-insensitive.
  3. Comments start with an asterisk (`*`) or `$`.
  4. Continuation of a line uses a `+` at the start of the next line.

- **Component Definition**:
  * Components must start with a specific character:
    - `R`, `L`, `C` for passive components (resistor, inductor, and capacitor).
    - `V`, `I` for independent voltage and current sources.
    - `D` for diodes, `Q` for BJTs, `M` for MOSFETs, etc.

- **Node Naming**:
  * Nodes are identified numerically (e.g., 1, 2) or with alphanumeric labels.
  * Node `0` is always the global ground.

- **Units**:
  * Default units include:
    - Resistance: ohms.
    - Capacitance: farads.
    - Inductance: henries.
  
- **Model and Subcircuit References**:
  * Models are defined with the `.MODEL` keyword.
  * Subcircuits are defined using `.SUBCKT` and `.ENDS`.
  
- **Simulation Commands**:
  * Simulation setup and execution use commands like `.DC`, `.AC`, `.TRAN`, etc.

This section provides a foundational understanding for writing Ngspice netlists, ensuring consistency and correct syntax usage in simulation workflows.
**Summary of Dot Commands for Ngspice Netlist Code Generation/Modification/Debugging and Component/Model/Command Queries**

1. **Simulation Commands**:  
   - `.AC`: Start AC simulation.  
   - `.DC`: Start DC simulation.  
   - `.DISTO`: Start distortion analysis simulation.  
   - `.NOISE`: Start noise analysis simulation.  
   - `.OP`: Perform operating point analysis.  
   - `.PSS`: Periodic steady-state analysis.  
   - `.PZ`: Pole-zero analysis simulation.  
   - `.SENS`: Sensitivity analysis.  
   - `.SP`: S-parameter analysis.  
   - `.TF`: Transfer function analysis.  
   - `.TRAN`: Transient simulation.

2. **Conditional Branching**:  
   - `.IF`, `.ELSEIF`, `.ELSE`, `.ENDIF`: Conditional branching in netlist.  

3. **Subcircuit Commands**:  
   - `.SUBCKT`: Start subcircuit definitions.  
   - `.ENDS`: End subcircuit definition.  

4. **Initial Conditions**:  
   - `.IC`: Set initial conditions.  
   - `.NODESET`: Set node-specific initial conditions.  

5. **Analysis Output**:  
   - `.FOUR`: Fourier analysis of transient simulation output.  
   - `.MEAS`: Measure simulation parameters.  
   - `.PLOT`: Printer plot during batch simulation.  
   - `.PRINT`: Tabular listing during batch simulation.  
   - `.PROBE`: Save device currents, voltages, and differential voltages.  
   - `.SAVE`: Name simulation result vectors for saving.

6. **Parameter and Function Definitions**:  
   - `.FUNC`: Define functions.  
   - `.PARAM`: Define parameter(s).  
   - `.CSPARAM`: Define control section parameters.  

7. **Netlist Structure**:  
   - `.TITLE`: Set netlist title.  
   - `.END`: End netlist file.  
   - `.CONTROL`: Start control section.  
   - `.ENDC`: End control section.  

8. **Library and File Inclusion**:  
   - `.INCLUDE`: Include netlist parts.  
   - `.LIB`: Include device or model libraries.  

9. **Device Models**:  
   - `.MODEL`: Define device model parameters.

10. **Global Nodes and Temperature**:  
   - `.GLOBAL`: Define global nodes.  
   - `.TEMP`: Set circuit temperature.  

11. **Simulator Options**:  
   - `.OPTIONS`: Set simulator options.  

12. **Printer Plot Settings**:  
   - `.WIDTH`: Width of printer plot.

This summary retains the essential syntax and theoretical context for the dot commands to ensure precise use in netlist manipulation and debugging tasks.
- **Circuit Element Syntax in ngspice**:  
Each element in a netlist corresponds to a device instance with the following structure:  
  - **Name**: The first letter specifies the type of element (e.g., "R" for resistors).  
  - **Nodes**: Specify connection points to the circuit.  
  - **Parameters**: Determine electrical characteristics of the device.  
Examples of valid resistor names: `R`, `R1`, `RSE`, `ROUT`, `R3AC2ZY`.  

---

- **Table of Element Types**:
  - **A**: XSPICE code model (Analog 8.2, Digital 8.4, Mixed Signal 8.3).  
  - **B**: Behavioral (arbitrary) source (5.1).  
  - **C**: Capacitor (3.3.6).  
  - **D**: Diode (7).  
  - **E**: Voltage-controlled voltage source (VCVS); linear (4.2.2), non-linear (5.2).  
  - **F**: Current-controlled current source (CCCS); linear (4.2.3).  
  - **G**: Voltage-controlled current source (VCCS); linear (4.2.1), non-linear (5.3).  
  - **H**: Current-controlled voltage source (CCVS); linear (4.2.4).  
  - **I**: Current source (4.1).  
  - **J**: Junction Field Effect Transistor (JFET) (7.4).  
  - **K**: Coupled (Mutual) Inductors (3.3.12).  
  - **L**: Inductor (3.3.10).  
  - **M**: MOSFET; includes BSIM3 (7.6.3.3) and BSIM4 (7.6.3.4).  
  - **N**: Verilog-A Compact Device Models (9).  
  - **O**: Lossy transmission line (6.2).  
  - **P**: Coupled Multiconductor Line (CPL) (6.4.2).  
  - **Q**: Bipolar Junction Transistor (BJT) (7.3).  
  - **R**: Resistor (3.3.1).  
  - **S**: Voltage-controlled switch (3.3.15).  
  - **T**: Lossless transmission line (6.1).  
  - **U**: Uniformly distributed RC line (6.3); basic digital elements (10).  
  - **V**: Voltage source (4.1).  
  - **W**: Current-controlled switch (3.3.15).  
  - **X**: Subcircuit (2.6.3).  
  - **Y**: Single lossy transmission line (TXL) (6.4.1).  
  - **Z**: MESFET (7.5).  


.TITLE Directive Summary:

- **Purpose**: Specifies the title or heading for the simulation output. 
- **Usage**: The title line must be the first line of the netlist file or explicitly specified using a `.TITLE` statement.
- **Syntax**:  
  `.TITLE <any title>`  

- **Behavior**:  
  - When `.TITLE` is used, it overrides the contents of the first line of the input deck and replaces it with the new title.  
  - The title is printed verbatim as the heading in the output sections.  

- **Examples**:
  ```
  .TITLE Test of CAM cell
  ```
  The above will replace the first line of the input deck with "Test of CAM cell" in both internal processing and simulation output.
**Summary:**  
1. **Command:** `.end`  
2. **Purpose:** The `.end` line must always be the last line in the input file.  
3. **Syntax:** The period (`.`) is an integral part of the `.end` command name.  
4. **Example:** `.end`  

Comments in Ngspice:

- **Syntax**: 
  `* <any comment>`

- **Characteristics**:
  - Lines starting with an asterisk `*` in the first column are treated as comments.
  - Comment lines can be placed anywhere within the circuit description file.

- **Examples**:
  - `* RF=1K Gain should be 100`
  - `* Check open-loop gain and phase margin`
End-of-line Comments in Ngspice:

General Syntax (for adding comments):
- `<any command> $ <any comment>`  
- `<any command> ; <any comment>`  
- `<any command> // <any comment>`

Examples:
- `RF2=1K $ Gain should be 100`
- `C1=10p ; Check open-loop gain and phase margin`
- `.param n1=1 // new value`

Notes:
1. Comments can use `$`, `;`, or `//`. For readability, precede these characters with a space.
2. When PSPICE compatibility mode is enabled, `$` is treated as a regular character and no longer acts as a comment delimiter.
**Summary:**

**Continuation Lines in Ngspice:**

- **General Syntax:**  
    `<any command>`  
    `+ <continuation of any command> ; some comment`  
    `+ <further continuation of any command>`  

- **Purpose:**  
If command lines are overly long, they can be split for better readability. Internally, they will merge into a single line. 

- **Continuation Line Rules:**  
    - Each continuation line must begin with a `+` followed by a space.  
    - Continuation lines must immediately follow the previous line.  
    - **Alternative Method:** Lines can also be continued by ending with two backslashes (`\\`), similar to Unix shell syntax.  

- **Exclusions:**  
Continuation lines cannot be used with `.title`, `.lib`, and `.include` commands.  


**Ngspice Manual Summary - Section 2.4 "Basic lines"**

- **Comment Lines**: Start with a "*" in the first column. Entire line is ignored.

- **Control Lines**: Keywords start in column 1. Direct ngspice behavior or simulation. Examples include `.control`, `.endc`.

- **Continuation Lines**: End previous line with `+` in column 1. Continues the command or statement from the previous line.

- **Netlist Lines**: Describe circuit elements, nodes, and models. Must be valid for simulation processing.

- **Blank Lines**: Ignored entirely; add for readability.


**Summary of Ngspice `.MODEL` Device Models:**

1. **General Syntax/Template**:  
   `.model <modelname> <type>(<parametername1=value1 parametername2=value2 ...>)`  
   Example: `.model MOD1 npn (bf=50 is=1e-13 vbf=50)`  

   - `<modelname>`: Unique identifier for the model.
   - `<type>`: Specifies the type of model, chosen from one of the predefined codes (see list below).
   - `<parametername=value>`: Assigns values to parameters, which are optional and default to predefined values if not provided.

---

2. **Usage Guidance**:  
   - `.model` defines a set of shared parameters for complex device models.
   - Device elements reference `.model` names in their netlist lines.
   - Some devices allow additional design parameters like geometric factors or initial conditions.

---

3. **Supported Model Types** (Code → Model Type):  
   - `R`: Semiconductor resistor model  
   - `C`: Semiconductor capacitor model  
   - `L`: Inductor model  
   - `SW`: Voltage controlled switch  
   - `CSW`: Current controlled switch  
   - `URC`: Uniform distributed RC model  
   - `LTRA`: Lossy transmission line model  
   - `D`: Diode model  
   - `NPN`: NPN BJT model  
   - `PNP`: PNP BJT model  
   - `NJF`: N-channel JFET model  
   - `PJF`: P-channel JFET model  
   - `NMOS`: N-channel MOSFET model  
   - `PMOS`: P-channel MOSFET model  
   - `NMF`: N-channel MESFET model  
   - `PMF`: P-channel MESFET model  
   - `VDMOS`: Power MOS model

---

4. **Parameter Defaults**:  
   - Parameters not explicitly defined are assigned default values based on device type.
   - Exact default values and parameter definitions are provided in Chapter 27.

---

5. **Model Line Example**:  
   - `.model MOD1 npn (bf=50 is=1e-13 vbf=50)`  
     - `MOD1`: Model name.
     - `npn`: Specifies the type.
     - Parameters (`bf`, `is`, `vbf`) are custom-defined; unspecified parameters take default values.

This summary preserves crucial syntax, tables, default behavior, and examples for generating/modifying/debugging netlist code related to `.MODEL`.
**Summary of Ngspice Manual (Section 2.6.1)**:

**.SUBCKT Command**
- **General Form:** `.SUBCKT subnam N1 <N2 N3 ...>`
- **Purpose:** Defines a subcircuit, starting with `.SUBCKT` and ending with `.ENDS`.

**Key Points for Netlist Code Use:**
1. **subnam:** Name of the subcircuit (must be unique within the simulation).
2. **External Nodes (N1, N2, ...):** Node numbers defining connections of the subcircuit to the external circuit. Nodes cannot be 0 (zero).
3. **Subcircuit Definition:** Includes element lines, device models, subcircuit calls, and other nested subcircuit definitions. Control lines are **not allowed** within the subcircuit.
4. **Local Scope:** 
   - Any device models or nested subcircuit definitions inside the subcircuit are **local** – they are not accessible outside the subcircuit.
   - Nodes not declared on the `.SUBCKT` line remain **local**, except for node 0 (ground), which is always global.
5. **Using Parameters:** If parameters are used, the `.SUBCKT` line gets extended.

**Examples:**
- `.SUBCKT OPAMP 1 2 3 4`
- This line shows the creation of a subcircuit named `OPAMP` connected via external nodes 1, 2, 3, and 4.


.**ENDS Line**  
Syntax: `.ENDS <SUBNAM>`  

- The `.ENDS` line terminates a subcircuit definition.  
- `<SUBNAM>` is the subcircuit name being terminated.  
  - **Optional**: If omitted, all currently open subcircuits are terminated.  
  - **Required**: If nested subcircuit definitions are used, to specify which subcircuit to terminate.  
- **Position**: Must always be the last line of a subcircuit definition.  

**Example:**  
`.ENDS OPAMP`  

**2.6.3 Subcircuit Calls**  
**General Form:**  
`XYYYYYYY N1 <N2 N3 ...> SUBNAM`  

**Example Code:**  
`X1 2 4 17 3 1 MULTI`  

**Key Details:**  
- Subcircuits are invoked using pseudo-elements beginning with the letter **X**.  
- **SUBNAM** specifies the name of the subcircuit to be expanded.  
- Nodes (N1, N2, etc.) listed after **XYYYYYYY** correspond to the circuit nodes used for subcircuit expansion.  
- Subcircuit calls can be modified if parameters are used (see section **2.10.3**).  


**Summary for Netlist Code Generation/Modification/Debugging/Explanation**

1. **Subcircuits Overview**:
   - Subcircuits are a hierarchical modeling feature in ngspice, allowing repeated circuit sections to be easily represented.
   - Defined using `.subckt` and `.ends` cards (or alternative keywords specified with `substart` and `subend` options).
   - Subcircuits are textually expanded during parsing, removing the hierarchical structure post-input processing.

2. **Syntax and Usage**:
   - **Definition**:  
     `.subckt <name> <port1> <port2> ...`  
     Example: `.subckt vdivide 1 2 3`
     - `name`: Subcircuit name (`vdivide` in example).
     - `portX`: External connection points (e.g., `1`, `2`, `3`).
   - **Component Cards within Subcircuit**:  
     Each component has standard definitions within `.subckt` boundaries.  
     Example:
     ```
     r1 1 2 10K    ; Resistor R1 between port `1` and `2` (value: 10 kOhms)
     r2 2 3 5K     ; Resistor R2 between port `2` and `3` (value: 5 kOhms)
     ```
   - **Terminating Definition**: `.ends`
   - **Instance Card**:  
     Used to instantiate the subcircuit in a design, starts with `X`.  
     Example:
     ```
     xdiv1 10 7 0 vdivide    ; Instantiates subcircuit `vdivide`. Ports mapped as: `1=10`, `2=7`, `3=0`.
     ```

3. **Default Characteristics & Features**:
   - Ports are mapped to specific nodes in the main circuit as defined by the instance card.
   - No limits on size or complexity.
   - Nested subcircuits (subcircuits within subcircuits) are supported.

4. **Example of Unique Lines**:
   ```
   xdiv1 10 7 0 vdivide
   .subckt vdivide 1 2 3
   r1 1 2 10K
   r2 2 3 5K
   .ends
   ```

This information helps in defining, instantiating, debugging subcircuits in a netlist and interpreting hierarchical designs effectively in ngspice.
**Summary:**

**`.GLOBAL` Statement**  
- General form: `.GLOBAL nodename1 [ nodename2 ... ]`  
- Purpose: Defines global nodes accessible across all circuit and subcircuit blocks, regardless of circuit hierarchy.  
- Example: `.GLOBAL gnd vcc`  
- Functionality: Ensures nodes defined in `.GLOBAL` are accessible from the top level after circuit parsing.  
- **.INCLUDE Command**  
  - **General form**: `.INCLUDE filename`  
  - **Purpose**: Allows you to include content from an external file (e.g., common models or subcircuits) in the current netlist. The included file's content is treated as if it were directly written at the `.INCLUDE` statement's location.
  
  - **Filename Details**:  
    - Can be an absolute or relative path.  
    - If the relative path file is not found, `sourcepath` variable locations (Section 13.7) are searched.  
    - No naming restrictions apart from the operating system's rules.

  - **Example Usage**:
    ```
    .INCLUDE /users/spice/common/bsim3-param.mod
    ```
### Extracted Summary for .LIB Command in Ngspice  

**General Form:**  
`.LIB filename libname`  

**Example:**  
`.LIB /users/spice/common/mosfets.lib mos1`  

**Purpose:**  
The `.LIB` command is used to include library descriptions into the input netlist.  

**Details:**  
- Inside the referenced `.lib` file, a specific library section (`libname`) is selected.  
- Statements for each library are enclosed using `.LIB libname ... .ENDL`.  
- The file search behavior for `.LIB` is the same as for `.include`.  

**Compatibility Mode Syntax:**  
- Setting compatibility mode to `ps` (`set ngbehavior=ps`) allows the simplified syntax:  
  `.LIB filename`  
- In this case, the `filename` is directly included, issuing only a warning.  

The given text, "2 Circuit Description," is a heading or section title and does not provide additional content to extract or summarize for netlist code generation, modification, or related purposes. There's no actionable information, syntax, or examples presented in this excerpt.
### Ngspice Netlist, Components, Instances, Models, and Parameters:

**General Overview of Netlist:**
- A netlist defines circuit elements, their interconnections, and model parameters.
- **Title Line:** The first line is always a title line and does not affect the circuit.
- **Instance Lines:** Each line after the title represents a circuit element or component (e.g., resistors, capacitors, transistors).
- **Dot Lines:** Lines starting with a dot (`.`) include model parameters, control commands, or advanced configurations.

---

**Component Syntax and Basics:**
1. **Resistor:**
   - Representation: `R<name> <node1> <node2> <value>`
   - Example: `R3 vcc intc 10k`  
     - `R3`: Resistor name.
     - `vcc intc`: Two connected nodes.
     - `10k`: Resistance value.

2. **Capacitor:**
   - Representation: `C<name> <node1> <node2> <value>`
   - Example: `Cout out intc 10u`

3. **Bipolar Junction Transistor (BJT):**
   - Instance Syntax: `Q<name> <collector-node> <base-node> <emitter-node> <model-name>`
   - Example: `Q1 intc intb 0 BC546B`  
     - `Q`: Indicates a bipolar transistor.
     - `intc intb 0`: Collector, base, and emitter nodes.
     - `BC546B`: Model name (parameters defined separately).

---

**Model Parameters for Components:**
- **Model Definition Syntax:** `.model <model-name> <type> (<parameter-list>)`
- **Example:**
  ```
  .model BC546B npn (IS=7.59E-15 VAF=73.4 BF=480 IKF=0.0962 ...)
  ```
  - `npn`: Device type (e.g., NPN transistor).
  - `Parameters`: Name-value pairs (e.g., `IS`, `VAF`, `BF`).

**Simplified BJT Syntax:**
- **Instance Example:**
  ```
  Q1 intc intb 0 defaultmod
  ```
  - No specific model parameters are required.
- **Default Model Definition:**
  ```
  .model defaultmod npn
  ```

---

**Key Commands:**
- To view default parameters of a generic transistor instance:
  ```
  showmod <device-name>
  ```
  Example: `showmod Q1`

**Important Notes:**
- Devices like resistors and capacitors only require a single value (e.g., resistance, capacitance) and no `.model` line.
- For BJTs, the **model name (`BC546B`)** links the transistor instance to its model parameters.

**Simplified Usage Without Manufacturer Parameters:**
- Default models allow for quick testing by using generic parameters, which do not resemble specific commercial devices.

---

**Complex Example Explanation (Bipolar Amplifier):**
- Example Netlist:
  ```
  R3 vcc intc 10k
  R1 vcc intb 68k
  R2 intb 0 10k
  Cout out intc 10u
  Cin intb in 10u
  RLoad out 0 100k
  Q1 intc intb 0 BC546B
  VCC vcc 0 5
  Vin in 0 dc 0 ac 1 sin(0 1m 500)
  .model BC546B npn (IS=7.59E-15 VAF=73.4 BF=480 IKF=0.0962 ...)
  .end
  ```
  Explanation:
  - Resistors `R1`, `R2`, `R3`, and `RLoad` are defined with resistance values.
  - Capacitors `Cin` and `Cout` are connected with specified capacitance values.
  - `Q1` is a BJT instance connected to nodes `intc`, `intb`, and `0`, using the model `BC546B`.
  - `Vin` and `VCC` define input and power supply sources respectively.
  - Model parameters for `BC546B` define the transistor’s electrical behavior.

**Conclusion:** The netlist defines the circuit structure and components (including their nodes, values, and model names). Understanding instance lines and model definitions is crucial for modeling, debugging, or modifying circuits in Ngspice.
### Summary: Parallel Multiplier (`m`) in Ngspice 

**Purpose:**
The `m` parameter is used to simulate multiple parallel devices of the same type efficiently by scaling the element's matrix stamp. This avoids manually creating numerous instances in the netlist.

---

**Syntax and Example:**
```plaintext
Component_Name Node1 Node2 Model_Name m=<value>
```

Example with Diodes:
```plaintext
d1 2 0 mydiode m=10
```
Equivalent representation:
```plaintext
d01 1 0 mydiode  
d02 1 0 mydiode  
...  
d10 1 0 mydiode
```

Here, `d1` (m=10) between nodes 2 and 0 is mathematically equivalent to ten parallel diodes (`d01-d10`) between nodes 1 and 0.

---

**Default Devices Supporting '`m`' Parameter:**  
(Table 3.1)  

| **Element Prefix** | **Description**                                        |
|---------------------|--------------------------------------------------------|
| C                   | Capacitor                                              |
| D                   | Diode                                                  |
| F                   | Current-controlled current source (CCCs)               |
| G                   | Voltage-controlled current source (VCCS)               |
| I                   | Current source                                         |
| J                   | Junction field effect transistor (JFET)                |
| L                   | Inductor                                               |
| M                   | MOSFET                                                 |
| Q                   | Bipolar junction transistor (BJT)                      |
| R                   | Resistor                                               |
| X                   | Subcircuit                                             |
| Z                   | Metal semiconductor field effect transistor (MESFET)   |

---

**Using `m` in Subcircuits:**
When used with `X` (subcircuit instance), parallel multiplier `m` propagates to supported components inside the subcircuit. The multiplication applies recursively if nested subcircuits are involved.

Example with Parameterized Multiplication:
```plaintext
.param madd = 6
X1 a b sub1 m=5
.subckt sub1 a1 b1
   Cs1 a1 b1 C=5p m='madd-2'  
.ends
```
**Result:**  
Capacitance between nodes `a` and `b`:  
C = 5pF × (madd - 2) × 5 = **100pF**

Recursive Example:
```plaintext
.param madd = 4
X1 a b sub1 m=3
.subckt sub1 a1 b1
   X2 a1 b1 sub2 m='madd-2'  
.ends
.subckt sub2 a2 b2
   Cs2 a2 b2 C=3p m=2  
.ends
```
**Result:**   
Capacitance between nodes `a` and `b`:  
C = 3pF × 2 × (madd - 2) × 3 = **36pF**

---

**Important Notes:**
1. Using `m` for real devices (e.g., MOS transistors) may fail to account for geometrical scaling and edge effects.  
   - Example difference:  
     ```plaintext
     M1 d g s nmos W=0.3u L=0.18u m=20
     M1 d g s nmos W=6u L=0.18u
     ```
     The wide transistor (`W=6u`) overcomes small width effects better than `m=20`.

---

**Key Takeaways for Netlist Generation/Debugging:**
1. Use `m` for efficient parallel device instantiation when theoretical equivalence suffices.  
2. Carefully verify physical characteristics (e.g., MOSFETs) to avoid misrepresentation.  
3. Recursive subcircuit usage amplifies multiplier effects.  
4. Utilize parameter expressions for dynamic multiplier adjustments (e.g., `'madd-2'`).
- **Instance Parameters**: These are parameters specific to a device instance and are defined directly on the device line. They can also be included in the `.model` line but can be overridden for a particular device instance on its instance line.

- **Model Parameters**: Found in the `.model` line and describe the characteristics of the model being used by devices. Complex models may have over 100 parameters, e.g., transistor models.

- **Device Line Syntax (Instance)**:  
  `DeviceName Node1 Node2 [Value] ModelName [InstanceParam=Value]`  
  **Example**: `Lload 1 2 1u ind1 dtemp=5`  
  - `Lload`: Inductor (device type inferred from the first letter, `L`)
  - `1, 2`: Connected nodes
  - `1u`: Inductance value
  - `ind1`: Name of associated model
  - `dtemp=5`: Instance parameter (temperature difference)

- **Model Line Syntax**:  
  `.MODEL ModelName ModelType [ModelParameters]`  
  **Example**: `.MODEL ind1 L tc1=0.001`  
  - `ind1`: Model name
  - `L`: Model type (inductor)
  - `tc1=0.001`: Model parameter (temperature coefficient)

- **Parameter Behavior**:  
  - Parameters in `.model` are shared by all instances referencing that model unless overridden on the instance line.  
  - Instance parameters override model parameters for specific devices.


**Summary:**

**Model Binning**  
Binning partitions geometry-dependent models (e.g., MOSFETs) into segments based on Width (W) and Length (L), offering greater accuracy over larger geometry ranges than built-in formulas. Each range employs parameters: **LMIN**, **LMAX**, **WMIN**, and **WMAX**, with specific model cards identified using a numerical extension (e.g., `nch.1`).  
Ngspice uses an algorithm to select the appropriate model card based on requested values of W and L.  
Applicable to **BSIM3** (section *7.6.3.3*) and **BSIM4** (section *7.6.3.4*) models.
**Summary of Ngspice Manual Section 3.2.4: Initial Conditions**

1. **Device Initial Conditions for DC Convergence:**
   - **Purpose:** Enhances DC convergence in circuits with multiple stable states.
   - **Usage:**
     - Specify a device as `OFF` to set terminal voltages of the device to zero initially.
     - After convergence, Ngspice iterates to compute the exact terminal voltages.
     - `OFF` can be used to enforce convergence to a desired DC state.
     - If the device is truly conducting (despite being defined `OFF`), correct solutions are still computed, though more iterations may be required.

2. **Alternative DC Convergence Aid:**
   - **.NODESET:** Control line serving a similar purpose to `OFF`. Described in Chapter 11.2.1.
   - **Preferred Method:** `.NODESET` is easier to apply and should generally be used instead of `OFF`.

3. **Initial Conditions for Transient Analysis:**
   - True initial conditions for transient analysis, distinct from DC convergence aids.
   - Refer to `.IC` and `.TRAN` control lines for transient analysis initial condition details:
     - `.IC` Control Line (Chapter 11.2.2).
     - `.TRAN` Control Line (Chapter 11.3.10).
The provided text "3.2 General options" is too vague and lacks specific content related to netlist code generation, syntax, or command details. Kindly provide a more detailed excerpt to extract meaningful, targeted information.
**Summary of Ngspice Inductor Component (3.3.10 Inductors):**

- **General Syntax:**  
  `LYYYYYYY n+ n- <value> <mname> <nt=val> <m=val> + <scale=val> <temp=val> <dtemp=val> <tc1=val> <tc2=val> <ic=init_condition>`

- **Nodes:**  
  `n+` - Positive node.  
  `n-` - Negative node.

- **Parameters:**  
  `value` – Inductance in Henry (H).  
  `IC` – Initial current through the inductor (in Amps, effective if `.tran` has the `UIC` option).  
  `nt` – Number of turns (used with `.model` line).  
  `scale` – Scaling factor for inductance value.  
  `temp` – Operating temperature (used for temperature-dependent models).  
  `dtemp` – Temperature shift relative to the nominal value.  
  `tc1`, `tc2` – Temperature coefficients.

- **Temperature Dependence:**  
  Specify temperature-dependence parameters (`tc1`, `tc2`, etc.) in a `.model` declaration. For instance:  
  `.MODEL ind1 L tc1=0.001`

- **Nominal Inductance Calculation:**  
  `Lnom = value × scale × m`

- **Examples:**  
  Basic declaration:  
  `LLINK 42 69 1UH` – Inductor of 1 micro-Henry between nodes 42 and 69.  
  
  With initial current condition:  
  `LSHUNT 23 51 10U IC=15.7MA` – 10 micro-Henry inductor with an initial current of 15.7 mA.  
  
  Using a `.model` line:  
  ```
  L1 15 5 indmod1
  L2 2 7 indmod1
  .model indmod1 L ind=3n
  ```
  Both inductors have an inductance of 3 nH (nanohenry).  
  
  Temperature dependence example:  
  ```
  Lload 1 2 1u ind1 dtemp=5
  .MODEL ind1 L tc1=0.001
  ```

- **Initial Conditions:**  
  The initial current value applies only if the `UIC` option is specified in the `.tran` analysis line.  

**Strategic Summary for Inductor Model (Netlist Code Generation/Querying):**

1. **Parameters and Default Values**:
   - `IND`: Model inductance (H), Default: `0`, Example: `1e-3`.
   - `CSECT`: Cross-section (m²), Default: `0`, Example: `1e-6`.
   - `DIA`: Coil diameter (m), Default: `0`, Example: `1e-3`.
   - `LENGTH`: Length (m), Default: `0`, Example: `1e-2`.
   - `TC1`: First order temperature coefficient (H/°C), Default: `0`, Example: `0.001`.
   - `TC2`: Second order temperature coefficient (H/°C²), Default: `0`, Example: `0.0001`.
   - `TNOM`: Parameter measurement temperature (°C), Default: `27`, Example: `50`.
   - `NT`: Number of turns (-), Default: `0`, Example: `10`.
   - `MU`: Relative magnetic permeability (-), Default: `1`.

2. **Inductance Calculation** (Formulas and Dependencies):
   - Instance line `value` specified:
     `L_nom = value * scale_m`
   - Model inductance `IND` specified:
     `L_nom = IND * scale_m`
   - Geometrical/Physical parameters used when neither `value` nor `IND` are specified:
     - If `LENGTH` ≠ 0:
       - If `DIA` is specified:
         `L_nom = MU * μ0 * NT² * π * DIA² / (4 * LENGTH)`
       - Otherwise:
         `L_nom = MU * μ0 * NT² * CSECT / LENGTH`

   - Constants:
     - Magnetic constant: `μ0 = 1.25663706143592 µH/m`.
     - `DIA` takes precedence over `CSECT`.

   - Geometry correction factor `kl` applied per Lundin's correction (used for accurate modeling when diameter and length are of similar magnitude).

3. **Temperature Adjustment**:
   - Adjusted inductance:
     `L(T) = L(TNOM) * (1 + TC1 * (T - TNOM) + TC2 * (T - TNOM)²)`,
     where,
     `L(TNOM) = L_nom`.

   - `T`: Instance temperature, explicitly set using `temp` or derived from circuit temperature and `dtemp`.

4. **Key Notes**:
   - Instance parameters override model parameters (`NT` applies to both).
   - `L_nom` is derived by prioritizing physical (`IND`) or geometrical parameters (`DIA`, `CSECT`).
   - Temperature coefficients (`TC1`, `TC2`) account for temperature-dependent variations.

5. **Missing Database Knowledge**:
   - Explicit geometry correction (`Lundin factor`).
   - Magnetic constant for computations: `μ0 = 1.25663706143592 µH/m`.
   - Explicit precedence of `DIA` over `CSECT`.

This condensed information is essential for inductor-related netlist creation, modification, debugging, and theoretical model explanations.
**Summarized Information:**

**Component: Coupled (Mutual) Inductors**

**General Form:**  
`KXXXXXXX LYYYYYYY LZZZZZZZ value`

- `LYYYYYYY` and `LZZZZZZZ` are the names of coupled inductors.  
- `value` is the coupling coefficient \( K \), where \( 0 < K \leq 1 \).  

**Key Notes:**  
- The `dot` convention for coupled inductors places a `dot` at the first node of each inductor.  
- Pairwise coupling is allowed for more than 2 inductors. 

**Example Code (Pairwise coupling):**  
```
L1 1 0  10u  
L2 2 0  11u  
L3 3 0  10u  
K12 L1 L2 0.99  
K23 L2 L3 0.99  
K13 L1 L3 0.98  
```
> Note: Physically impossible coupling combinations are flagged by `ngspice`.

**Coupling of More than Two Inductors in a Single Statement:**  
- All coupling constants are equal.
  
**Example Code (Multi-inductor statement):**  
```
L1 1 0  10u  
L2 2 0  11u  
L3 3 0  10u  
K123 L1 L2 L3 0.97  
```

---

**Theoretical Characteristics:**
- Coupling coefficient \( K \) should satisfy \( 0 < K \leq 1 \).  
- Proper coupling constants must conserve energy; non-physical configurations are flagged by `ngspice`.
- **Behavioral Inductor Syntax**:  
  - General Form:
    ```
    LXXXXXXX n+ n- L = 'expression' <tc1=value> <tc2=value>
    LXXXXXXX n+ n- 'expression' <tc1=value> <tc2=value>
    ```
    - `n+` and `n-`: Positive and negative nodes.  
    - `L = 'expression'`: Expression defines inductance, can depend on node voltages, branch currents, or special variables like `time`, `temper`, and `hertz`.
    - `<tc1=value>` `<tc2=value>`: Optional temperature coefficients.

- **Allowed Variables and Parameters**:  
  - Expressions can include node voltages, branch currents (`i(Vsource)`), time (`time`), temperature (`temper`), frequency (`hertz`), and user-defined parameters.

- **Example Behavioral Inductor Code**:  
   ```
   .param Ll=0.5m Lh=5m It=50u Vi=2m
   .ic v(int21) = 0
   * Behavioral inductor based on control current i(Vm)
   L1 l2 lll L = 'i(Vm) < {It} ? {Ll} : {Lh}'
   * Fixed inductor setup
   L3 33 331 {Ll}
   * Non-linear inductor (discrete/model-based setup)
   F21 int21 0 B21 -1
   L21 int21 0 1
   B21 n1 n2 V = '(i(Vm21) < {It} ? {Ll} : {Lh})' * v(int21)
   ```

- **Key Notes on Example**:  
  - The inductor `L1` changes inductance (`Ll` or `Lh`) based on the control current `i(Vm)` compared to a threshold `It`.  
  - Fixed inductor `L3` always uses the value of `Ll`.  
  - Non-linear inductor (`L21` + `B21`) mimics behavior using equations at `v(int21)`.

- **Commands for Analysis**:  
   ```
   .control
   unset askquit
   tran 1u 100u uic
   plot i(Vm) i(vm33)
   plot i(vm21) i(vm33)
   plot i(vm)-i(vm21)
   .endc
   ```

This defines transient analysis (`tran`) and plotting commands for comparing currents through different inductors.
**Capacitor or Inductor with Initial Conditions**

1. **Purpose**: Ngspice supports specifying voltage or current initial conditions for capacitors and inductors, respectively, using special code models. These models differ from the standard SPICE3 models and can be used when realistic initial conditions are required.

2. **Capacitor Syntax**:
   - `a<name> <node+> <node-> cap`
   - `.model <model_name> capacitoric (c=<capacitance> ic=<initial_voltage>)`
   - Example:
     ```
     a1 1 0 cap
     .model cap capacitoric (c=1000uf ic=1)
     ```

3. **Inductor Syntax**:
   - `a<name> <node+> <node-> ind`
   - `.model <model_name> inductoric (l=<inductance> ic=<initial_current>)`
   - Example:
     ```
     a2 2 0 ind
     .model ind inductoric (l=1H ic=1)
     ```

4. **Theoretical Behavior**:
   - Realistic initial conditions are simulated with an **exponential decay** occurring with a predefined time constant, e.g., 1-second in the example.

5. **Resistors for Decay**:
   - Parallel resistors are added to the capacitor and inductor to implement the exponential decay. Example:
     ```
     r1 1 0 1k
     r2 2 0 1.0
     ```

6. **Example Circuit and Simulation**:
   ```
   a1 1 0 cap
   .model cap capacitoric (c=1000uf ic=1)
   r1 1 0 1k
   a2 2 0 ind
   .model ind inductoric (l=1H ic=1)
   r2 2 0 1.0
   .control
   tran 0.01 3
   plot v(1) v(2)
   .endc
   .end
   ```

7. **Commands used**:
   - `tran <time_step> <end_time>`: Executes transient analysis.
   - `plot <nodes>`: Plots node voltages.

**Key Notes**:
- Use "capacitoric" and "inductoric" models instead of standard SPICE3 models for realistic initial condition modeling.
- `.model` lines define the component (`c` for capacitance or `l` for inductance) and the initial condition (`ic`).
**Summary for Netlist Code Use, Debugging, and Queries:**

**Switches Overview:**
- Two types:  
  1. **Voltage-controlled switch**: "SXXXXXXX" (model: SW).  
  2. **Current-controlled switch**: "WXXXXXXX" (model: CSW).  

- Key characteristics:
  - **Hysteresis** can be defined (ON or OFF state based on controlling signal range).
  - **Resistance**: On-resistance (`R_on`) and off-resistance (`R_off`) must satisfy \(0 < R < \infty\).

**General Syntax:**
1. **Voltage-controlled switch**:  
   `SXXXXXXX N+ N- NC+ NC- MODEL <ON><OFF>`  
   - `N+`, `N-`: Termination nodes.  
   - `NC+`, `NC-`: Positive and negative nodes for controlling voltage signal.  
   - `MODEL`: Mandatory model for the switch.  
   - `<ON>/<OFF>` (optional): Initial state when control signal is in hysteresis range.

2. **Current-controlled switch**:  
   `WYYYYYYY N+ N- VNAM MODEL <ON><OFF>`  
   - `N+`, `N-`: Termination nodes.  
   - `VNAM`: Voltage source controlling the current through it.  
   - `MODEL`: Mandatory model for the switch.  
   - `<ON>/<OFF>` (optional): Initial state when control current is in hysteresis range.

**Key Details:**
- Voltage-controlled switches:
  - Control depends on the voltage between `NC+` and `NC-`.
- Current-controlled switches:
  - Control depends on the current flowing through the specified voltage source (`VNAM`).
  - Positive current flows from the positive terminal, through the source, to the negative terminal.

**Examples:**
1. **Voltage-controlled:**
   ```
   s1 1 2 3 4 switch1 ON
   s2 5 6 3 0 sm2 OFF
   ```

2. **Current-controlled:**
   ```
   w1 1 2 vclock switchmod1
   W2 3 0 vramp sm1 ON
   wreset 5 6 vclck lossyswitch OFF
   ```

- **Initial Conditions (`<ON>/<OFF>`):**  
  Necessary if control voltage/current starts within the hysteresis range (determines the initial state of the switch).
**Switch Model (SW/CSW)**

The switch model in Ngspice simulates an almost ideal switch with finite positive resistance. These resistances can be designed to approximate zero (RON) and infinity (ROFF) for practical purposes. Below is the extracted content relevant for netlist design and debugging:

### **Parameters and Default Values**
- **VT (Threshold Voltage)**: Controls switching. Default = 0.0 V (SW model).
- **IT (Threshold Current)**: Controls switching. Default = 0.0 A (CSW model).
- **VH (Hysteresis Voltage)**: Adds hysteresis to switching. Default = 0.0 V (SW model).
- **IH (Hysteresis Current)**: Adds hysteresis to switching. Default = 0.0 A (CSW model).
- **RON (On Resistance)**: Switch resistance when ON. Default = 1.0 Ω (both models).
- **ROFF (Off Resistance)**: Switch resistance when OFF. Default = 1.0e+12 Ω or `1/GMIN` (both models).
  - GMIN is adjustable in `OPTIONS` (Section 11.1.2).

### **Usage and Optimization Guidelines**
1. Avoid extremely high or low RON/ROFF values, as they can cause numerical issues (e.g., discontinuities or time step problems).
2. For ROFF/RON ratios > 1e12:
   - Reduce **TRTOL** (default 7.0) using `.OPTIONS`.
   - Use `CHGTOL` < 1e-16 when switches are near capacitors.
3. Match RON realistically to model real devices like MOSFETs.

### **Example Input File Highlights**
```plaintext
* Instantiation of voltage-controlled switches
s1 10 0 1 0 switch1 OFF
s2 20 0 2 0 switch1 OFF
s3 30 0 2 0 switch1 ON
.model switch1 sw vt=1 vh=0.2 ron=1 roff=10k

* Instantiation of current-controlled switch
w1 40 0 vm3 wswitch1 OFF
.model wswitch1 csw it=1m ih=0.2m ron=1 roff=10k
```

### **Key Observations**
- Switches `s1`, `s2`, `s3`: Voltage-controlled using `SW` model with VT and VH parameters to establish hysteresis. On and off resistances are set via `RON` and `ROFF`.
- Switch `w1`: Current-controlled using `CSW` model with IT and IH to handle hysteresis.
- Hysteresis loops and initial conditions are analyzed in `.control` using `PLOT` commands.

### **Control Commands for Debugging**
```plaintext
.control
run
plot v(1) v(10)           $ Voltage across the first switch
plot v(10) vs v(1)       $ Hysteresis loop of first switch
plot v(40) vs vm3#branch $ Current-controlled switch hysteresis
.endc
```

### **Additional Notes**
- Ensure consistency by aligning parameters with physical models to avoid numerical issues during simulation.
- Recommended `.OPTIONS`:
  - **TRTOL** < 7.0 (e.g., **TRTOL=1.0**).
  - **CHGTOL** < 1e-16 when dealing with capacitors near switches.
### Resistors in Ngspice

#### General Form:
`RXXXXXXX n+ n- <resistance|r=>value <ac=val> <m=val> <scale=val> <temp=val> <dtemp=val> <tc1=val> <tc2=val> <noisy=0|1>`

- **`n+` and `n-`:** Two element nodes.
- **`value`:** Resistance (in ohms), can be positive or negative (*not zero; avoid negative resistances due to convergence issues*).
- **Optional Parameters:**
  - **`ac`:** AC resistance for AC analysis only (default is `value` if not specified).
  - **`m`:** Multiplier for scaling resistance.
  - **`scale`:** Scale factor for the nominal resistance.
  - **`temp`/`dtemp`:** Explicit temperature or temperature offset.
  - **`tc1`/`tc2`:** Temperature coefficients (quadratic dependency).
  - **`noisy`:** `0` to suppress noise generation.

#### Resistance Value Constraints:
- If resistance is very small (≤ 0.001 Ohm), use **CCVS (transresistance)** for better numerical accuracy.
- AC resistance (`ac`) must not be zero.

#### Temperature Dependence:
Resistance can have temperature-dependent behavior:
1. **Instance Parameters:** `tc1` and `tc2` (overrides model values if provided per resistor instance).
2. **Model Line:**
   - Example: `.MODEL newres R tc1=0.001`
3. **Exponential Temperature Dependence:**
   - If `tce` is provided:
     `R(T) = R(T₀) [1 + TCE * (T - T₀)]`
   - Choose between quadratic (`tc1`, `tc2`) or exponential (`tce`) model based on availability.

#### Noise Characteristics:
1. **Thermal Noise:** Always present, depends on absolute temperature.
2. **Flicker Noise (e.g., for carbon resistors):** Add using `.MODEL` card with flicker noise parameters.
3. **Noise Suppression:** Use `noisy=0` to suppress all noise sources (thermal and flicker).

#### Examples:
1. **Basic Resistor:**
   `R1 1 2 100`
2. **AC Resistance:**
   `R2 5 7 1K ac=2K`
3. **Temperature Dependent Resistor:**
   - `RE1 1 2 800 newres dtemp=5`
   - Model: `.MODEL newres R tc1=0.001`
4. **Noise-Free Resistor:**
   `Rmd 134 57 1.5k noisy=0`

#### Notes:
- **Small Resistors Simulation:** Use large conductance for efficiency.
- **Temperature Effects:** Relevant for thermal noise, even if resistance doesn’t change with temperature.

This section emphasizes resistor modeling, temperature dependency, noise suppression, and handling small resistance values for accurate simulations.
**Summary for Netlist Code/Command Usage:**

**Semiconductor Resistors Syntax:**
```
RXXXXXXX n+ n- <value> <mname> <l=length> <w=width>
+ <temp=val> <dtemp=val> <m=val> <ac=val> <scale=val> <noisy=0|1>
```

**Key Usage Details:**
1. **`n+` and `n-`**: The two nodes to which the resistor is connected.
2. **`value`**: Directly specifies the resistance value. Overrides geometric and model-based calculations.
3. **`mname`**: Specifies a model for a process-based resistor calculation.
4. **`l` and `w` (length and width)**:
   - Required to calculate resistance if `value` is not provided.
   - If `width` is omitted, it uses the model's default width.
5. **Optional parameters**:
   - `temp=val`: Operating temperature for this resistor (overrides `.option` or `dtemp`).
   - `dtemp=val`: Temperature difference from the default.
   - `m=val`: Multiplier for instance count.
   - `ac=val`: AC value for small-signal analysis.
   - `scale=val`: Scaling factor.
   - `noisy=0|1`: Enable/Disable noise contribution.

**Theoretical Notes:**
- If `value` is provided, it takes precedence and the geometric (`l`, `w`) and process (`mname`) details are ignored.
- If `value` is omitted, both `mname` and `length` must be specified for resistance calculation.

**Examples:**
1. `RLOAD 2 10 10K` (Fixed resistance of 10kΩ).
2. `RMOD 3 7 RMODEL L=10u W=1u` (Resistance calculated based on a given model `RMODEL`, length `10u` and width `1u`).


**Ngspice Semiconductor Resistor Model (R): Summary for Netlist Code Generation/Modification, Debugging, and Queries**

1. **Parameters and Syntax for Resistor Model:**
   - **TC1**: First-order temperature coefficient (default: 0.0 Ω/°C).
   - **TC2**: Second-order temperature coefficient (default: 0.0 Ω/°C²).
   - **RSH**: Sheet resistance (Ω/□), no default, example: 50 Ω/□.
   - **DEFW**: Default width (default: 1e-6 m, example: 2e-6 m).
   - **NARROW**: Narrowing due to side etching (default: 0.0 m).
   - **SHORT**: Shortening due to side etching (default: 0.0 m).
   - **TNOM**: Parameter measurement temperature (default: 27°C).
   - **KF**: Flicker noise coefficient (default: 0.0, example: 1e-25).
   - **AF**: Flicker noise exponent (default: 0.0, example: 1.0).
   - **WF**: Flicker noise width exponent (default: 1.0).
   - **LF**: Flicker noise length exponent (default: 1.0).
   - **EF**: Flicker noise frequency exponent (default: 1.0).
   - **R (RES)**: Default resistance value if element value is not specified, example: 1000 Ω.

2. **Formula: Nominal Resistance Calculation**
   - **Nominal Resistance (R_nom):** 
     \( R_{nom} = R_{sh} \frac{l - SHORT}{w - NARROW} \)
     - Default resistance value: 1 mΩ if `RSH` or `l` is not defined.
     - `DEFW` used as default \( w \) if unspecified.

3. **Formula: Temperature Compensation**
   - **Adjusted Resistance (R(T)):**
     \( R(T) = R(T_{nom})(1 + TC1(T - T_{nom}) + TC2(T - T_{nom})^2) \)
     - Instance temperature \( T \) defined via `temp` keyword.
     - If both `temp` and `dtemp` are specified, `dtemp` is ignored.

4. **Noise Modeling:**
   - **Thermal Noise in Resistors**:
     \( i_{R}^2 = 4kTR\Delta f \)
     - \( k \): Boltzmann constant.
     - \( T \): Instance temperature.
   - **Flicker Noise (1/f):**
     \( i_{Rf}^2 = KF \cdot I_{R}^{AF} \cdot W^{WF} \cdot L^{LF} \cdot f^{EF} \Delta f \)
   - `noisy` keyword for default noise modeling; `noise` for noiseless simulation.

5. **Typical Sheet Resistance Values for Processes (Ω/□):**
   - **Inter-metal (metal1 - metal2)**: Min. 0.005, Typ. 0.007, Max. 0.1.
   - **Top-metal (metal3)**: Min. 0.003, Typ. 0.004, Max. 0.05.
   - **Polysilicon (poly)**: Min. 15, Typ. 20, Max. 30.
   - **Silicide**: Min. 2, Typ. 3, Max. 6.
   - **Diffusion (n+, p+)**: Min. 10, Typ. 25, Max. 100.
   - **Silicided diffusion**: Min. 2, Typ. 4, Max. 10.
   - **n-well**: Min. 1000, Typ. 2000, Max. 5000.

This compilation offers critical data and formulas for coding, modeling, and debugging semiconductor resistor components in Ngspice.
### Summary of Behavioral Resistors (Ngspice)

#### General Form:
1. **Behavioral Resistor Syntax**:
   ```
   RXXXXXXX n+ n- R = 'expression' <tc1=value> <tc2=value> <noisy=0>
   RXXXXXXX n+ n- 'expression' <tc1=value> <tc2=value> <noisy=0>
   ```
   - `n+ n-`: Nodes between which the resistor is connected.
   - `expression`: Specifies resistance value dependent on a mathematical expression.
   - `<tc1>` and `<tc2>`: Temperature coefficients for resistance.
   - `<noisy>`: Use `noisy=1` to enable noise calculation. Default is `noisy=0` (noiseless).

#### Default Characteristics:
- The behavioral resistor is **noiseless by default** (`noisy=0`).
- Noise evaluation uses **white noise** depending on resistance, temperature, and temperature coefficients (`tc1`, `tc2`).

#### Expression Features:
- Expressions may include:
  - **Node voltages**.
  - **Branch currents** in the form `i(vm)`.
  - **Parameters** (e.g., `.param`) and special variables like `time`, `temper`, `hertz`.
  - Similar syntax to B-sources (see Chapter 5.1).
- Expressions allow advanced behavioral dependencies (e.g., threshold-based, temperature-based, etc.).

#### Key Examples:
1. **Threshold-based Resistance Control**:
   ```
   R1 rr 0 r = 'V(rr) < {Vt} ? {R0} : {2*R0}' tc1=2e-03 tc2=3.3e-06
   ```
   - Resistance = `{R0}` if `V(rr) < {Vt}`, otherwise = `{2*R0}`.
   - Includes temperature coefficients `tc1` and `tc2`.

2. **Temperature-dependent Resistance**:
   ```
   R2 r2 rr r = {5k + 50*TEMPER}
   ```
   - Resistance increases linearly with temperature (`TEMPER`).

3. **Parameterized Resistor**:
   ```
   .param rp1 = 20
   R3 no1 no2 r = '5k * rp1' noisy=1
   ```
   - Resistance proportional to parameter `rp1` with noise enabled (`noisy=1`).

#### Non-linear Resistor Example Input File:
```
.param R0=1k Vi=1 Vt=0.5
* resistor depending on control voltage V(rr)
R1 rr 0 r = 'V(rr) < {Vt} ? {R0} : {2*R0}'
* control voltage
V1 rr 0 PWL(0 0 100u {Vi})
.control
unset askquit
tran 100n 100u uic
plot i(V1)
.endc
.end
```
- `R1`: Behavior depends on control voltage `V(rr)`.
- `V1`: Voltage source with piece-wise linear (PWL) control voltage `Vi`.
- `.control` defines the transient analysis (`tran 100n 100u uic`) and current plotting (`plot i(V1)`).

This section provides syntax and usage guidance for implementing behavioral resistors in netlists, including expressions for dynamic resistance calculation, temperature effects, and small-signal noise modeling.
Resistor with Nonlinear `r2_cmc` or `r3_cmc` Models:  

These 2-terminal resistor models are developed by the resistor subcommittee of the CMC and are made accessible through the OSDI interface by loading OpenVAF-compiled Verilog-A models. These models aim to provide:  
- Standard 2-terminal resistor models.  
- Standardized parameter names.  
- Numerically stable nonlinearity behavior.  

For more details on implementation, refer to Chapter 9.2 of the Ngspice manual.
**3.3.6 Capacitors**

**General Form (syntax):**  
`CXXXXXXX n+ n- <value> <mname> <m=val> <scale=val> <temp=val> + <dtemp=val> <tc1=val> <tc2=val> <ic=init_condition>`

**Key Details:**  
- **n+** and **n-** are the positive and negative nodes.  
- **value** specifies the capacitance in Farads.  
- Capacitance can be defined directly in the instance line or through a `.model` definition.

**Examples:**  
- Instance definition:  
  `CBYP 13 0 1UF`  
  `COSC 17 23 10U IC=3V`  

- Using `.model` for capacitance:  
  ```
  C1 15 5 cstd  
  C2 2 7 cstd  
  .model cstd C cap=3n
  ```
  Both have capacitance = 3nF.

- Temperature-dependent capacitance:  
  ```
  CEB 1 2 1u cap1 dtemp=5  
  .MODEL cap1 C tc1=0.001
  ```
  - `tc1`, `tc2`: Temperature coefficients for quadratic temperature dependence (overrides model’s values if specified in the instance line).  

**Initial Conditions:**  
- Optional `IC=` specifies initial voltage (in Volts).  
- Initial conditions apply only if the `.tran` control line includes the `uic` option.

**Capacitance Calculation:**  
`C_nom = value ⋅ scale ⋅ m`  

**Temperature Coefficients:**  
- `tc1` and `tc2` define quadratic temperature dependence (equation 83).  
- Instance line coefficients override `.model` coefficients.


Semiconductor Capacitors (Ngspice Manual 3.3.7)

**General Syntax:**
`CXXXXXXX n+ n- <value> <mname> <l=length> <w=width> <m=val> + <scale=val> <temp=val> <dtemp=val> <ic=init_condition>`

**Key Parameters:**
- `value`: Directly defines the capacitance; overrides process and geometrical information.
- `mname`: Specifies the model for capacitance computation when `value` is not provided.
- `l (length)` and `w (width)`: Geometrical parameters for capacitance calculation using the model.
- Optional: `m`, `scale`, `temp`, `dtemp`, `ic` for additional configuration.

**Characteristics:**
- If `value` is provided, the capacitor behaves as a fixed capacitance ignoring geometry or process model.
- If `value` is omitted, the capacitance is computed using `mname` and geometrical dimensions (`l` and `w`) based on the model definition.

**Examples:**
1. `CLOAD 2 10 10P` - Simple capacitor with fixed 10pF capacitance.
2. `CMOD 3 7 CMODEL L=10u W=1u` - Capacitance derived from the `CMODEL` model with given length (10 µm) and width (1 µm). 

**Notes:**
- For models where geometry is not provided (`l` and `w` omitted), the capacitance can be solely defined in the `.model` statement.

### Extracted Summary for Netlist Code Generation, Modification, Debugging, and Queries:

#### Semiconductor Capacitor Model (C) Overview:
The capacitor model computes capacitance either from defined parameters or geometric/physical information.

---

#### **Key Parameters for .model Statement**:

| **Name**   | **Parameter Description**          | **Units** | **Default Value** | **Example Value** |
|------------|------------------------------------|-----------|-------------------|-------------------|
| **CAP**    | Model capacitance                 | F         | 0.0               | 1e-06            |
| **CJ**     | Junction bottom capacitance       | F/m²      | Not specified     | 5e-05            |
| **CJSW**   | Junction sidewall capacitance     | F/m       | Not specified     | 2e-11            |
| **DEFW**   | Default device width              | m         | 1e-6              | 2e-06            |
| **DEFL**   | Default device length             | m         | 0.0               | 1e-06            |
| **NARROW** | Narrowing due to side etching     | m         | 0.0               | 1e-07            |
| **SHORT**  | Shortening due to side etching    | m         | 0.0               | 1e-07            |
| **TC1**    | First-order temperature coeff.    | F/°C      | 0.0               | 0.001            |
| **TC2**    | Second-order temperature coeff.   | F/°C²     | 0.0               | 0.0001           |
| **TNOM**   | Parameter measurement temperature | °C        | 27                | 50               |
| **DI**     | Relative dielectric constant      | F/m       | Not specified     | 1                |
| **THICK**  | Insulator thickness               | m         | 0.0               | 1e-09            |

---

#### **Key Computation Formulas**:

1. **Nominal Capacitance (C_nom):**
   - If instance value is specified:  
     `C_nom = value × scale × m`
   - If model capacitance CAP is specified:  
     `C_nom = CAP × scale × m`
   - If neither is specified:  
     ```
     C₀ = CJ × (l - SHORT) × (w - NARROW)  
          + 2 × CJSW × (l - SHORT + w - NARROW)
     ```

2. **Junction Bottom Capacitance (CJ):**
   - If `THICK ≠ 0`:  
     `CJ = DI × ε₀ / THICK` (if DI is specified)  
     `CJ = ε_SiO2 / THICK` (otherwise)  

   - Constants:  
     `ε₀ = 8.854214871e-12 F/m`  
     `ε_SiO2 = 3.4531479969e-11 F/m`

3. **Adjusted Capacitance for Temperature:**
   - Based on instance temperature `T`:  
     ```
     C(T) = C(TNOM) × [1 + TC1 × (T - TNOM) + TC2 × (T - TNOM)²]
     ```

   - Where:  
     `C(TNOM) = C_nom`  
     `T` can be set using `temp` or circuit temperature adjusted by `dtemp`.

---

#### **Additional Notes**:
- `THICK = 0` results in a fallback to default dielectric constant (`ε_SiO2`).
- `CJ`, `CJSW`, or geometric parameters must be provided or calculated based on conditions outlined above.
- Instance-wide temperature values (`T`) can either:
    - Be explicitly defined with the `temp` keyword.
    - Inherit from the circuit temperature with optional `dtemp` adjustments.
**Summary: Behavioral Capacitor in Ngspice**

1. **Syntax and Definitions**:  
   Behavioral capacitors depend on expressions for capacitance (C) or charge (Q). General forms:  
   - `CXXXXXXX n+ n- C = 'expression' <tc1=value> <tc2=value>`
   - `CXXXXXXX n+ n- 'expression' <tc1=value> <tc2=value>`
   - `CXXXXXXX n+ n- Q = 'expression' <tc1=value> <tc2=value>`  

   Expressions can contain parameters, node voltages, branch currents (`i(vm)`), and special variables like:
   - `time`, `temper`, and `hertz`.

2. **Default/Optional Parameters**:
   - Temperature coefficients (`tc1` and `tc2`) are optional.
   - Behavioral expressions use equations involving voltage/current, parameters, or special variables.

3. **Theoretical Characteristics**:
   - Behavioral capacitors allow dynamic changes to capacitance or charge based on node voltage or expressions.
   - Especially useful for simulating non-linear or voltage-dependent capacitance behavior.

4. **Examples**:
   - Capacitance expression based on control voltage:
     `C1 cc 0 c = 'V(cc) < {Vt} ? {C1} : {Ch}' tc1=-1e-03 tc2=1.3e-05`
   - Charge expression:  
     `C1 a b q = '1u*(4*atan(V(a,b)/4)*2+V(a,b))/3'`

5. **Example Netlist File**:  
   Includes components, expressions, and measurement techniques:  
   ```spice
   .param Cl=5n Ch=1n Vt=1m Il=100n
   .ic v(cc) = 0 v(cc2) = 0
   * Capacitor depending on control voltage V(cc)
   C1 cc 0 c = 'V(cc) < {Vt} ? {Cl} : {Ch}'
   I1 0 1 {Il}
   Exxx n1-copy n2 n2 cc2 1
   Cxxx n1-copy n2 1
   Bxxx cc2 n2 I = '(V(cc2) < {Vt} ? {Cl} : {Ch})' * i(Exxx)
   I2 n2 22 {Il}
   vn2 n2 0 DC 0
   * Measure charge by integrating current
   aint1 %id(1 cc) 2 time_count
   aint2 %id(22 cc2) 3 time_count
   .model time_count int(in_offset=0.0 gain=1.0
   + out_lower_limit=-1e12 out_upper_limit=1e12
   + limit_range=1e-9 out_ic=0.0)
   .control
   unset askquit
   tran 100n 100u
   plot v(2)
   plot v(cc) v(cc2)
   .endc
   .end
   ```

**Key Components**:
- `C` and `Q` expressions define capacitor dynamics.
- `tc1`/`tc2` for temperature adjustments.
- `aint` and `.model time_count` for integrated current measurement.

**Important Notes**:
- Behavioral capacitors rely on equations using node voltages (e.g., `V(cc)`), logical expressions, or dependent variables.
- Charge measurement often integrates currents over time (`aint` commands).
- Special syntax enables simulation of complex behaviors such as voltage-controlled capacitance.
### Section: 3.3 Elementary Devices (Ngspice Manual Summary)

**Elementary devices** in Ngspice include basic circuit elements like resistors, capacitors, inductors, coupled inductors, mutual inductances, etc. The nodes, parameters, and key attributes associated with these components are outlined below:

- **Resistor (R)**:  
  Syntax: `Rxxx node1 node2 value`  
  - `value`: Resistance in Ohms.  
  - Can include temperature coefficients (`TC1`, `TC2`).  

- **Capacitor (C)**:  
  Syntax: `Cxxx node1 node2 value`  
  - `value`: Capacitance in Farads.  
  - Optional parameters:  
    - `IC=<initial voltage>`: Initial condition.
    - Models (`.model`) can specify non-linear capacitance.  

- **Inductor (L)**:  
  Syntax: `Lxxx node1 node2 value`  
  - `value`: Inductance in Henrys.  
  - Optional: Specify initial current using `IC=<initial current>`.  

- **Coupled Inductors and Mutual Inductance (K)**:  
  Syntax: `Kxxx L1 L2 ... Lk coupling_factor`  
  - Coupling factor must satisfy `0 < coupling_factor ≤ 1`.  


3 Circuit Elements and Models:

- Fields enclosed in `< >` are optional.
- Punctuation (e.g., parentheses, equal signs) is optional but may become mandatory in future versions. Following the stated punctuation improves clarity.
- For branch voltages and currents, the reference convention is used: current flows in the direction of the voltage drop.
**Summary of 4.1.10 Arbitrary Phase Sources (Ngspice Manual)**

1. **Feature Overview**:  
   - Ngspice allows for defining arbitrary phase shifts for independent sources.  
   - Phase shift is specified in **degrees**, as opposed to using the TD (time delay) parameter found in other SPICE versions.  
   - This phase parameter is appended as the **final parameter** in the source definition.

2. **Usage Syntax**:  
   - Applicable to independent sources such as `sin` and `pulse`.  
   - Example syntax and default details for these waveforms:  

     ```
     v1 <node+> <node-> <dc_value> sin( <vo> <va> <freq> <td> <df> <phase> )
     v2 <node+> <node-> <dc_value> pulse( <v1> <v2> <td> <tr> <tf> <pw> <per> <phase> )
     ```

3. **Theoretical Characteristics**:  
   - **SIN waveform**: `<phase>` specifies the phase offset in degrees at time `t = 0`.  
   - **PULSE waveform**: `<phase>` introduces a phase shift applied across the periodic characteristics of the pulse.

4. **Examples** (with unique/detailed values):  
   - **Sinusoidal Source with Phase Shift** (45°):  
     ```
     v1 1 0 0.0 sin(0 1 1k 0 0 45.0)
     ```
   - **Pulse Source with Phase Shift** (45°):  
     ```
     v2 2 0 0.0 pulse(-1 1 0 1e-5 1e-5 5e-4 1e-3 45.0)
     ```

5. **Practical Notes**:  
   - Phase is included at the end of the source definition in degrees, instead of relying on the TD (time-delay) parameter.  
   - Useful for simulations requiring precise phase alignment or offsets in independent source signals.


4.1.11 RF Port  
- A voltage source (VSRC) can function as an RF Port using specific parameters.  

**Key Parameters:**  
1. **portnum (integer):**  
   - Mandatory to define the VSRC as an RF port.  
   - Must start from 1 and increment consecutively without duplicates.  

2. **Z0 (real):**  
   - Specifies the internal impedance of the RF Port.  
   - Default value: **50 Ohms** if not explicitly defined.  

**Behavior:**  
- When defined as an RF Port, the VSRC has an impedance of Z0 Ohms in series, affecting all simulations.  
- At least two RF Ports are required for S-parameter simulations (using `.sp`).  

**General Syntax:**  
`DC 0 AC 1 portnum n1 <z0 n2>`  

**Example:**  
`V1 in 0 dc 0 ac 1 portnum 1 z0 100`  
- Declares an RF Port with a port number of 1 and an internal impedance of 100 Ohms.  

**Note:**  
- If `portnum` is **not provided**, the VSRC behaves as a standard voltage source.
**Summary of Ngspice "PULSE" Source for Netlist Applications:**

**General Form:**
`PULSE(V1 V2 TD TR TF PW PER NP)`

**Parameter Definitions:**
- **V1:** Initial value (unit: V, A, no default).
- **V2:** Pulsed value (unit: V, A, no default).
- **TD:** Delay time (default: `0.0 sec`).
- **TR:** Rise time (default: `TSTEP`).
- **TF:** Fall time (default: `TSTEP`).
- **PW:** Pulse width (default: `TSTOP`).
- **PER:** Period (default: `TSTOP`).
- **NP:** Number of pulses (default: `unlimited`, setting `0` or omitting it specifies unlimited pulses).
  - Note: In **compatibility mode** (`ngbehavior=xs` in `.spiceinit`), the 8th parameter can specify the **phase of the pulse signal** (measured in degrees). Positive values advance the signal, while negative values introduce delay. 

**Pulse Waveform Characteristics:**
- A single pulse without repetitions follows this timeline:
  - At `0`: Value = `V1`.
  - At `TD`: Value = `V1`.
  - At `TD + TR`: Value = `V2`.
  - At `TD + TR + PW`: Value = `V2`.
  - At `TD + TR + PW + TF`: Value = `V1`.
  - At `TSTOP`: Value = `V1`.
- Linear interpolation is applied for intermediate points.

**Example:**
`VIN 3 0 PULSE(-1 1 2NS 2NS 2NS 50NS 100NS 5)`
- Defines a pulse with:
  - Initial value `-1V`, Pulsed value `1V`.
  - Delay time: `2 ns`, Rise time: `2 ns`, Fall time: `2 ns`.
  - Pulse width: `50 ns`, Period: `100 ns`.
  - Number of pulses: `5`.

Use the above structure and details for **netlist code generation**, **debugging**, or understanding the behavior of PULSE sources.
**Summary for SIN Source in Ngspice:**

1. **General Form:**
   ```
   SIN(VO VA FREQ TD THETA PHASE)
   ```

2. **Parameters Table:**
   | **Name** | **Parameter**      | **Default Value** | **Units**  |
   |----------|--------------------|-------------------|------------|
   | VO       | Offset             | -                 | V, A       |
   | VA       | Amplitude          | -                 | V, A       |
   | FREQ     | Frequency          | 1/TSTOP           | Hz         |
   | TD       | Delay              | 0.0               | sec        |
   | THETA    | Damping factor     | 0.0               | 1/sec      |
   | PHASE    | Phase              | 0.0               | degrees    |

3. **Theoretical Characteristics (Formula):**
   The voltage or current waveform is described by:
   ```
   V(t) = VO, if 0 ≤ t < TD
   V(t) = VO + VA * exp(-(t-TD)*THETA) * sin(2π * FREQ * (t-TD) + PHASE), if TD ≤ t < TSTOP
   ```

4. **Example Syntax:**  
   ```
   VIN 3 0 SIN(0 1 100MEG 1NS 1E10)
   ```
**Summary of Ngspice Manual Section 4.1.3: Exponential Source**

- **General Form**:  
  `EXP(V1 V2 TD1 TAU1 TD2 TAU2)`

- **Description**:
  The exponential source generates a waveform that transitions between two values, shaped by exponential rise and fall characteristics controlled by specific time delay and time constant parameters.

- **Parameters and Defaults**:
  | Parameter | Description            | Default Value   | Units   |
  |-----------|------------------------|-----------------|---------|
  | V1        | Initial value          | -               | V, A    |
  | V2        | Pulsed value           | -               | V, A    |
  | TD1       | Rise delay time        | 0.0             | sec     |
  | TAU1      | Rise time constant     | TSTEP           | sec     |
  | TD2       | Fall delay time        | TD1 + TSTEP     | sec     |
  | TAU2      | Fall time constant     | TSTEP           | sec     |

- **Waveform Formula**:
  Given V_21 = V2 - V1 and V_12 = V1 - V2: 
  - For `0 ≤ t < TD1`:  
    \( V(t) = V1 \)
  - For `TD1 ≤ t < TD2`:  
    \( V(t) = V1 + V_{21}(1 - e^{-(t - TD1) / TAU1}) \)
  - For `TD2 ≤ t < TSTOP`:  
    \( V(t) = V1 + V_{21}(1 - e^{-(t - TD1) / TAU1}) + V_{12}(1 - e^{-(t - TD2) / TAU2}) \)

- **Example Code**:
  Unique line from example:  
  `VIN 3 0 EXP(-4 -1 2NS 30NS 60NS 40NS)`

This summary highlights essential information for netlist code generation, including syntax, theoretical characteristics, default values, and example usage of exponential sources in Ngspice.
**Summary:**

**Piece-Wise Linear (PWL):**

**General Form:**  
`PWL(T1 V1 <T2 V2 T3 V3 ...>) <r=value> <td=value>`

- Represents voltage or current source values at specific time points, `(T, V)`, using linear interpolation for intermediate times.  

**Parameters:**  
- `(T, V)`: Specifies the value (`V` in Volts or Amps) of the source at the given time (`T`).  
- `r`: Determines repeat behavior.  
  - `r = -1` or not provided: Sequence runs once, output remains at final value.  
  - `r = 0`: Entire sequence from time `0` to `Tn` repeats indefinitely.  
  - `r > 0`: Sequence between `r` and `Tn` repeats indefinitely. `r` must be one of the time points in the PWL sequence.  
- `td`: Delays the entire sequence by the specified time.  
- **Note:** `r` and `td` are only available with voltage sources, **not with current sources.**  

**Example Code:**  
```
VCLOCK 7 5 PWL(0 -7 10NS -7 11NS -3 17NS -3 18NS -7 50NS -7)
+ r=0 td=15NS
```

- This defines a voltage source (`VCLOCK`) with time-value pairs `(T, V)` using a PWL pattern.  
- Sequence starts at `0` and repeats indefinitely (`r=0`), with a delay of `15ns` (`td=15NS`).  

**Behavior:**  
- Linear interpolation is used for intermediate values of time.  
- Source will output specific values at defined times `(T, V)` and repeat or delay as specified by `r` and `td`.
### Summary for Single-Frequency FM (SFFM)

**Syntax**:  
`SFFM(VO VA FM MDI FC TD PHASEM PHASEC)`

**Example Code**:  
`V1 12 0 SFFM(0 2 20 45 1k 1m 0 0)`

**Parameter Table**:
- **VO (Offset)**: No default; units: V, A (required).  
- **VA (Amplitude)**: No default; units: V, A (required).  
- **FM (Modulating frequency)**: Default = `5/TSTOP`; units: Hz.  
- **MDI (Modulation index)**: Default = `90`; no units; limited to `0 <= MDI <= FC/FM`.  
- **FC (Carrier frequency)**: Default = `500/TSTOP`; units: Hz.  
- **TD (Signal delay)**: Default = `0.0`; units: seconds.  
- **PHASEM (Modulation signal phase)**: Default = `0.0`; units: degrees.  
- **PHASEC (Carrier signal phase)**: Default = `0.0`; units: degrees.

**Waveform Equation**:  
For `t > TD`:
```
V(t) = VO + VA ⋅ sin(2π ⋅ FC ⋅ (t - TD) + MDI ⋅ sin(2π ⋅ FM ⋅ (t - TD) + PHASEM) + PHASEC)
```
For `t ≤ TD`:  
`V(t) = 0`.

**Important Notes**:
- **VO** and **VA** are mandatory parameters.
- **MDI** has an upper limit defined as `FC/FM`.
Amplitude Modulated Source (AM) behavior for netlist generation/modification:

**General Form**:
```
AM(VO VMO VMA FM FC TD PHASEM PHASEC)
```

**Example**:
```
V1 12 0 AM(0.5 2 1.8 20K 5MEG 1m)
```

**Parameters Table:**

| Parameter | Description                     | Default Value | Units    |
|-----------|---------------------------------|---------------|----------|
| VO        | Overall offset                 | -             | V, A     |
| VMO       | Modulation signal offset       | -             | V, A     |
| VMA       | Modulation signal amplitude    | 1             | V, A     |
| FM        | Modulation signal frequency    | 5/TSTOP       | Hz       |
| FC        | Carrier signal frequency       | 500/TSTOP     | Hz       |
| TD        | Overall delay                  | 0.0           | seconds  |
| PHASEM    | Modulation signal phase        | 0.0           | degrees  |
| PHASEC    | Carrier signal phase           | 0.0           | degrees  |

**Waveform Equation**:
```
V(t) = VO + (VMO + VMA⋅sin(2π⋅FM⋅(t-TD)+PHASEM)) ⋅ sin(2π⋅FC⋅(t-TD)+PHASEC) 
       for t > TD
V(t) = 0 for t ≤ TD
```

**Key Theoretical Insights**:
- Both `VO` (Overall offset) and `VMO` (Modulation signal offset) must always be provided. 
- **Modulation Depth**: Defined by `VMA / VMO`, where values between 0 and 1 provide a standard amplitude modulated signal.
- Setting `VMO` to **0** results in double sideband suppressed carrier signals. 


**Summary of Transient Noise Source (Ngspice Manual Section 4.1.7):**

**General Form**  
`TRNOISE(NA NT NALPHA NAMP RTSAM RTSCAPT RTSEMT)`

**Description:**  
The transient noise source injects experimental low-frequency noise (Gaussian, 1/f, and RTS) into voltage or current sources for transient analysis. Multiple noise types can be combined in one `TRNOISE` specification.

**Key Parameters:**  
- **NA**: RMS noise amplitude (Gaussian). Units: V or A. Default: None.
- **NT**: Time step between sample values. Units: seconds. Default: None.
- **NALPHA**: Exponent for 1/f noise (valid range: `0 < α < 2`). Default: None.
- **NAMP**: Amplitude for 1/f noise. Units: V or A. Default: None.
- **RTSAM**: Amplitude of Random Telegraph Signal (RTS). Units: V or A. Default: None.
- **RTSCAPT**: Mean trap capture time (RTS). Units: seconds. Default: None.
- **RTSEMT**: Mean trap emission time (RTS). Units: seconds. Default: None.

**Important Notes:**  
- `NT` and `RTSAM` set to `0` will ignore the `TRNOISE` contribution for individual sources.
- Use the **`alter`** command to dynamically modify or disable transient noise:
  - Example:  
    `alter @vnoi[trnoise] = [0 0 0 0]  $ Disable noise`
    `alter @vrts[trnoise] = [0 0 0 0 0 0 0] $ Disable RTS noise`
- Disable all `TRNOISE` sources globally with:  
  `set notrnoise` (in `.spiceinit` or control section).  
  Enable again with: `unset notrnoise`.

**Examples:**  
1. White noise:  
   `VNoiw 1 0 DC 0 TRNOISE(20n 0.5n 0 0)`
2. 1/f noise:  
   `VNoi1of 1 0 DC 0 TRNOISE(0 10p 1.1 12p)`
3. Combined white and 1/f noise:  
   `VNoiw1of 1 0 DC 0 TRNOISE(20 10p 1.1 12p)`
4. Combined white, 1/f, RTS noise:  
   `IALL 10 0 DC 0 trnoise(1m 1u 1.0 0.1m 15m 22u 50u)`

**Implementation:**  
- Applicable to independent **voltage sources** (`vsrc`) and **current sources** (`isrc`).

**Reference Chapters for Further Details:**  
- Chapter 11.3.11: Detailed description of transient noise.
- Chapter 13.5.3: Description of `alter` command.


**Summary: Random Voltage Source (TRRANDOM)**

**General Description:**  
The `TRRANDOM` option generates statistically distributed random voltage values, which may be used for transient simulations or Monte-Carlo simulations. These values can control behavioral sources, capacitors, inductors, resistors, and other components to model statistical variations in device parameters.

**Syntax:**  
`TRRANDOM(TYPE TS <TD <PARAM1 <PARAM2>>> )`

**Key Parameters:**  
- **TYPE:** Determines the type of random distribution:  
  - **1 (Uniform):** Values in range ±PARAM1 around Offset (PARAM2).  
  - **2 (Gaussian):** Standard deviation (PARAM1) around Mean (PARAM2).  
  - **3 (Exponential):** Mean value (PARAM1), Offset (PARAM2).  
  - **4 (Poisson):** Lambda value (PARAM1), Offset (PARAM2).
- **TS:** Duration for individual random voltage values.  
- **TD (Optional):** Time delay before the random sequence starts; output stays at Offset or Mean value during delay.  
- **PARAM1 and PARAM2:** Distribution-specific parameters (dependent on TYPE).

**Default Values (Table):**  
| **TYPE**      | **Description** | **PARAM1** | **Default (PARAM1)** | **PARAM2** | **Default (PARAM2)** |
|---------------|-----------------|------------|----------------------|------------|----------------------|
| **1 (Uniform)** | Range           | ±          | 1                   | Offset      | 0                   |
| **2 (Gaussian)** | Std. Dev.       |            | 1                   | Mean        | 0                   |
| **3 (Exponential)** | Mean          |            | 1                   | Offset      | 0                   |
| **4 (Poisson)** | Lambda           |            | 1                   | Offset      | 0                   |

**Examples:**  
1. **Gaussian Distribution:**  
   `VR1 r1 0 dc 0 trrandom (2 10m 0 1)`  
   Generates Gaussian-distributed values with a mean of 0 and standard deviation 10m (0.01).

2. **Uniform Distribution:**  
   `V1 1 0 dc 0 trrandom (1 1u 0.5u 0.5 0.5)`  
   Generates uniform values between 0 and 1.  

This allows precise implementation for netlist code generation and debugging regarding random voltage sources and their interaction with component parameters.
4.1.9 External Voltage or Current Input

General form:  
`EXTERNAL`

Examples:  
`Vex 1 0 dc 0 external`  
`Iex i1 i2 dc 0 external <m = xx>`

- Allows input of voltages or currents to be set externally via a calling process when ngspice is used as a shared library.  
- Refer to Chapter 15 and Section 15.3.3.9 for detailed explanation.
### Summary of Section 4.1: Independent Sources for Voltage or Current

**General Syntax**:  
- Voltage Source: `VXXXXXXX N+ N- <<DC> DC/TRAN VALUE> <AC <ACMAG <ACPHASE>>> <DISTOF1 <F1MAG <F1PHASE>>> <DISTOF2 <F2MAG <F2PHASE>>>`  
- Current Source: `IYYYYYYY N+ N- <<DC> DC/TRAN VALUE> <AC <ACMAG <ACPHASE>>> <DISTOF1 <F1MAG <F1PHASE>>> <DISTOF2 <F2MAG <F2PHASE>>>`

**Key Points**:  
- **Nodes**:
  - `N+`: Positive node, `N-`: Negative node.
  - Positive current flows from `N+` to `N-` for voltage sources and vice versa for current sources.  
- Voltage sources can be used as "ammeters"; a zero-valued voltage source measures current without altering circuit functionality.

**DC/TRAN**:  
- Specifies DC and transient values of the source.
- Omission is allowed if the values are zero.
- If time-invariant, the value may be prefixed by `DC`.  

**AC Analysis**:  
- The keyword `AC` specifies small-signal behavior with mandatory `ACMAG` (AC magnitude) and optional `ACPHASE` (AC phase).  
  - Default `ACPHASE`: 0.  
  - Typical `ACMAG`: 1 (unity for convenient scaling).  
- Avoid `AC` if the source isn’t an AC small-signal input.

**Distortion Inputs**:  
- `DISTOF1` and `DISTOF2`: Independent source distortion at frequencies `F1` and `F2`.  
  - Optional: Magnitude (default `1.0`) and Phase (default `0.0`).  
  - Related to `.DISTO` control line.

**Transient Analysis**:  
- Independent sources can have **time-dependent values** for transient analysis, using the time-zero value for DC analysis.  

**Available Source Functions** (for transient analysis not already in AC/DC):
1. Pulse
2. Exponential
3. Sinusoidal
4. Piece-wise Linear
5. Single-Frequency FM
6. AM
7. Transient Noise
8. Random Voltages or Currents
9. External Data (via shared library)
10. RF Port  

**Defaults**:
- Parameters omitted or set to zero assume default values:
  - `ACPHASE`: 0  
  - Distortion Input Magnitude: 1.0  
  - Distortion Input Phase: 0.0.

**Key Example Codes**:  
1. Voltage source:
   ```plaintext
   VCC 10 0 DC 6            * DC voltage source, 6V
   VIN 13 2 0.001 AC 1 SIN(0 1 1MEG)   * AC sinusoidal input
   VCARRIER 1 0 DISTOF1 0.1 -90.0      * Distortion input example
   ```

2. Current source:
   ```plaintext
   ISRC 23 21 AC 0.333 45.0 SFFM(0 1 10K 5 1K)   * AC single-frequency FM
   IIN1 1 5 AC 1 DISTOF1 DISTOF2 0.001           * AC with distortion inputs
   ```

This section defines the roles and syntax for independent voltage and current sources. Use these specifications for simulation inputs, transient analysis, and advanced AC behaviors such as distortion and small-signal reference.
**Summary:**

**Gxxxx: Linear Voltage-Controlled Current Sources (VCCS)**

- **General Form Syntax:**  
  `GXXXXXXX N+ N- NC+ NC- VALUE <m=val>`

- **Parameters Explanation:**
  - **N+, N-:** Positive and negative nodes of the current source (current flows from N+ to N-).
  - **NC+, NC-:** Positive and negative controlling nodes.
  - **VALUE:** The transconductance in mhos (siemens).
  - **m (optional):** Multiplier for the output current.  
    - **val:** A numerical value or an expression (refer to section 2.10.5 for syntax).  
    - Specific instance parameters discussed in section 27.3.6.

- **Examples:**  
  - `G1 2 0 5 0 0.1`  
    (defines a VCCS with nodes 2–0, controlling nodes 5–0, and transconductance = 0.1 mhos.)  
**Ngspice Manual Summary: Linear Voltage-Controlled Voltage Sources (VCVS)**  

**General Form:**  
`EXXXXXXX N+ N- NC+ NC- VALUE`  

**Description:**  
- **N+**: Positive node of the controlled voltage source.  
- **N-**: Negative node of the controlled voltage source.  
- **NC+**: Positive controlling node.  
- **NC-**: Negative controlling node.  
- **VALUE**: Voltage gain parameter that defines the scale of control.  

**Example:**  
`E1 2 3 14 1 2.0`  
- Here, node 2 is the positive terminal, node 3 is the negative terminal, node 14 is the positive controlling node, node 1 is the negative controlling node, and the gain is set to 2.0.  

**Additional Info:** Instance parameters specific to the VCVS are detailed in Chapter 27.3.7.
**Ngspice Manual Summary: Linear Current-Controlled Current Sources (CCCS)**  

**General Form**:  
`FXXXXXXX N+ N- VNAM VALUE <m=val>`  

**Details**:  
- `N+`, `N-`: Positive and negative nodes of the current source. Current flows from `N+` through the source to `N-`.  
- `VNAM`: Name of the voltage source controlling the current. The controlling current flows from the positive node, through the voltage source, to the negative node of `VNAM`.  
- `VALUE`: Current gain of the CCCS.  
- `m`: Optional multiplier for the output current (default is `1`).  

**Examples**:  
`F1 13 5 VSENS 5 m=2`  

Explanation:  
- Defines a CCCS from node `13` to node `5`, controlled by the current through the voltage source `VSENS`, with a current gain of `5` and an additional multiplier `m=2`.  
**Summary:**

### Hxxxx: Linear Current-Controlled Voltage Sources (CCVS)

- **General Form:**  
  `HXXXXXXX N+ N- VNAM VALUE`

- **Parameters:**  
  - `N+`: Positive node.  
  - `N-`: Negative node.  
  - `VNAM`: Name of the voltage source controlling the current. The current flows from VNAM's positive node -> source -> VNAM's negative node.  
  - `VALUE`: Transresistance in ohms (default theoretical characteristic).  

- **Example:**  
  `HX 5 17 VZ 0.5K`  

- **Additional Info:** Instance parameters for CCVS can be referenced in Chapter 27.3.5.  
**Summary of the provided text:**

**Dependent Polynomial Sources in Ngspice (SPICE2G6 Compatibility):**  
- Ngspice supports dependent polynomial sources using the XSPICE extension. Instances are defined as specified in the following forms.

**Instance Card Syntax for Polynomial Sources:**  
1. **POLYNOMIAL VCVS (Voltage-Controlled Voltage Source):**  
   `EXXXXXXX N+ N- POLY(ND) NC1+ NC1- P0 (P1...)`

2. **POLYNOMIAL VCCS (Voltage-Controlled Current Source):**  
   `GXXXXXXX N+ N- POLY(ND) NC1+ NC1- P0 (P1...)`

3. **POLYNOMIAL CCCS (Current-Controlled Current Source):**  
   `FXXXXXXX N+ N- POLY(ND) VNAM1 !VNAM2...? P0 (P1...)`

4. **POLYNOMIAL CCVS (Current-Controlled Voltage Source):**  
   `HXXXXXXX N+ N- POLY(ND) VNAM1 !VNAM2...? P0 (P1...)`

**Key Notes:**  
- Polynomial sources are used for complex dependency representation.
- Syntax: POLY(ND) signifies a polynomial dependency with ND terms.
- Parameters `P0, P1...` define polynomial coefficients starting with constant term `P0`.

For further theoretical details or more advanced applications, Chapter 5.5 could be consulted.
4.2 Linear Dependent Sources in Ngspice:

Ngspice supports four types of linear dependent sources, defined by these equations:
- `i = g*v` (transconductance, g)
- `v = e*v` (voltage gain, e)
- `i = f*i` (current gain, f)
- `v = h*i` (transresistance, h)

Constants `g`, `e`, `f`, and `h` represent the respective characteristics of each source.
### Voltage and Current Sources (Ngspice Manual):

#### Types and Syntax:
1. **Independent Voltage/Current Sources**: 
   - Voltage source: `Vxxx N+ N- Value`
   - Current source: `Ixxx N+ N- Value`
   - `Value` can be constant, an expression, or time-dependent waveform.

2. **Controlled Sources**:
   - Voltage-controlled voltage source (VCVS): `Exxx N+ N- NC+ NC- Gain`
     - Default: Gain (linear amplification factor).
   - Voltage-controlled current source (VCCS): `Gxxx N+ N- NC+ NC- Transconductance`
   - Current-controlled voltage source (CCVS): `Hxxx N+ N- Vsrc Gain`
     - `Vsrc`: Name of the controlling current source.
   - Current-controlled current source (CCCS): `Fxxx N+ N- Vsrc Value`

#### Time-dependent Sources:
- PWL (Piecewise Linear): `Vxxx N+ N- PWL(Time1 Value1 Time2 Value2 ...)`
- Sinusoidal: `SIN(Vo Va Freq Td Theta)`
- Pulse: `PULSE(V1 V2 Tdelay Tr Tf Pw Period)`
- Exponential: `EXP(V1 V2 Tdelay Tau1 Tau2)`

#### Theoretical Characteristics:
1. **VCVS (E)**: Ideal voltage amplification between output and input nodes.
2. **VCCS (G)**: Direct transconductance, influencing current flow based on voltage inputs.
3. **CCVS (H)**: Voltage output driven by controlling current source's gain.
4. **CCCS (F)**: Direct current control by gain of input current.

#### Default Values:
- Sources will adopt zero values if parameters are undefined:
  - For SIN sources, defaults include `Vo = 0` and the waveform parameters `Freq, Td, Theta`.

#### Unique Example Code Snippet:
1. **Voltage-Controlled Voltage Source**:
   ```plaintext
   E1 2 0 1 0 5
   ```
   - Amplification of node voltage (5x) between defined nodes.

2. **Pulse Source**:
   ```plaintext
   V2 3 0 PULSE(0 5 1ms 10ns 10ns 100ms 200ms)
   ```
   - Pulse oscillates between 0V and 5V, with specified characteristics.

3. **Controlled Current Source**:
   ```plaintext
   G1 5 0 2 0 0.01
   ```
   - Places current proportional to voltage differential (Transconductance: 0.01).

#### Notes for Netlist Code Generation:
- Maintain clarity in defining controlling nodes.
- Time-dependent sources must include comprehensive time parameters to avoid simulation errors.

Instance lines and `.model` lines are essential for adding devices in Ngspice netlists. Two main components are required:

**Instance Line Syntax**:  
`QXXXXXXX node1 node2 node3 modelname <instpar1=val> <instpar2=val> <off>`  
- `QXXXXXXX`: Unique device name (prefix determines device type; e.g., Q for bipolar transistors).  
- `node1`, `node2`, `node3`: Device connection nodes.  
- `modelname`: Reference to an associated `.model` line.  
- `<instpar1=val>`: (Optional) Instance-specific parameters.  
- `<off>`: (Optional) Specifies if the device starts in an off state.  

**.model Line Syntax**:  
`.model modelname modeltype mpar1=val mpar2=val ...`  
- `modelname`: Links to devices in the netlist.  
- `modeltype`: Defines the type of device (e.g., `NPN`, `PNP` for bipolar transistors; other types available in documentation).  
- Model parameters specify device characteristics, with defaults used if not provided. Some models may require hundreds of parameters.  

**Key Notes**:  
- `level` and `version` parameters specify sub-categories of models.
- Device models support various complexities; e.g., BSIM3 for MOSFETs.

**Example Code** (Integrated NMOS transistor using BSIM3 model):  
```
M1 dnode1 gnode1 snode1 bnode1 mosnb3 L=0.35u W=2u
.model mosnb3 NMOS level=8 version=3.3.0 tox=6.5n nch=2.4e17 nsub=5e16 vth0=0.3
```
Important details:  
- Instance line `M1`: Defines an NMOS transistor connected to 4 physical nodes.  
- `.model` line `mosnb3`: Specifies parameters such as `level=8` (BSIM3), `version=3.3.0`, oxide thickness (`tox=6.5n`), and doping concentrations (`nch`, `nsub`).  

### Diode Model (D) in Ngspice

- **General Form**: `.model mname D(pname1=pval1 pname2=pval2 ...)`
- **Basic Model Statement**: `.model DMOD D` (uses internal default parameters)

#### Key Parameters and Defaults:
1. **DC Characteristics**:
   - `IS`: Saturation current, default = 1.0e-14 A
   - `N`: Emission coefficient, default = 1
   - `RS`: Ohmic resistance, default = 0 Ω

2. **Reverse Breakdown**:
   - `BV`: Reverse breakdown voltage, default = ∞ (unlimited)
   - `IBV`: Current at breakdown voltage, default = 1.0e-3 A
   - `NBV`: Breakdown emission coefficient, default = Same as `N`

3. **Junction Capacitors**:
   - `CJO`: Zero-bias bottom-wall capacitance, default = 0 F
   - `VJ`: Junction potential, default = 1 V
   - `M`: Area junction grading coefficient, default = 0.5
   - `TT`: Transit time, default = 0 sec

4. **Temperature Dependence**:
   - `TNOM`: Measurement temperature, default = 27°C
   - `EG`: Activation energy, default = 1.11 eV
   - `XTI`: Saturation current temperature exponent, default = 3

5. **Noise Modeling**:
   - `KF`: Flicker noise coefficient, default = 0
   - `AF`: Flicker noise exponent, default = 1

#### Junction DC Parameters Table:
- Summary includes saturation current (`IS`), breakdown settings (`BV`, `IBV`), tunneling effects (`JTUN`, `NTUN`), and recombination attributes (`ISR`, `NR`).

#### Junction Capacitance Parameters Table:
- Captures zero-bias capacitance (`CJO`, `CJP`), grading coefficients (`M`, `MJSW`), and potential settings (`VJ`).

#### Temperature Effects Table:
- Variables for adjustment based on temperature, like `TCV` (breakdown voltage tempco), `XTITUN`, and `TLEV`.

#### Metal/Polysilicon Overlap Parameters:
- Includes dimensions (`LM`, `WM`) and oxide thicknesses (`XOM`, `XOI`).

---

#### Key Example:
```plaintext
.model DIODE1 D (bv=50 is=1e-13 n=1.05)
```
This specifies a diode with a breakdown voltage of 50 V, saturation current of \(1e^{-13} \, \text{A}\), and an emission coefficient of 1.05.


**Summary of Important Information for Netlist Code Generation and Diode Queries**

- **Diode Model Characteristics**:
  - **Forward Bias**: Anode is more positive than cathode, diode conducts large currents. Use series resistance (`RS`) to avoid convergence issues.
  - **Reverse Bias**: Cathode is more positive than anode, diode conducts small leakage current.
  - **Breakdown**: Modeled only if `BV` parameter is specified; exponential increase in current. **`BV` is positive**.
  
- **Key Parameters and Scaling**:
  - `area`, `pj`, and multiplier `m` used for scaling parameters:
    - `AREAeff = AREA × m`
    - `PJeff = PJ × m`
    - Example scaled parameters: `ISeff = IS × AREAeff + JSW × PJeff`.
  
- **DC, Transient, and AC Characteristics**:
  - Bottom current model:  
    ```
    ID = IS × (exp(qVD/NkT) - 1) + VD × GMIM, if VD ≥ -3NkT/q
    ```
  - High injection effects modeled with `IK` and `IKR`:
    ```
    IDeff = ID / (1 + ID × IK), if VD ≥ -3NkT/q
    ```
  - Capacitance:
    - Depletion: `Cdepletion = Cdeplbw + Cdeplsw`
    - Diffusion: `Cdiffusion = TT × ∂IDeff/∂VD`

- **Breakdown Region Behavior**:
  - Description involves `BV` and current `IBV`. Transition from reverse bias uses:
    ```
    Ibdwn = -ISeff × (exp(-qBV/NkT) - 1)
    ```
  - Adjusted breakdown voltage algorithm:  
    ```
    BVeff = BV - N × Vt × ln(IBVeff / Ibdwn), if IBVeff ≥ Ibdwn
    ```

- **Temperature Dependence**:
  - **Band-gap Energy**:
    ```
    EG(T) = 1.16 - (7.02e-4 × T^2) / (T + 1108.0)
    ```
  - **Leakage Current**:
    ```
    IS(T) = IS × elogfactor
    ```
    where `logfactor = (EGnom/Vt(TNOM) - EG(T)/Vt(T)) + XT × ln(T/TNOM)`
  - **Contact Potentials**:  
    ```
    VJ(T) = VJ(TNOM) - Vt(T) × [3 × ln(T/TNOM) + EGnom/Vt(TNOM) - EG(T)/Vt(T)]
    ```
  - Changes in parameters due to temperature:
    - Resistance: `RS(T) = RS × [1 + TRS × (T - TNOM)]`
    - Capacitance: `CJ(T) = CJ × [1 + MJ × {4.0e-4 × (T - TNOM) - VJ(T)/VJ + 1}]`

- **Noise Model**:
  - **Thermal Noise** (due to `RS`):  
    ```
    i_RS^2 = 4 × k × T × Δf / RS
    ```
  - **Shot Noise** and **Flicker Noise** (parameters: `KF`, `AF`):  
    ```
    id^2 = 2 × q × ID × Δf + KF × ID^AF / f × Δf
    ```

- **Self-Heating Model**:
  - A 3rd node (`tj`) and flag (`thermal`) added in the element line. Specify `RTH0` and `CTH0` parameters in the model.
  - **General usage syntax**:
    ```
    DXXXXXXX n+ n- tj mname <off> <ic=vd> thermal
    ```
  - **Example model declaration**:
    ```
    .model DPWR D (bv=16 is=1e-10 n=1.03 rth0=50 cth0=1u)
    ```

This summary includes key equations, modeling behaviors, temperature effects, noise contributions, and self-heating implementations directly useful for diode-related netlist operations, debugging, and explanations.
- **Ngspice OpenVAF/OSDI Diode Models**  
  Ngspice integrates the OSDI interface with the OpenVAF compiler, enabling the use of Verilog-A compact diode models. Two diode models supported are:

  - **JUNCAP2**  
    - Developed by Philips Research.  
    - Widely used in integrated circuit design.  
    - Works with MOS models like PSP and as an alternative diode model for source/drain junctions in BSIM4 models.  

  - **DIODE_CMC**  
    Enhancements over JUNCAP2:  
    - Series resistance.  
    - Diffusion capacitance with soft recovery.  
    - Breakdown voltage temperature coefficient.  
    - Noise modeling.  
    - Min-max parameters for generating warnings.  

Refer to Chapter 9 of the manual for details on the OpenVAF/OSDI interface.
### Summarized Information from Section "7.2 Junction Diodes" (Ngspice Manual)

**General Syntax for Junction Diode Definition:**  
`DXXXXXXX n+ n- mname <area=val> <m=val> <pj=val> <off>`  
`+ <ic=vd> <temp=val> <dtemp=val>`  
`+ <lm=val> <wm=val> <lp=val> <wp=val>`

#### Key Components:
1. **`n+` and `n-`:** Positive (anode) and negative (cathode) nodes.
2. **`mname`:** Model name linked to the diode model.
3. **Instance Parameters:**  
    - **`area`:** Area scale factor for saturation current; default = `1.0` (if omitted).
    - **`pj`:** Perimeter scale factor for sidewall saturation current and associated capacitance.
    - **`m`:** Multiplier for area and perimeter.
    - **`off`:** Optional flag to set starting condition for DC analysis.
    - **`ic=vd`:** Initial condition for transient analysis (`uic` option required).
    - **`temp`:** Specific temperature for this device, overrides global temp in `.option`.
    - **`dtemp`:** Offset temperature from circuit temperature.
4. **Parasitic Effect Parameters:**  
    - **`lm`, `wm`, `lp`, `wp`:** Parameters for modeling metal and polysilicon overlap capacitances and other parasitics in advanced processes. Priority given to element parameters if both model and element parameters are specified.

#### Additional Features:
- Perimeter effects and high injection level included.
- Supports temperature-dependent modeling.
- Can activate modern parasitic modeling with `LEVEL=3` in the model or individual element parameters (`lm`, `wm`, `lp`, `wp`).
- Instance-specific parameters override global settings from the `.option` line.

#### Examples:
- `DBRIDGE 2 10 DIODE1`
    - A simple diode with nodes `2` and `10` using model `DIODE1`.
- `DCLMP aa cc DMOD AREA=3.0 IC=0.2`  
    - A diode with `AREA=3.0` and initial voltage (`ic=0.2` V) across the diode for transient analysis.

#### Special Note:
- Advanced models for modern diode designs (e.g., JUNCAP) can be imported through the OpenVAF/OSDI framework (requires Verilog-A models) starting in `ngspice-39`.

#### Theoretical Additions: 
- Added sidewall junction currents, capacitances, tunneling effects, and metal and polysilicon overlap capacitances to the SPICE3 model. Perfect for modern PDK usage.
**BJTs (Bipolar Junction Transistors) Summary from Ngspice Manual**

**General Syntax**  
`QXXXXXXX nc nb ne <ns> <tj> mname <area=val> <areac=val> <areab=val> <m=val> <off> <ic=vbe,vce> <temp=val> <dtemp=val>`

**Key Terminology and Behavior:**  
- **`nc`, `nb`, `ne`**: Nodes for collector, base, and emitter (mandatory).  
- **`ns`**: Substrate node (optional; defaults to ground if unspecified).  
- **`tj`**: Junction temperature node (optional; used in VBIC model).  
- **`mname`**: Model name (mandatory).  
- **Area Factors**:  
   - `area`: Emitter area factor (default = 1.0 if omitted).  
   - `areac`: Collector area factor.  
   - `areab`: Base area factor.  
- **`m`**: Multiplicity (optional).  
- **`off`**: Flag used to set initial DC conditions (optional).  
- **`ic=vbe,vce`**: Initial guess for base-emitter (`vbe`) and base-collector (`vce`) voltages (optional, primarily for transient analysis with `.tran uic`).  
- **`temp`**: Absolute temperature of the device (overrides `.option temp`).  
- **`dtemp`**: Relative temperature offset from circuit temperature.  

**Default Values**  
- `area` = 1.0 (emitter area)  
- `temp` and `dtemp` are optional but override circuit-level temperature settings if used.

**Examples**  
- `Q23 10 24 13 QMOD IC=0.6,5.0`  
- `Q50A 11 26 4 20 MOD1`  

**Notes for Debugging and Netlist Optimization:**  
- Use `.ic` for transient initial conditions instead of relying solely on `ic=vbe,vce` within transistor definition.  
- Ensure `off` is set if needed for DC operating point calculations.  
- For temperature-sensitive designs, carefully manage `temp` and `dtemp` values.  


### Summary: Ngspice BJT Models (NPN/PNP)

1. **Model Selection via `.model` Card**
   - Ngspice provides three BJT device models selectable with `.model` card:
     - `.model QMOD1 PNP`
     - `.model QMOD3 NPN level=4`
     - Default model: SPICE BJT Model (LEVEL=1)

2. **LEVEL Keyword and Models:**
   - **`LEVEL=1`** (Default if no LEVEL specified):
     - Original SPICE BJT model.
     - Includes modeling for vertical/lateral devices, temperature corrections of resistors (collector, emitter, base), and quasi-saturation effects.
   - **`LEVEL=4`**:
     - Advanced VBIC (Vertical Bipolar Inter-Company) model. 
     - For details, see section 7.3.4 or [Designer's Guide VBIC Documentation](http://www.designers-guide.org/VBIC/).
   - **`LEVEL=8`**:
     - HICUM/L2 (High Current Model) model. Details in section 7.3.5 or the HICUM official website.

3. **Additional Notes:**
   - OpenVAF/OSDI (introduced in ngspice-39) allows support for modern bipolar models written in Verilog-A (e.g., VBIC, Mextram, HICUM).

4. **Default Parameters and Modification:**
   - Default parameters from ngspice are used if not overridden in the `.model` definition.
   - Parameters can be replaced for customization as per project requirements (refer to parameter tables not included here).

No example or explicit parameter table provided in the given text.
**Ngspice Gummel-Poon Model Summary for Netlist Usage**

The Gummel-Poon model for BJTs is a detailed extension of the traditional Ebers-Moll model, supporting more advanced effects like high-bias behavior, quasi-saturation, and temperature dependencies. Below is a concise yet functional breakdown for applying this model in netlist development, debugging, and modification.

---

**DC Model Key Parameters:**
- **IS**: Transport saturation current (default: 1.0e-16 A, scale: area).
- **BF**: Ideal maximum forward beta (default: 100, unitless).
- **NF**: Forward current emission coefficient (default: 1.0, unitless).
- **ISE**: B-E leakage saturation current (default: 0.0 A).
- **IKF**: Forward beta roll-off corner current (default: ∞ A).
- **NE**: B-E leakage emission coefficient (default: 1.5).
- **BR**: Ideal maximum reverse beta (default: 1, unitless).
- **NR**: Reverse current emission coefficient (default: 1).

---

**Capacitive and Reactive Behavior:**
- **CJE**: B-E zero-bias depletion capacitance (default: 0, scale: area).
- **VJE**: B-E built-in potential (default: 0.75 V).
- **MJE**: B-E junction exponential factor (default: 0.33).
- **CJC**: B-C zero-bias capacitance (default: 0 F, dependent on device orientation).
- **CJS**: C-S capacitance (default: 0 F).
- **TR**: Ideal reverse transit time (default: 0 seconds).

---

**Temperature Dependencies (Key Parameters):**
- **TNOM**: Nominal parameter measurement temperature (default: 27°C).
- **XTI**: Temperature exponent for IS (default: 3).
- **XTB**: Forward and reverse beta temperature coefficient (default: 0).

---

**Quasi-Saturation Model Extensions (Toggle with Parameters):**
- **RCO**: Epitaxial region resistance (default: 0 Ω, scale: 1/area).
- **VO**: Carrier mobility knee voltage (default: 10 V).
- **QCO**: Charge factor in epitaxial region (default: 0.0 C).
- **GAMMA**: Doping factor in epitaxial region (default: 1e-11).

Example Enhanced Usage for Quasi-Saturation:
```
.model Q1 NPN BF=100 IS=1e-16 RCO=0.45 VO=4.16 GAMMA=1.0e-15 QCO=3.4e-11
```

---

**High-Bias Parameter Extensions:**
- **NK**: High-current Beta rolloff exponent (default: 0.5).
- **ITF**: High-current parameter for TF (default: 0).
- **PTF**: Excess phase at 1/(2πTF) Hz (default: 0).

---

**Temperature Coefficients (Advanced Modeling):**
- Available for most resistances, currents, and voltages (e.g., TRE1, TIKF1, TVAF1, etc.).
- Default value for all: 0. Example for RE temperature coefficient:
  ```
  .model Q1 NPN RE=1 TRE1=1e-3
  ```

---

**Default Temperature Behavior for Quasi-Saturation:**
- **VG**: Energy gap temperature dependence (default: 1.206 V).
- **CN, D**: Temperature exponents (default: 2.42 for NPN, 2.2 for PNP).

---

**Component Template for Netlist:**
```
Q<name> <collector> <base> <emitter> <substrate> <model> [area=<value>]
.model <model_name> NPN | PNP [parameters...]
```

**Example:**
```
Q1 C B E S QMODEL
.model QMODEL NPN IS=1e-16 BF=120 CJE=2pF VJE=0.6 IKF=0.01
```

---

This summary ensures clarity and utility for BJT modeling and experimentation while emphasizing critical parameters, syntax, and extensions relevant to ngspice usage. Always verify model suitability with simulation results to align theoretical and practical behavior.
**Summary of VBIC Model Section (Ngspice Manual 7.3.4)**  

**VBIC Model Overview**  
- Development of the VBIC model is an improvement to the Standard Gummel-Poon (SGP) model, specifically for modern semiconductor technologies and integrated bipolar transistors.  
- Includes a modified Quasi-Saturation model for modeling discrete switching and RF transistor characteristics.  
- Supports silicon, SiGe, and III-V HBT devices.  

**Key Features of VBIC Model:**  
- **Integrated substrate transistor:** Models parasitic devices in integrated processes.  
- **Improved modeling:** Early effect, depletion capacitance, base-emitter breakdown, weak avalanche effects, and temperature modeling.  
- **Physical separation of Ic and Ib.**  
- **Self-heating modeling:** Includes a simple 1-pole thermal network to account for power dissipation effects.   

**Self-Heating Modeling Details:**  
- A node `dt` is used for thermal modeling with a parallel resistor (RTH) and capacitor (Cth) network to ground. The voltage at `dt` corresponds to the BJT junction temperature.  
- Thermal effects (resistor/current/capacitor changes) are computed using temperature update equations integrated into the Ngspice analytical iteration schema.  
- Controlled by the `SELFT` parameter:  
  - `SELFT=0`: Self-heating off (default).  
  - `SELFT=1`: Self-heating on.  
- `RTH` must be specified for self-heating.  

**Minimal VBIC Instantiation with Self-Heating**  
```spice
vc c 0 0  
vb b 0 1  
ve e 0 0  
vs s 0 0  
Q1 c b e s dt mod1 area=1  
.model mod1 npn Level=4 selft=1 rth=100  
```

**Advanced Thermal Network Example**  
- Demonstrates the integration of a custom thermal network between node `dt` and environment:  
```spice
Q1 c b e s dt mod2  
.model mod2 npn Level=9 selft=1 rth=20  
X1 dt tamb junction-ambient  
VTamb tamb 0 30  
.subckt junction-ambient jct amb  
rjc jct 1 0.4  
ccs 1 0 5m  
rcs 1 2 0.1  
csa 2 0 30m  
rsa 2 amb 1.3  
.ends  
```
**HICUM Level 2 Model Summary for Ngspice:**

1. **Model Overview:**
   - **Model:** Physics-based HIgh-CUrrent Model (HICUM) Level 2 (L2)
   - **Purpose:** Standard compact model for bipolar junction transistors (BJTs) and heterojunction bipolar transistors (HBTs)
   - **Supported Technologies:** SiGe HBTs, InP HBTs
   - **Supported Effects:**
     - Substrate transistor
     - Avalanche effects
     - Physics-based transfer current model
     - Self-heating
     - Accurate temperature dependence
     - Excess phase between base and collector current
   - **Not Implemented:** Noise correlation network
   - **Ngspice Version:** HICUML2/2.4
   - **Activation:** `level=8` in `.model` statement

2. **Node Connections:**
   - Exposed model nodes: `C` (Collector), `B` (Base), `E` (Emitter), `S` (Substrate), `T` (Temperature)
   - User modifications:
     - Thermal and substrate network customization via `T` and `S` node connections
   - Note: Extreme operating regions may cause convergence issues (self-heating, avalanche effect).

3. **HICUM/L2 Initiation Syntax:**
   ```
   .model mod1 npn Level=8
   Qx collector base emitter substrate model area=value
   ```
   Example:
   ```
   vc c 0 0
   vb b 0 1
   ve e 0 0
   vs s 0 0
   Q1 c b e s dt mod1 area=1
   .model mod1 npn Level=8
   ```

4. **Self-heating Parameters:**
   - **Model Parameter:** `FLSH`
     - `FLSH=1`: Main thermal contributions of IC and IB
     - `FLSH=2`: Includes all transistor power dissipations
   - **Thermal Resistance Parameter:** `RTH`
   - Note: Self-heating requires `T` node connection in the circuit.

This brief includes essential commands, syntax, parameters, and features for utilizing the HICUM/L2 model in Ngspice netlist files while avoiding unnecessary details.
### Summary for Netlist Code Generation/Modification/Debugging:

#### **7.3.6 BJT Models via OpenVAF/OSDI**
Ngspice, through its OSDI interface and OpenVAF compiler, supports additional Verilog-A compact BJT models designed to address modern device simulation needs.

#### **Relevant Models:**

1. **HICUM Level 0 (L0)**:
   - Focus: Reduces simulation and design time for large circuits.
   - Advantages: Modern BJT/HBT technologies support with accurate physical effect formulations for:
     - **Forward transit time**
     - **Base-collector punch-through**
     - **Collector impact ionization**
   - Improved over the traditional SPICE Gummel-Poon model.

2. **HICUM Level 2 (L2)**:
   - Focus: High-frequency and high-current-density transistor circuit design.
   - Process Support: Si, SiGe, and III-V based technologies.
   - Features:
     - Accurate physical effect formulations.
     - Geometry scaling and statistical modeling.
     - Covers wide temperature, operating, and frequency ranges.

3. **MEXTRAM (504 and 505)**:
   - Focus: Detailed modeling of advanced bipolar transistors.
   - Features:
     - Superior to the Gummel-Poon model.
     - Supports advanced processes (e.g., double-poly, SiGe transistors).
     - Suitable for high-voltage power devices.

This summarized information is dedicated to leveraging OpenVAF-supported BJT models for accurate and efficient circuit simulation in modern technologies.
**Summary of Ngspice Manual Section 7.3 BJT:**

- **Component Description**:  
  Defines Bipolar Junction Transistors (BJTs) for simulation, characterized by physical parameters like current gain, junction capacitances, and resistances.

- **Netlist Syntax**:  
  ```
  Qxxx nc nb ne [ns] model name [area] [off] [temp=value]
  ```
  - `nc, nb, ne`: collector, base, emitter terminals.
  - `[ns]`: optional substrate terminal.
  - `model name`: specifies the BJT model.
  - `[area]`: area factor; default = 1.
  - `[off]`: disables initial condition computation.
  - `[temp=value]`: optional operating temperature in degrees Celsius.

- **Default Values** for unspecified parameters:  
  - Area = 1  
  - Temperature = 27°C  

- **Model Characteristics**:  
  Model parameters define behavior such as transport current, Early effect, and temperature dependence. Additional behavioral nuances managed by specified resistance and capacitance values.

- **Examples** (important lines only):  
  ```
  Q1 1 2 3 MODEL1
  MODEL1 NPN(IS=1e-15 BF=100)
  ```

- **Tables** (Parameter Overview):  
  - IS: saturation current.
  - BF, NF: current gain and forward junction ideality factor.
  - VAF: Early voltage defining output conductance behavior.
  - CJE, CJC: junction capacitances for base-emitter and base-collector.
  - RB, RE, RC: resistances for base, emitter, and collector.

This concise summary highlights netlist syntax, key parameters/models, default settings, and example usage.
**Summary for Netlist Code Generation/Modification/Debugging**

**Component: Junction Field-Effect Transistors (JFETs)**

- **General Form**:  
  `JXXXXXXX nd ng ns mname <area> <off> <ic=vds,vgs> <temp=t>`

- **Definitions**:  
  - `nd, ng, ns`: Drain, gate, and source nodes, respectively.  
  - `mname`: Model name for the JFET.  
  - `<area>` (optional): Area factor, defaults to `1.0` if omitted.  
  - `<off>` (optional): Initial condition indicator for DC analysis.  
  - `<ic=vds,vgs>` (optional): Initial conditions for drain-source voltage (VDS) and gate-source voltage (VGS). Used with `.TRAN` and the `uic` option for transient analysis.  
  - `<temp=t>` (optional): Device operating temperature, overrides `.option` temperature setting.

- **Notes**:  
  - Using `.ic` control line is a better approach for setting initial conditions.  
  - The `uic` option is required when `ic=vds,vgs` is used during transient analysis.

**Example**:  
`J1 7 2 3 JM1 OFF`  
Explanation: This sets up a JFET with drain at node 7, gate at node 2, source at node 3, using the model `JM1`, and sets it to an "OFF" initial condition.
**Ngspice Manual Summary: JFET Models (NJF/PJF)**

- **JFET Model Types**: NJF (N-channel) and PJF (P-channel)

- **JFET Theoretical Characteristics**:
  - Models the behavior of Junction Field Effect Transistor (JFET), including current-voltage equations, gate control, and saturation characteristics.

- **Model Syntax**: 
  ```
  .model <modelname> <type> (param1=value1 param2=value2 ...)
  ```
  `<type>`: NJF or PJF.

- **Key Parameters & Default Values**:
  - *VT0* (default = 0.0): Pinch-off voltage.
  - *BETA* (default = 0.0): Transconductance parameter (I_D = BETA * (V_GS - VT0)^2 in saturation).
  - *LAMBDA* (default = 0.0): Channel length modulation parameter.
  - *IS* (default = 1e-14): Saturation current.
  - *CGD* & *CGS* (default = 0.0 pF): Gate-drain and gate-source capacitances.
  - *KF* (default = 0.0): Flicker noise coefficient.
  - *AF* (default = 1.0): Flicker noise exponent.
  
- **Example**:
  ```
  .model myJFET NJF (VT0=-2 BETA=1e-3 LAMBDA=0.01 CGS=1e-12 CGD=2e-12)
  ```

**Summary**  
- `.model JM1 NJF level=1`  
- `.model JMOD2 PJF level=2`  

Defines basic JFET models.  
- `NJF` specifies an N-channel JFET.  
- `PJF` specifies a P-channel JFET.  
- `level`: Specifies the level of the JFET model (e.g., `1`, `2`).


**Summary of JFET Level 1 Model with Parker-Skellern Modification**  

**Overview**  
The JFET Level 1 model is derived from the Shichman and Hodges FET model. It defines the variation of drain current (`IDrain`) based on parameters like `VTO`, `BETA`, `LAMBDA`, and other intrinsic characteristics. Parker-Skellern modifications introduce parameter `B` for enhanced flexibility, particularly in fitting output characteristics.  

---

**Key Parameters and Their Characteristics:**

1. **VTO**: Threshold voltage (default: -2 V)
2. **BETA**: Transconductance parameter (default: 0.0001 A/V²)
3. **LAMBDA**: Channel-length modulation parameter (default: 0 1/V)
4. **RD**: Drain ohmic resistance (default: 0 Ω)
5. **RS**: Source ohmic resistance (default: 0 Ω)
6. **CGS**: Zero-bias gate-source junction capacitance (default: 0 F)
7. **CGD**: Zero-bias gate-drain junction capacitance (default: 0 F)
8. **PB**: Gate junction potential (default: 1 V)
9. **IS**: Gate saturation current (default: 1e-14 A)
10. **B**: Doping tail parameter for fitting (default: 1)
11. **KF/AF**: Flicker noise parameters (default: KF=0, AF=1)
12. **NLEV**: Noise equation selector (default: 1, set to 3 for an alternative thermal channel noise model)
13. **GDSNOI**: Channel noise coefficient for `NLEV=3` (default: 1)
14. **FC**: Coefficient for forward-bias depletion capacitance formula (default: 0.5)
15. **TNOM**: Reference parameter measurement temperature, °C (default: 27 °C)
16. **TCV**: Threshold voltage temperature coefficient (default: 0 1/°C)
17. **VTOTC**: Alternative threshold voltage temperature coefficient (default: 0 1/°C)
18. **BEX**: Mobility temperature exponent (default: 0)
19. **BETATCE**: Alternative mobility temperature exponent (default: 0)
20. **XTI**: Gate saturation current temperature coefficient (default: 3)
21. **EG**: Bandgap voltage (default: 1.11)

---

**Temperature Dependence:**

1. If `VTOTC` is specified:  
   - \( VTO(Temp) = VTO + VTOTC \cdot (Temp - TNOM) \)  
2. If `VTOTC` is not specified:  
   - \( VTO(Temp) = VTO - TCV \cdot (Temp - TNOM) \)  
3. If `BETATCE` is specified:  
   - \( BETA(Temp) = BETA \cdot 1.01^{BETATCE \cdot (Temp - TNOM)} \)  
4. If `BETATCE` is not specified:  
   - \( BETA(Temp) = BETA \cdot \left(\frac{Temp}{TNOM}\right)^{BEX} \)

---

**Nonlinear Capacitance:**
Charge storage in JFET is modeled using nonlinear depletion layer capacitances (`CGS`, `CGD`) that scale as \(-1/2\) power of junction voltage.

---

**Thermal and Noise Modeling:**

1. **Default:** Standard thermal and flicker noise models.
2. **Alternative Noise Model (`NLEV=3`):**
   - Noise defined by:  
     \( Sn\_oise = \frac{2}{3} \cdot 4kT \cdot BETA \cdot Vgst \cdot (1 + α + α^2) / (1 + α) \cdot GDSNOI \)  
   - \( α = \begin{cases} 
      1 - \frac{v_{ds}}{v_{gs} - VTO}, & \text{if } v_{gs} - VTO ≥ v_{ds} \\ 
      0, & \text{otherwise} 
     \end{cases} \)

---

**Parker-Skellern Modifications:**  

1. Adjustments to `IDrain` equations:
   - If `B=1`, simplified forms for `IDrain` exist (reducing complexity of the piecewise equations).  
2. Adds parameter `B` to improve model adaptability where needed.  

---

**Table Reference Example:**

| Parameter | Default   | Example   |
|-----------|-----------|-----------|
| VTO       | -2        | -2.0      |
| BETA      | 0.0001    | 1.0e-3    |
| RD        | 0 Ω       | 100 Ω     |
| CGS       | 0 F       | 5 pF      |
| PB        | 1 V       | 0.6 V     |

---

**Key Analytical Equations:**  

1. \( Vgst = Vgs - VTO \)  
2. \( I_{Drain} \): Form depends on \( Vgst \) and \( Vds \), governed by parameters \( BETA, LAMBDA, B \). Complex cases and simplifications depend on conditions around \( Vgst ≤ 0, Vgst ≥ Vds, Vgst < Vds \).  

---  
This structured summary condenses parameter definitions, conditions, and operational descriptions for debugging and code/model usage.
**Ngspice JFET Level 2 Parker Skellern Model (7.4.5 Summary)**

1. **Key Characteristics of the Model**:
   - Improvements over Level 1 JFET model with smooth high-order derivatives, crucial for distortion and intermodulation predictions.
   - Frequency-dependent output conductance and transconductance as bias functions.
   - Accurate pinch-off potential modulation by both drain-gate and source-gate potentials, matching S-parameter and pulsed-bias measurements.
   - Self-heating varies with frequency.
   - Includes all extreme operating regions (subthreshold, forward gate bias, controlled resistance, breakdown).
   - Independent fitting parameters for different operating regions, preventing compromises.
   - Strict drain-source symmetry with smooth transitions during drain-source potential reversal.

2. **Supported Parameters**:
   | **Name**  | **Description**                        | **Units** | **Default** |
   |-----------|----------------------------------------|-----------|-------------|
   | ID        | Device identifier                     | Text      | PF1         |
   | ACGAM     | Capacitance modulation                | -         | 0           |
   | BETA      | Linear-region transconductance scale  | -         | 10^-4       |
   | CGD       | Zero-bias gate-drain capacitance      | F         | 0           |
   | CGS       | Zero-bias gate-source capacitance     | F         | 0           |
   | DELTA     | Thermal reduction coefficient         | 1/W       | 0           |
   | FC        | Forward bias capacitance parameter    | -         | 0.5         |
   | HFETA     | High-frequency Vgs feedback param.    | -         | 0           |
   | HFE1      | HFGAM modulation by Vgd               | 1/V       | 0           |
   | HFE2      | HFGAM modulation by Vgs               | 1/V       | 0           |
   | HFGAM     | High-frequency Vgd feedback param.    | -         | 0           |
   | HFG1      | HFGAM modulation by Vsg               | 1/V       | 0           |
   | HFG2      | HFGAM modulation by Vdg               | 1/V       | 0           |
   | IBD       | Gate-junction breakdown current       | A         | 0           |
   | IS        | Gate-junction saturation current      | A         | 10^-14      |
   | LFGAM     | Low-frequency feedback parameter      | -         | 0           |
   | LFG1      | LFGAM modulation by Vsg               | 1/V       | 0           |
   | LFG2      | LFGAM modulation by Vdg               | 1/V       | 0           |
   | MVST      | Subthreshold Modulation               | 1/V       | 0           |
   | N         | Gate-junction ideality factor         | -         | 1           |
   | P         | Linear-region power-law exponent      | -         | 2           |
   | Q         | Saturated-region power-law exponent   | -         | 2           |
   | RS        | Source ohmic resistance               | Ω         | 0           |
   | RD        | Drain ohmic resistance                | Ω         | 0           |
   | TAUD      | Thermal reduction relaxation time     | s         | 0           |
   | TAUG      | Gamma feedback relaxation time        | s         | 0           |
   | VBD       | Gate-junction breakdown potential     | V         | 1           |
   | VBI       | Gate-junction potential               | V         | 1           |
   | VST       | Subthreshold potential                | V         | 0           |
   | VTO       | Threshold voltage                     | V         | -2.0        |
   | XC        | Capacitance pinch-off reduction factor| -         | 0           |
   | XI        | Saturation-knee potential factor      | -         | 1000        |
   | Z         | Knee transition parameter             | -         | 0.5         |
   | RG        | Gate ohmic resistance                 | Ω         | 0           |
   | LG        | Gate inductance                       | H         | 0           |
   | LS        | Source inductance                     | H         | 0           |
   | LD        | Drain inductance                      | H         | 0           |
   | CDSS      | Fixed drain-source capacitance        | F         | 0           |
   | AFAC      | Gate-width scale factor               | -         | 1           |
   | NFING     | Number of gate fingers scale factor   | -         | 1           |
   | TNOM      | Nominal temperature (unused)          | K         | 300 K       |
   | TEMP      | Temperature                           | K         | 300 K       |

This structured list provides the exact parameters, default values, and unit specifications necessary for netlist setup and debugging of the Level 2 JFET Parker-Skellern model.
**Summary for Section 7.4 JFETs (Ngspice Manual):**

- **JFET (Junction Field-Effect Transistor):**  
  Represents an N-channel or P-channel JFET in Ngspice simulation.

- **Netlist Syntax:**  
  ```
  JXXXX ND NG NE MNAME
  ```
  - `JXXXX`: Instance name (must start with "J").  
  - `ND, NG, NE`: Drain, Gate, and Source nodes, respectively.  
  - `MNAME`: Model name linked to `.model` statement.

- **Model Specifications (via `.model` Statement):**  
  ```
  .model MNAME NJF/PJF (Parameters)
  ```
  - `NJF`: N-channel JFET, `PJF`: P-channel JFET.  

- **Common Parameters:**  
  - `IS`: Saturation current (default = 1e-14 A).  
  - `BETA`: Transconductance coefficient (default = 1e-4 A/V²).  
  - `VT0/VTO`: Pinch-off voltage (default = -2 V for NJF, +2 V for PJF).  
  - `LAMBDA`: Channel-length modulation parameter (default = 0).  
  - `RD, RS, RG`: Drain, source, and gate resistances (default = 0 for RD & RS, inf for RG).  
  - `AREA`: Scaling factor for BETA (default = 1).  

- **Theoretical Behavior:**  
  - Follows Shockley's equation for current-voltage characteristics.  
  - Controlled by the gate-source voltage (Vgs) within a defined operational range.  

- **Unique Example Code:**  
  ```
  J1 2 3 0 TestJFET
  .model TestJFET NJF (BETA=2e-5 VT0=-1)
  ```

This section provides key details about defining and using JFETs in a netlist, requiring model parameters and instance connections for accurate simulation.
MESFET Devices (Section 7.5.1):

General Form:  
`ZXXXXXXX ND NG NS MNAME <AREA> <OFF> <IC=VDS, VGS>`

- **Components**:  
  - `ND`: Drain node.  
  - `NG`: Gate node.  
  - `NS`: Source node.  
  - `MNAME`: MESFET model name.  
  - `<AREA>`: Optional parameter for area scaling.  
  - `<OFF>`: Optional, allows specifying the device starts in an `OFF` state.  
  - `<IC=VDS, VGS>`: Optional initial conditions for drain-source (VDS) and gate-source (VGS) voltages.  

Example:  
`Z1 7 2 3 ZM1 OFF`  
This defines a MESFET connected between nodes 7, 2, and 3 with model `ZM1`, starting in the OFF state.
MESFET Models (NMF/PMF):  
- Model Syntax: `.model <model_name> <type> level=<level_number>`  
- Example Syntax:
  - `.model ZM1 NMF level=1`  
  - `.model MZMOD PMF level=4`  
- Default: Level 1 parameters for MESFET models.
### Strategic Summary of MESFET Model (Level 1) by Statz:

#### **Key Model Characteristics and Parameters:**
- **Theoretical Basis:** Derived from GaAs MESFET model by Statz et al., focusing on DC and small-signal behavior.
- **DC Characteristics:** Determined by parameters:
  - **VTO:** Pinch-off voltage.
  - **BETA:** Transconductance parameter.
  - **B:** Doping tail extending parameter.
  - **ALPHA:** Saturation voltage parameter.
  - **LAMBDA:** Channel-length modulation parameter.

#### **Key Features:**
- **Drain Current (Id):**
  Piecewise formulas for different Vds ranges:
  - `0 < Vds < 3 * ALPHA`: Polynomial dependence on Vgs and Vds.
  - `Vds ≥ 3 * ALPHA`: Simplified model variation.

- **Ohmic Resistances:**
  - **RD:** Drain resistance.
  - **RS:** Source resistance.

- **Charge Storage:**
  Modeled using total gate charge, with parameters:
  - **CGS:** G-S junction capacitance.
  - **CGD:** G-D junction capacitance.
  - **PB:** Gate junction potential.

#### **Additional Parameters for Noise/Others:**
- **KF:** Flicker noise coefficient.
- **AF:** Flicker noise exponent.
- **FC:** Coefficient for forward-bias depletion capacitance formula.

---

#### **Default Values for Model Parameters (Table):**

| **Name** | **Parameter**                       | **Units** | **Default** | **Example** | **Area** |
|----------|-------------------------------------|-----------|-------------|-------------|----------|
| VTO      | Pinch-off voltage                  | V         | -2          | -2.0        |          |
| BETA     | Transconductance parameter         | A/V²      | 0.0001      | 1.0e-3      | *        |
| B        | Doping tail parameter              | 1/V       | 0.3         | 0.3         | *        |
| ALPHA    | Saturation voltage parameter       | 1/V       | 2           | 2           | *        |
| LAMBDA   | Channel-length modulation          | 1/V       | 0           | 1.0e-4      |          |
| RD       | Drain resistance                   | Ω         | 0           | 100         | *        |
| RS       | Source resistance                  | Ω         | 0           | 100         | *        |
| CGS      | Zero-bias G-S junction capacitance | F         | 0           | 5pF         | *        |
| CGD      | Zero-bias G-D junction capacitance | F         | 0           | 1pF         | *        |
| PB       | Gate junction potential            | V         | 1           | 0.6         |          |
| KF       | Flicker noise coefficient          | -         | 0           |             |          |
| AF       | Flicker noise exponent             | -         | 1           |             |          |
| FC       | Forward-bias depletion coeff.      | -         | 0.5         |             |          |

---

#### **Example Syntax & Instance:**

**Device Instance:**
```plaintext
z1 2 3 0 mesmod area=1.4
```

**Model Definition:**
```plaintext
.model mesmod nmf level=1 rd=46 rs=46 vt0=-1.3
+ lambda=0.03 alpha=3 beta=1.4e-3
```

---

#### **Usage Notes:**
1. Utilize specified default values for parameter tuning during code generation/debugging.
2. Adapt the example syntax for MESFET instantiation with adjustments based on circuit needs.
3. Ensure proper calculation of charge storage and output conductance based on ALPHA and LAMBDA parameters.
4. Be mindful of flicker noise parameters, KF and AF, for noise-sensitive designs.
Summary for netlist code generation/modification/debugging/explanation related to Model by Ytterdal e.a.:  

**GaAs MESFET Model (level 2, 3, 4)**  
- Developed by: T. Ytterdal, K. Lee, M. Shur, and T.A. Fjeldly (Copyright 1993).  
- Theoretical Background: Unified GaAs MESFET Model for Circuit Simulation (source: "Unified GaAs MESFET Model for Circuit Simulation," Int. Journal of High Speed Electronics, vol. 3, no. 2, pp. 201-233, 1992).  

- Usage Notes: Specific syntax, model parameters, or template coding details for netlist generation not provided in the text above. Further information needed from full documentation for practical implementation.  
**Summary:**  
**hfet1 (Level 5)**  
- Component: Heterostructure Field Effect Transistor (HFET).  
- Model source: "Semiconductor Device Modeling for VLSI" (K. Lee et al., Prentice Hall, 1993).  
- Relevant details in AIM-Spice reference manual, section Device Models A (covers model parameters, equivalent circuit diagrams, and device equations).  

**hfet2 (Level 6)**  
- Simplified version of hfet1 (Level 5).  
- Optimized for speed and suited for digital circuit simulation.  
- Certain features of level 1 (hfet1) model are omitted to enhance simulation speed.  


**Summary on MESFETs (Ngspice Manual Section 7.5)**

1. **Component Overview**:  
   MESFETs (Metal-Semiconductor Field-Effect Transistors) are represented in Ngspice with precision for simulating semiconductor behavior.  

2. **Syntax for MESFET**:  
   ```
   Mxxx nd ng ns [sb] mname [L=val] [W=val] [AD=val] [AS=val]
   ```
   - `nd`: Drain node.  
   - `ng`: Gate node.  
   - `ns`: Source node.  
   - `sb`: Optional substrate (bulk) node.  
   - `mname`: Model name.  
   - Optional parameters:  
     - `L`: Gate length (default=0).  
     - `W`: Gate width (default=0).  
     - `AD`, `AS`: Area of drain/source diffusion (default=0).  

3. **Model Characteristics**:  
   - Based on Shockley approximation and advanced device modeling parameters.  
   - Allows inclusion of additional geometries, temperature effects, and junction capacitances.  

4. **Default Values**:  
   - Unless specified, dimensions (e.g., `L`, `W`) and areas (`AD`, `AS`) default to zero.  

5. **Usage Notes**:  
   - All modeling requires an associated `.model` definition in the netlist for device-specific parameters.  
   - Optimize performance by specifying realistic values for `L`, `W`, `AD`, `AS`.  

**End of Extract**
**Summary of MOSFET Devices in Ngspice Netlists**

**General Form:**
```
MXXXXXXX nd ng ns nb mname <m=val> <l=val> <w=val>
+ <ad=val> <as=val> <pd=val> <ps=val> <nrd=val>
+ <nrs=val> <off> <ic=vds,vgs,vbs> <temp=t>
```

**Explanation of Parameters:**
- **nd, ng, ns, nb:** Drain, gate, source, and bulk (substrate) nodes.
- **mname:** Model name.
- **m:** (Multiplier) Parameter simulating 'm' parallel devices.
- **l, w:** Channel length and width (meters). Defaults are used if unspecified.
- **ad, as:** Drain and source diffusion areas (m²), defaults are used.
- **pd, ps:** Drain and source junction perimeters (meters). Default = 0.0.
- **nrd, nrs:** Equivalent number of diffusion squares for drain and source. Default = 1.0.
- **off:** Indicates initial conditions for DC analysis.
- **ic=vds,vgs,vbs:** Initial conditions for transient analysis (only with `.tran` using `uic`).
- **temp:** Device operating temperature (overrides `.option`). Only valid for MOSFET levels 1, 2, 3, and 6.

**Special Parameters for BSIM3/BSIM4/BSIMSOI Models:**
| Name   | Parameter                             | Units | Default | Example |
|--------|---------------------------------------|-------|---------|---------|
| delvto | Threshold voltage shift               | V     | 0       | 0.07    |
| mulu0  | Low-field mobility multiplier (U₀)    | -     | 1       | 0.9     |

**Additional Notes:**
- Default units: `u` = microns (1e-6 m), `p` = square micrometers (1e-12 m²).
- The temperature parameter does **not** apply to level 4 or 5 (BSIM) devices.
- Drain and source resistance are influenced by `nrd` and `nrs` which multiply the sheet resistance (`rsh`) in the `.model` control line.

**Examples:**
1. `M1 24 2 0 20 TYPE1`
2. `M31 2 17 6 10 MOSN L=5U W=2U`
3. `M1 2 9 3 0 MOSP L=10U W=5U AD=100P AS=100P PD=40U PS=40U`
### Summary on Ngspice MOSFET Models (NMOS/PMOS)

#### General Information
- **Models:** Ngspice supports all MOSFET models from Spice3f and additional models developed by UC Berkeley and other groups.
- **Syntax:** Models are invoked using `.model` card.
  ```
  .model <model_name> <type> level=<level_number> version=<version>
  Example: .model MOSN NMOS level=8 version=3.3.0
  ```
  - `<type>`: `NMOS` for n-channel, `PMOS` for p-channel transistors.
  - `<level_number>`: Defines specific model level.
  - `<version>`: Denotes the model's version.

- **Default Parameters:** Users can override defaults using `.model` parameters.
- **Storage for Model Cards:** Model cards can be stored in external files and included via `.include` command in the netlist.

#### Available MOSFET Models (based on Table 7.3)
- **Level 1:** Classic quadratic model (Shichman-Hodges), long-channel devices, non-charge conserving.
- **Level 2:** Short-channel effects, velocity saturation, Meyer C-V model (non-charge conserving).
- **Level 3:** Robust semi-empirical model used in digital design, optional use of `badmos3` for parameter fitting adjustments.
- **Level 6:** Short-channel MOSFETs down to 0.25 µm, allows analytical treatments for circuit behaviors in submicron regimes.
- **BSIM Models:**
  - BSIM3 (Level 8, 49): Modern model for technologies down to 0.25 µm.
  - BSIM4 (Level 14, 54): For sub-0.25 µm technologies.
  - HiSIM and HiSIM_HV: Advanced models for high-voltage MOS devices.
- **VDMOS:** For power MOSFETs, supports self-heating effects.
- **OSDI Models:** Allow use of MOS models written in Verilog-A (e.g., BSIMBULK, BSIM-CMG, PSP).

#### MOSFET Models Parameters (Levels 1–6)
Parameter characteristics include:
- **Key Electrical Parameters:**
  - `VTO` (Threshold Voltage): Default = 0 V.
  - `KP` (Transconductance Parameter): Default = 2.0e-5 A/V².
  - `GAMMA` (Bulk Threshold Parameter): Default = 0.
  - `PHI` (Surface Potential): Default = 0.6 V.
  - `LAMBDA` (Channel Length Modulation): Default = 0.
  - `TOX` (Oxide Thickness): Default = 1e-7 m.
  - `RD`/`RS` (Drain/Source Resistance): Default = 0 Ω.
  - Noise Parameters: `KF` (Flicker Noise Coeff.), `AF` (Flicker Noise Exponent), `NLEV` (Noise Equation Selector), `GDSNOI` (Channel Noise Coeff.).
  - `DELTA`: Width Effect on Threshold Voltage.
  - `TNOM`: Measurement Temperature; Default = 27°C.
- **Capacitances:**
  - Overlap Capacitances: `CGSO`, `CGDO`, `CGBO`.
  - Zero-bias Capacitances: `CBD`, `CBS`, `CJ`, `CJSW`.
- **Process-Dependent Parameters:**
  - Substrate doping (`NSUB`) and surface state density (`NSS`, `NFS`).

- **Defaults for Key Charge Modeling:**
  - Charge storage is based on Meyer’s piecewise linear, voltage-dependent capacitance (non-charge conserving for Level 1).

#### Supported Features Across Models
- **Level 1–3:** Suitable for long-channel or limited short-channel effects.
- **Level 6:** Faster simulation and supports submicron circuit design.
- **Advanced Models (BSIM, HiSIM):** Designed for modern submicron and high-power applications.
- **Verilog-A Models (OSDI):** Enable use of advanced custom MOS models compiled through OpenVAF.

#### Example Template for Netlist
- Defining a MOSFET with a custom model:
  ```
  M1 <Drain> <Gate> <Source> <Bulk> MOSN L=<length> W=<width>
  .model MOSN NMOS level=8 version=3.3.0 VTO=0.7 KP=3.1e-5
  ```

This summary is tailored for MOSFET-related netlist design, modification, debugging, and parameter exploration in **Ngspice**.
### Summary: BSIM Models in Ngspice

#### Overview:
- **BSIM (Berkeley Short-Channel IGFET Model)**: Industry-standard MOSFET models for CMOS processes, evolving from BSIM1 and BSIM2 (obsolete) to BSIM3 and BSIM4, which are state-of-the-art for submicron IC design.
- **Parameters**: There are no default values. Missing required parameters result in errors.
- **Formula for Parameter Evaluation**:
  - \(P = P_0 + P_L L_{\text{effective}} + P_W W_{\text{effective}}\)
  - \(L_{\text{effective}} = L_{\text{input}} - DL\),
  - \(W_{\text{effective}} = W_{\text{input}} - DW\).

---

### **1. BSIM1 Model (Level 4)**:
- **Characteristics**:
  - Empirical model focusing on parametric equations, less accurate in the submicron region.
  - Known issues: Convergence problems and negative output conductance.

- **Parameters**:
  - Examples: \(VFB\) (Flat-band voltage, V), \(PHI\) (Surface inversion potential, V), \(U0\) (Zero-bias transverse-field mobility degradation coefficient, 1/V), \(TOX\) (Gate oxide thickness, µm), etc.  
  - Parameters marked with \(*\) indicate length/width dependence.

- **Additional Notes**:
  - \(XPART = 0\): 40/60 charge partition; \(XPART = 1\): 0/100 charge partition.
  - Initial conditions: Use `ic=vds,vgs` in conjunction with `.tran` control line.

---

### **2. BSIM3 Model (Levels 8, 49)**:
- **Improvements**:
  - Added smoothing functions for C-V and I-V characteristics.
  - No numerical discontinuities; supports submicron technologies (e.g., \(0.18\,\mu m\)).
  - Recommended version for simulation: **BSIM3v3.3.0** (default if unspecified).

- **Model Syntax**:
  - Basic model:  
    `.model n1 nmos level=49 version=3.3.0`  
    `.model p1 pmos level=49 version=3.3.0`
  - Improved for \(0.35\,\mu m\) transistors:  
    `.model n1 nmos level=49 version=3.3.0 tox=10n nch=1e17 nsub=5e16`  
    `.model p1 pmos level=49 version=3.3.0 tox=10n nch=1e17 nsub=5e16`

- **Revision History**:
  - Major versions include 3.0, 3.1, 3.2, and 3.3. Parallel processing supported for **BSIM3v3.2.4** and later.

---

### **3. BSIM4 Model (Levels 14, 54)**:
- **Improvements**:
  - Introduced noise modeling, extrinsic parasitics, and physical effects for sub-100nm MOSFETs.
  - Enhanced accuracy, scalability, and robustness for CMOS design.

- **Recommended Version**:
  - **BSIM4v4.8.2** (default if unspecified).

- **Model Syntax**:
  - Basic model:  
    `.model n1 nmos level=54 version=4.8.2`  
    `.model p1 pmos level=54 version=4.8.2`

- **Parallel Processing**: Supported from **BSIM4v4.5.0**

- **Revision History**:
  - Versions: 4.5.0, 4.6.5, 4.7.0, 4.8.2.

---

### **General Notes**:
- Use the latest versions (e.g., BSIM3 **v3.3.0**, BSIM4 **v4.8.2**) to ensure corrections to known bugs.
- Basic model cards provide intrinsic defaults; advanced configurations are needed for realistic devices.
- Ensure required parameters are provided to avoid errors.
BSIMSOI Models in Ngspice:  
- **Purpose**: BSIMSOI is a compact SPICE model for Silicon-On-Insulator (SOI) circuit design, derived from the BSIM3 framework.
- **Levels Supported in Ngspice**:  
  - **Level 55**: Fully Depleted (FD).  
  - **Level 57**: Partially Depleted (PD).  
  - **Level 56**: Both FD and PD (Dual Depletion, DD).  
  - **Levels 10, 58**: Modern BSIMSOIv4 models (Version 4.4).  
- **Characteristics**:  
  - Based on BSIM3 equations, retaining physical realism and smoothness of BSIM3v3.  
  - Supports OpenMP for multi-threading in Levels 10 and 58 (BSIMSOIv4).  
- **Further Reference**: BSIMSOIv4.4 User Manual for details on the recent model version.
The SOI3 model (level 60) is defined in the Ngspice manual, with a key reference to literature citation [18] for its detailed description. There is no directly extractable or unique code/syntax provided in this section, nor are any theoretical characteristics or examples included; the location of the reference material is the only notable aspect.
**Summary**:

**HiSIM Models for Circuit Simulation**:
1. **HiSIM2 Model**:  
   - **Type**: Surface-Potential-Based MOSFET Model for Circuit Simulation.  
   - **Version**: 2.8.0.  
   - **Level**: 68.  

2. **HiSIM_HV Model**:  
   - **Type**: Surface-Potential-Based HV/LD-MOSFET Model for Circuit Simulation.  
   - **Versions**: 1.2.4 and 2.2.0.  
   - **Level**: 73.  

Additional references point to source code and manual available from relevant links.
Ngspice MOS Models via OpenVAF/OSDI (Section 7.6.7):

Ngspice integrates an OSDI interface and the OpenVAF compiler, enabling Verilog-A compact MOS models. Visit the [VA-Models GitHub repository](https://github.com/) for sources. Key models include:

**1) PSP Model (7.6.7.1):**  
- Purpose: Compact MOSFET model for digital, analog, and RF design.  
- Developer: NXP Semiconductors Research, universities, and CEA-Leti.  
- Characteristics:
  - Based on surface potential.
  - Models key deep-submicron CMOS effects:
    - Mobility reduction, velocity saturation, DIBL, gate current.
    - Lateral doping gradients, STI stress.
  - Integrated JUNCAP2 source/drain junction model.  
- Documentation: Available on the [CEA-Leti website](https://www.leti-cea.com).

**2) BSIM-BULK Model (7.6.7.2):**  
- Successor to BSIM4 with enhanced accuracy across all operational regions.  
- Features symmetry for analog and RF applications.

**3) BSIM-CMG Model (7.6.7.3):**  
- Purpose: Compact model for multi-gate FETs (e.g., FinFETs, Nanowire, Gate-All-Around transistors).  

**4) EKV3 Model (7.6.7.4):**  
- Characteristics:
  - Charge-based compact model suitable for CMOS scaling.
  - Adapts to planar bulk, double-gate, and FinFET technologies.
  - Designed for high-frequency, analog, and RF IC applications.

For details on model implementation and performance, refer to documentation in respective sources.
**MOSFETs in Ngspice:**

- **Model Support:** Ngspice includes all MOSFET models from SPICE3f5 and most newer open-source models.
- **Availability:** Supports both bulk and SOI (Silicon on Insulator) MOSFET models.
- **Numerical Models:** When compiled with the "cider option," it enables a four-terminal numerical model simulation for MOSFETs. Refer to numerical modeling documentation for further details.
### Summary of VDMOS Ngspice Model

#### General Features
- **VDMOS:** 3-terminal power MOSFET model (Drain, Gate, Source).
- Current equations partially based on modified MOS1 model. 
- Supports optional 5-node electro-thermal modeling with thermal nodes **TJ** (junction temperature) and **TCASE** (case temperature).

#### Key Characteristics:
- No **level parameter**; called with the `VDMOS` token on the `.model` line.
- **Channel type:** Default is n-channel unless specified with `PCHAN` or `NCHAN`.
- Standard MOS parameters `W` and `L` are not supported.
- Thermal modeling uses `RTHJC`, `CTHJ`, `TJ`, and `TCASE`.

---

#### **Basic Syntax**
- **Instance Line:**  
  `MXXXXXXX nd ng ns mname <m=val> <temp=t> <dtemp=t>`
- **Model Definition:**  
  `.model mname VDMOS <Pchan> <parameters>`

---

#### **Instance Parameters**  
(Default values are provided in parentheses)  
- `m` (Device multiplier, default = `1`)
- `off` (Initially off, default = `0`)
- `icvds` (Initial Drain-Source voltage, default = `0.0 V`)
- `icvgs` (Initial Gate-Source voltage, default = `0.0 V`)
- `temp` (Device temperature, default = `27°C`)
- `dtemp` (Temperature difference, default = `0.0°C`)
- `thermal` (Activates electro-thermal model for 5 nodes, if specified)

---

#### **Key Model Parameters**
(Default values in parentheses)
- **Electrical Parameters:**
  - `VTO` (Threshold voltage, default = `0.0 V`)
  - `KP` (Transconductance, default = `1.0 A/V²`)
  - `LAMBDA` (Channel length modulation, default = `0.0`)
  - `RD`, `RS`, `RG` (Drain, Source, Gate resistance, default = `0.0 Ω`)
  - `CJO` (Body diode zero-bias capacitance, default = `0.0 F`)
  - `CGS`, `CGDMAX`, `CGDMIN` (Capacitances, CGDMAX/MAX default = `0.0 F`)
  - `MTRIODE` (Triode region conductance multiplier, default = `1.0`)
  - `KSUBTHRES` (Subthreshold slope, default = `0.1`)
  - `BV`, `IBV`, `NBV` (Breakdown characteristics, `BV` default = ∞)
  - `IS` (Body diode saturation current, default = `1e-14 A`)

- **Thermal Parameters:**
  - `RTHJC` (Junction-to-case resistance, default = `1.0 K/W`)
  - `CTHJ` (Thermal capacitance, default = `10 µJ/K`)
  - `TEXP0`, `TEXP1` (Temperature exponents for resistances)

---

#### **Electro-Thermal Model Syntax**
- **Instance Line (5-node):**  
  `MXXXXXXX nd ng ns tj tc mname thermal <m=val> <temp=t> <dtemp=t>`
- Activates thermal behavior with `thermal` keyword. Nodes **TJ** and **TCASE** represent internal junction temperature and case temperature, respectively.

### Example
**Electro-Thermal VDMOS Model with Heat Sink:**
```
M1 24 2 0 tj tc IXTH48P20P thermal
rcs tc 1 0.1
csa 1 0 30m
rsa 1 amb 1.3
VTamb tamb 0 25
.MODEL IXTH48P20P VDMOS Pchan Vds=200 VTO=-4 KP=10 Lambda=5m
+ Mtriode=0.3 Ksubthres=120m Rs=10m Rd=20m Rds=200e6
+ Cgdmax=6000p Cgdmin=100p A=0.25 Cgs=5000p Cjo=9000p
+ Is=2e-6 Rb=20m BV=200 IBV=250e-6 NBV=4 TT=260e-9
+ Rthjc=0.4 Cthj=5e-3
```
- `Rcs`: Case-to-sink thermal resistance (`0.1 K/W`)  
- `Csa`: Sink thermal capacitance (`30 mF`)  
- `Rsa`: Sink-to-ambient thermal resistance (`1.3 K/W`)  

---

#### Additional Notes:  
- Electro-thermal model also includes feedback and additional circuit matrix elements for better accuracy.
- Heat dissipation can be directed via heat sink connections on **TCASE**.


From the provided text snippet, the header “7 Device Models” indicates that the section will likely discuss device models in Ngspice, their characteristics, syntax, and parameters. As no further content is present in the provided text, there is no specific information, syntax, or examples available to summarize or extract.
